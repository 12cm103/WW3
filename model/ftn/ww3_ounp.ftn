!/ ------------------------------------------------------------------- /
      PROGRAM W3OUNP
!/
!/                  +-----------------------------------+
!/                  | WAVEWATCH III           NOAA/NCEP |
!/                  |           H. L. Tolman            |
!/                  |            J.H. Alves             |
!/                  |             A. Chawla             |
!/                  |            F. Ardhuin             |
!/                  |                        FORTRAN 90 |
!/                  | Last update :         30-Oct-2009 |
!/                  +-----------------------------------+
!/
!/    14-Jan-1999 : Final FORTRAN 77                    ( version 1.18 )
!/    21-Jan-2000 : Upgrade to FORTRAN 90               ( version 2.00 )
!/    14-Feb-2000 : Exact nonlinear interactions        ( version 2.01 )
!/    09-Jan-2001 : U* bug fix in tabular output        ( version 2.05 )
!/    25-Jan-2001 : Flat grid version                   ( version 2.06 )
!/    02-Feb-2001 : Xnl version 3.0                     ( version 2.07 )
!/    11-Jun-2001 : Clean up                            ( version 2.11 )
!/    11-Oct-2001 : Clean up, X*, Y* in tables          ( version 2.14 )
!/    13-Nov-2002 : Add stress vector                   ( version 3.00 )
!/    27-Nov-2002 : First version of VDIA and MDIA      ( version 3.01 )
!/    24-Dec-2004 : Multiple grid version.              ( version 3.06 )
!/    17-Apr-2006 : Filter for directional spread.      ( version 3.09 )
!/    23-Jun-2006 : Linear input added.                 ( version 3.09 )
!/    28-Jun-2006 : Adding file name preamble.          ( version 3.09 )
!/    03-Jul-2006 : Separate flux modules.              ( version 3.09 )
!/    28-Oct-2006 : Add partitioning option.            ( version 3.10 )
!/    24-Mar-2007 : Add pars for entire spectrum.       ( version 3.11 )
!/    25-Apr-2007 : Battjes-Janssen Sdb added.          ( version 3.11 )
!/                  (J. H. Alves)
!/    08-Aug-2007 : Creation of buoy log file added     ( version 3.12 )
!/                  (switch O14 -- A. Chawla)
!/    09-Oct-2007 : WAM 4+ Sin and Sds added.           ( version 3.13 )
!/                  (F. Ardhuin)
!/    09-Oct-2007 : Experimental Sbs (BS1) added.       ( version 3.13 )
!/                  (F. Ardhuin)
!/    09-Apr-2008 : Adding an additional output for     ( version 3.12 )
!/                  WMO standard (A. Chawla)
!/    29-Apr-2008 : Adjust format partition output.     ( version 3.14 )
!/    29-May-2009 : Preparing distribution version.     ( version 3.14 )
!/    30-Oct-2009 : Implement run-time grid selection.  ( version 3.14 )
!/                  (W. E. Rogers & T. J. Campbell, NRL)
!/
!/    Copyright 2009 National Weather Service (NWS),
!/       National Oceanic and Atmospheric Administration.  All rights
!/       reserved.  WAVEWATCH III is a trademark of the NWS. 
!/       No unauthorized use without permission.
!/
!  1. Purpose :
!
!     Post-processing of point output.
!
!  2. Method :
!
!     Data is read from the grid output file out_pnt.ww3 (raw data)
!     and from the file ww3_ounp.inp ( NDSI, output requests ).
!     Model definition and raw data files are read using WAVEWATCH III
!     subroutines.
!
!     Output types ITYPE :            Sub-type OTYPE :
!     --------------------           -----------------
!       0 : Check file.
!       1 : Spectra.
!                                      1 : Print plots.
!                                      2 : Table of 1-D spectra
!                                      3 : Transfer file
!                                      4 : Spectral partitioning
!       2 : Table of mean wave parameters
!                                      1 : depth, current,  wind
!                                      2 : Mean wave pars.
!                                      3 : Nondimensional pars. (U*)
!                                      4 : Nondimensional pars. (U10)
!                                      5 : Validation table
!                                      6 : WMO standard output
!       3 : Source terms
!                                      1 : Print plots.
!                                      2 : Table of 1-D S(f).
!                                      3 : Table of 1-D time scales.
!                                      4 : Transfer file.
!       4 : NetCDF Spectra
!                                      1 : Print plots
!                                      2 : Table ok 1-D spectra
!                                      3 : Transfer file
!                                      ...
!
!
!
!  3. Parameters :
!
!  4. Subroutines used :
!
!      Name      Type  Module   Description
!     ----------------------------------------------------------------
!      W3NMOD    Subr. W3GDATMD Set number of model.
!      W3SETG    Subr.   Id.    Point to selected model.
!      W3NDAT    Subr. W3WDATMD Set number of model for wave data.
!      W3SETW    Subr.   Id.    Point to selected model for wave data.
!      W3NAUX    Subr. W3ADATMD Set number of model for aux data.
!      W3SETA    Subr.   Id.    Point to selected model for aux data.
!      W3NOUT    Subr. W3ODATMD Set number of model for output.
!      W3SETO    Subr.   Id.    Point to selected model for output.
!      ITRACE    Subr. W3SERVMD Subroutine tracing initialization.
!      STRACE    Subr.   Id.    Subroutine tracing.
!      NEXTLN    Subr.   Id.    Get next line from input filw
!      EXTCDE    Subr.   Id.    Abort program as graceful as possible.
!      STME21    Subr. W3TIMEMD Convert time to string.
!      TICK21    Subr.   Id.    Advance time.
!      DSEC21    Func.   Id.    Difference between times.
!      W3IOGR    Subr. W3IOGRMD Reading/writing model definition file.
!      W3IOPO    Subr. W3IOPOMD Reading/writing raw point output file.
!      W3EXNC    Subr. Internal Execute point output.
!     ----------------------------------------------------------------
!
!  5. Called by :
!
!     None, stand-alone program.
!
!  6. Error messages :
!
!     Checks on input, checks in W3IOxx.
!
!  7. Remarks :
!
!     - Tables written to file 'tabNN.ww3', where NN is the
!       unit umber (NDSTAB).
!     - Transfer file written to ww3.yymmddhh.spc with multiple
!       spectra and times in file. yymmddhh relates to first
!       output (NDSTAB).
!
!  8. Structure :
!
!     See source code.
!
!  9. Switches :
!
!       !/S    Enable subroutine tracing.
!
!       !/NCO  NCEP NCO modifications for operational implementation.
!
!       !/O14  Buoy log file generation.
!
! 10. Source code :
!
!/ ------------------------------------------------------------------- /
      USE CONSTANTS
!/
!     USE W3GDATMD, ONLY: W3NMOD, W3SETG
      USE W3WDATMD, ONLY: W3SETW, W3NDAT
!/NL1      USE W3ADATMD, ONLY: W3SETA, W3NAUX
      USE W3ODATMD, ONLY: W3SETO, W3NOUT
      USE W3IOGRMD, ONLY: W3IOGR
      USE W3IOPOMD, ONLY: W3IOPO
      USE W3SERVMD, ONLY : ITRACE, NEXTLN, EXTCDE
!/S      USE W3SERVMD, ONLY : STRACE
      USE W3TIMEMD, ONLY: STME21, TICK21, DSEC21, julday
!/
      USE W3GDATMD
      USE W3WDATMD, ONLY: TIME
      USE W3ODATMD, ONLY: NDSE, NDST, NDSO, NOPTS, PTLOC, PTNME,     &
                          DPO, WAO, WDO, ASO, CAO, CDO, SPCO, FNMPRE
!/O14      USE W3ODATMD, ONLY: GRDID
!

      USE NETCDF

      IMPLICIT NONE
      

!/
!/ ------------------------------------------------------------------- /
!/ Local parameters
!/
      INTEGER                 :: NDSI, NDSM, NDSOP,  NDSTRC, NTRACE,  &
                                 IERR, I, TOUT(2), NOUT, TDUM(2),     &
                                 NREQ, IPOINT, ITYPE, OTYPE, NDSTAB,  &
                                 IOTEST, IK, ITH, IOUT, J, DIMXP
      INTEGER                 :: ISCALE = 0
!/O14      INTEGER                 :: NDBO
!/S      INTEGER, SAVE           :: IENT   = 0
      REAL                    :: DTREQ, SCALE1, SCALE2, DTEST
      REAL                    :: M2KM
      REAL, ALLOCATABLE       :: XPART(:,:)
      LOGICAL                 :: FLFORM, FLSRCE(6)
      LOGICAL, ALLOCATABLE    :: FLREQ(:)

      CHARACTER               :: COMSTR*1, IDTIME*23, IDDDAY*11,      &
                                 TABNME*9, TFNAME*21
      CHARACTER*25            :: IDSRCE(6)

      REAL(kind=4)            :: DTHD,RTH0
      REAL(kind=4),DIMENSION(:),ALLOCATABLE    :: THD



!ITYPE=5
      integer               ::  ncid,iret
      character(len=1024)   ::  ncfile
      integer               ::  dimid(7), dimln(5), varid(26)

!/
!/ ------------------------------------------------------------------- /
!/
      DATA IDSRCE / 'Spectrum                 ' ,                     &
                    'Wind-wave interactions   ' ,                     &
                    'Nonlinear interactions   ' ,                     &
                    'Dissipation              ' ,                     &
                    'Wave-bottom interactions ' ,                     &
                    'Sum of selected sources  ' /
      FLSRCE = .FALSE.
!
!/NCO/!     CALL W3TAGB('WAVESPEC',1998,0007,0050,'NP21   ')
!
!--- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
! 1.  IO set-up.
!
      CALL W3NMOD ( 1, 6, 6 )
      CALL W3SETG ( 1, 6, 6 )
      CALL W3NDAT (    6, 6 )
      CALL W3SETW ( 1, 6, 6 )
!/NL1      CALL W3NAUX (    6, 6 )
!/NL1      CALL W3SETA ( 1, 6, 6 )
      CALL W3NOUT (    6, 6 )
      CALL W3SETO ( 1, 6, 6 )
!
      NDSI   = 10
      NDSM   = 20
      NDSOP  = 20
!
      NDSTRC =  6
      NTRACE = 10
      CALL ITRACE ( NDSTRC, NTRACE )
!
!/S      CALL STRACE (IENT, 'W3OUNP')
!
!/NCO/!
!/NCO/! Redo according to NCO
!/NCO/!
!/NCO      NDSI   = 11
!/NCO      NDSO   =  6
!/NCO      NDSE   = NDSO
!/NCO      NDST   = NDSO
!/NCO      NDSM   = 12
!/NCO      NDSOP  = 13
!/O14      NDBO   = 14
!/NCO      NDSTRC = NDSO
!
      WRITE (NDSO,900)
!
      J      = LEN_TRIM(FNMPRE)
      OPEN (NDSI,FILE=FNMPRE(:J)//'ww3_ounp.inp',STATUS='OLD',        &
            ERR=800,IOSTAT=IERR)
      READ (NDSI,'(A)',END=801,ERR=802) COMSTR
      IF (COMSTR.EQ.' ') COMSTR = '$'
      WRITE (NDSO,901) COMSTR
!
!--- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
! 2.  Read model definition file.
!
      CALL W3IOGR ( 'READ', NDSM )
      WRITE (NDSO,920) GNAME
!
      IF ( FLAGLL ) THEN
          M2KM = 1.
        ELSE
          M2KM = 1.E-3
        END IF
!
      DIMXP  = ((NK+1)/2) * ((NTH-1)/2)
      ALLOCATE ( XPART(6,0:DIMXP) )
!
!--- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
! 3.  Read general data and first fields from file
!
      CALL W3IOPO ( 'READ', NDSOP, IOTEST )
!
      WRITE (NDSO,930)
      DO I=1, NOPTS
        IF ( FLAGLL ) THEN
            WRITE (NDSO,931) PTNME(I), M2KM*PTLOC(1,I), M2KM*PTLOC(2,I)
          ELSE
            WRITE (NDSO,932) PTNME(I), M2KM*PTLOC(1,I), M2KM*PTLOC(2,I)
          END IF
        END DO
!
!--- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
! 4.  Read requests from input file.
!     Output times
!
      CALL NEXTLN ( COMSTR , NDSI , NDSE )
      READ (NDSI,*,END=801,ERR=802) TOUT, DTREQ, NOUT
      DTREQ  = MAX ( 0. , DTREQ )
      IF ( DTREQ.EQ.0 ) NOUT = 1
      NOUT   = MAX ( 1 , NOUT )
!
      CALL STME21 ( TOUT , IDTIME )
      WRITE (NDSO,940) IDTIME
!
      TDUM   = 0
      CALL TICK21 ( TDUM , DTREQ )
      CALL STME21 ( TDUM , IDTIME )
      IF ( DTREQ .GE. 86400. ) THEN
          WRITE (IDDDAY,'(I10,1X)') INT(DTREQ/86400.)
        ELSE
          IDDDAY = '           '
        END IF
      IDTIME(1:11) = IDDDAY
      IDTIME(21:23) = '   '
      WRITE (NDSO,941) IDTIME, NOUT
!
! ... Output points
!
      ALLOCATE ( FLREQ(NOPTS) )
      FLREQ = .FALSE.
      NREQ   = 0
!
  410 CONTINUE
      CALL NEXTLN ( COMSTR , NDSI , NDSE )
      READ (NDSI,*,END=801,ERR=802) IPOINT
      IF ( IPOINT .GT. 0 ) THEN
          IF ( IPOINT .LE. NOPTS ) THEN
              IF ( .NOT. FLREQ(IPOINT) ) NREQ   = NREQ + 1
              FLREQ(IPOINT) = .TRUE.
            END IF
          GOTO 410
        END IF
!
! ... Output type
!
      CALL NEXTLN ( COMSTR , NDSI , NDSE )
      READ (NDSI,*,END=801,ERR=802) ITYPE

!
! ... Convert direction unit in degree
!

      ALLOCATE(THD(NTH))
      DTHD=360./NTH
      RTH0=TH(1)/DTH
      DO ITH=1, NTH
          THD(ITH)=DTHD*(RTH0+REAL(ITH-1))
      END DO

!
! ... ITYPE = 0
!
      IF ( ITYPE .EQ. 0 ) THEN
!
!/O14          WRITE (NDSO,942) ITYPE, 'Generating buoy log file'
!/O14          OPEN (NDBO,FILE=FNMPRE(:J)//'buoy_log.ww3',            &
!/O14                STATUS='NEW',ERR=805,IOSTAT=IERR)
!/O14          DO I = 1,NOPTS
!/O14            WRITE(NDBO,945) I, PTNME(I), PTLOC(1,I),             &
!/O14                            PTLOC(2,I), GRDID(I)
!/O14            END DO
!/O14          CLOSE(NDBO)
!
          WRITE (NDSO,942) ITYPE, 'Checking contents of file'
          DO
            CALL STME21 ( TIME , IDTIME )
            WRITE (NDSO,948) IDTIME
            CALL W3IOPO ( 'READ', NDSOP, IOTEST )
            IF ( IOTEST .EQ. -1 ) THEN
                WRITE (NDSO,949)
                GOTO 888
              END IF
            END DO
!
! ... ITYPE = 1
!
        ELSE IF (ITYPE .EQ. 1) THEN
          WRITE (NDSO,942) ITYPE, '1-D and/or 2-D spectra'
          CALL NEXTLN ( COMSTR , NDSI , NDSE )
          READ (NDSI,*,END=801,ERR=802) OTYPE, SCALE1, SCALE2,        &
                NDSTAB, FLFORM
!/NCO          NDSTAB = 51
          IF (OTYPE .EQ. 1) THEN
              WRITE (NDSO,943) 'print plots'
              IF ( SCALE1 .LT. 0.  ) THEN
                  WRITE (NDSO,1940) '1-D'
                ELSE IF ( SCALE1 .EQ. 0.  ) THEN
                  WRITE (NDSO,1941) '1-D'
                ELSE
                  WRITE (NDSO,1942) '1-D', SCALE1
                END IF
              IF ( SCALE2 .LT. 0.  ) THEN
                  WRITE (NDSO,1940) '2-D'
                ELSE IF ( SCALE2 .EQ. 0.  ) THEN
                  WRITE (NDSO,1941) '2-D'
                ELSE
                  WRITE (NDSO,1942) '2-D', SCALE2
                END IF
            ELSE IF ( OTYPE .EQ. 2 ) THEN
              WRITE (NDSO,943) 'Table of 1-D spectral data'
              TABNME = 'tab--.ww3'
              IF ( NDSTAB.LE.0 .OR. NDSTAB.GT.99 ) NDSTAB = 51
              WRITE ( TABNME(4:5) , '(I2.2)' ) NDSTAB
              J      = LEN_TRIM(FNMPRE)
              OPEN (NDSTAB,FILE=FNMPRE(:J)//TABNME,ERR=803,IOSTAT=IERR)
              WRITE (NDSO,1947) TABNME
            ELSE IF ( OTYPE .EQ. 3 ) THEN
              TFNAME = 'ww3.--------.spc'
              WRITE (TFNAME(5:12),'(I6.6,I2.2)')                      &
                   MOD(TOUT(1),1000000), TOUT(2)/10000
              WRITE (NDSO,943) 'Transfer file'
              IF ( FLFORM ) THEN
                  WRITE (NDSO,1943) TFNAME, 'UNFORMATTED'
                  J      = LEN_TRIM(FNMPRE)
                  OPEN  (NDSTAB,FILE=FNMPRE(:J)//TFNAME,ERR=804,      &
                         IOSTAT=IERR,FORM='UNFORMATTED')
                  WRITE (NDSTAB) 'WAVEWATCH III SPECTRA',             &
                                  NK, NTH, NREQ, GNAME
                  WRITE (NDSTAB) (SIG(IK)*TPIINV,IK=1,NK)
                  WRITE (NDSTAB) (MOD(450-THD(ITH),360.),ITH=1,NTH)

                ELSE
                  WRITE (NDSO,1943) TFNAME, 'FORMATTED'
                  J      = LEN_TRIM(FNMPRE)
                  OPEN  (NDSTAB,FILE=FNMPRE(:J)//TFNAME,ERR=804,      &
                         IOSTAT=IERR,FORM='FORMATTED')
                  WRITE (NDSTAB,1944) 'WAVEWATCH III SPECTRA',        &
                                       NK, NTH, NREQ, GNAME
                  WRITE (NDSTAB,1945) (SIG(IK)*TPIINV,IK=1,NK)
                  WRITE (NDSTAB,1946)                                 &
                               (MOD(450-THD(ITH),360.),ITH=1,NTH)
                END IF
            ELSE IF ( OTYPE .EQ. 4 ) THEN
              WRITE (NDSO,943) 'Partitioning of spectra'
              TABNME = 'tab--.ww3'
              IF ( NDSTAB.LE.0 .OR. NDSTAB.GT.99 ) NDSTAB = 51
              WRITE ( TABNME(4:5) , '(I2.2)' ) NDSTAB
              J      = LEN_TRIM(FNMPRE)
              OPEN (NDSTAB,FILE=FNMPRE(:J)//TABNME,ERR=803,IOSTAT=IERR)
              WRITE (NDSO,1947) TABNME
            ELSE
              WRITE (NDSE,1011) OTYPE
              CALL EXTCDE ( 10 )
            END IF
!
! ... ITYPE = 2
!
        ELSE IF (ITYPE .EQ. 2) THEN
          WRITE (NDSO,942) ITYPE, 'Table of mean wave parameters'
          CALL NEXTLN ( COMSTR , NDSI , NDSE )
          READ (NDSI,*,END=801,ERR=802) OTYPE, NDSTAB
!/NCO          NDSTAB = 51
          TABNME = 'tab--.ww3'
          IF ( NDSTAB.LE.0 .OR. NDSTAB.GT.99 ) NDSTAB = 51
          WRITE ( TABNME(4:5) , '(I2.2)' ) NDSTAB
          J      = LEN_TRIM(FNMPRE)
          OPEN (NDSTAB,FILE=FNMPRE(:J)//TABNME,ERR=803,IOSTAT=IERR)
          IF ( OTYPE .EQ. 1 ) THEN
              WRITE (NDSO,2940) 'depth, current and wind', TABNME
            ELSE IF ( OTYPE .EQ. 2 ) THEN
              WRITE (NDSO,2940) 'Mean wave parameters', TABNME
            ELSE IF ( OTYPE .EQ. 3 ) THEN
              WRITE (NDSO,2940) 'Nondimensional parameters (U*)',     &
                                 TABNME
            ELSE IF ( OTYPE .EQ. 4 ) THEN
              WRITE (NDSO,2940) 'Nondimensional parameters (U10)',    &
                                 TABNME
            ELSE IF ( OTYPE .EQ. 5 ) THEN
              WRITE (NDSO,2940) 'Validation parameters', TABNME
            ELSE IF ( OTYPE .EQ. 6 ) THEN
              WRITE (NDSO,2940) 'WMO standard mean parameters', TABNME
            ELSE
              WRITE (NDSE,1011) OTYPE
              CALL EXTCDE ( 20 )
            END IF
!
! ... ITYPE = 3
!
        ELSE IF (ITYPE .EQ. 3) THEN
          WRITE (NDSO,942) ITYPE, 'Source terms'
          CALL NEXTLN ( COMSTR , NDSI , NDSE )
          READ (NDSI,*,END=801,ERR=802) OTYPE, SCALE1, SCALE2,        &
                                        NDSTAB, FLSRCE, ISCALE, FLFORM
!/NCO          NDSTAB = 51
          ISCALE = MAX ( 0 , MIN ( 5 , ISCALE ) )
          IF ( OTYPE .EQ. 1 ) THEN
              WRITE (NDSO,943) 'Print plots'
            ELSE IF ( OTYPE .EQ. 2 ) THEN
              IF ( ISCALE .LE. 2) THEN
                  WRITE (NDSO,943) 'Tables as a function of freq.'
                ELSE
                  WRITE (NDSO,943) 'Tables as a function of f/fp.'
                END IF
              IF ( MOD(ISCALE,3) .EQ. 1 ) THEN
                  WRITE (NDSO,944) '(nondimensional based on U10)'
                ELSE IF ( MOD(ISCALE,3) .EQ. 2) THEN
                  WRITE (NDSO,944) '(nondimensional based on U*)'
                END IF
            ELSE IF ( OTYPE .EQ. 3 ) THEN
              IF ( ISCALE .LE. 2) THEN
                  WRITE (NDSO,943) 'Time scales as a function of freq.'
                ELSE
                  WRITE (NDSO,943) 'Time scales as a function of f/fp.'
                END IF
              IF ( ISCALE .EQ. 1 ) THEN
                  WRITE (NDSO,944) '(nondimensional based on U10)'
                ELSE IF ( ISCALE .EQ. 2) THEN
                  WRITE (NDSO,944) '(nondimensional based on U*)'
                END IF
            ELSE IF ( OTYPE .EQ. 4 ) THEN
              TFNAME = 'ww3.--------.src'
              WRITE (TFNAME(5:12),'(I6.6,I2.2)')                      &
                   MOD(TOUT(1),1000000), TOUT(2)/10000
              WRITE (NDSO,943) 'Transfer file'
              IF ( FLFORM ) THEN
                  WRITE (NDSO,3943) TFNAME, 'UNFORMATTED'
                  J      = LEN_TRIM(FNMPRE)
                  OPEN  (NDSTAB,FILE=FNMPRE(:J)//TFNAME,ERR=804,      &
                         IOSTAT=IERR,FORM='UNFORMATTED')
                  WRITE (NDSTAB) 'WAVEWATCH III SOURCES',             &
                                  NK, NTH, NREQ, FLSRCE
                  WRITE (NDSTAB) (SIG(IK)*TPIINV,IK=1,NK)
                  WRITE (NDSTAB) (MOD(450-THD(ITH),360.),ITH=1,NTH)

                ELSE
                  WRITE (NDSO,3943) TFNAME, 'FORMATTED'
                  J      = LEN_TRIM(FNMPRE)
                  OPEN  (NDSTAB,FILE=FNMPRE(:J)//TFNAME,ERR=804,      &
                         IOSTAT=IERR,FORM='FORMATTED')
                  WRITE (NDSTAB,3944) 'WAVEWATCH III SOURCES',        &
                                       NK, NTH, NREQ, FLSRCE
                  WRITE (NDSTAB,3945) (SIG(IK)*TPIINV,IK=1,NK)
                  WRITE (NDSTAB,3946)                                 &
                               (MOD(450-THD(ITH),360.),ITH=1,NTH)
                END IF
            ELSE
              WRITE (NDSE,1011) OTYPE
              CALL EXTCDE ( 30 )
            END IF
!
          DO I=1, 6
            IF ( FLSRCE(I) ) WRITE (NDSO,3940) IDSRCE(I)
            END DO
          WRITE (NDSO,*) ' '
!
          IF ( OTYPE .EQ. 1 ) THEN
              IF ( SCALE1 .LT. 0.  ) THEN
                  WRITE (NDSO,1940) '1-D'
                ELSE IF ( SCALE1 .EQ. 0.  ) THEN
                  WRITE (NDSO,1941) '1-D'
                ELSE
                  WRITE (NDSO,1942) '1-D', SCALE1
                END IF
              IF ( SCALE2 .LT. 0.  ) THEN
                  WRITE (NDSO,1940) '2-D'
                ELSE IF ( SCALE2 .EQ. 0.  ) THEN
                  WRITE (NDSO,1941) '2-D'
                ELSE
                  WRITE (NDSO,1942) '2-D', SCALE2
                END IF
            END IF
!
          IF ( OTYPE.EQ.2 .OR. OTYPE.EQ.3 ) THEN
              TABNME = 'tab--.ww3'
              IF ( NDSTAB.LE.0 .OR. NDSTAB.GT.99 ) NDSTAB = 51
              WRITE ( TABNME(4:5) , '(I2.2)' ) NDSTAB
              J      = LEN_TRIM(FNMPRE)
              OPEN (NDSTAB,FILE=FNMPRE(:J)//TABNME,ERR=803,IOSTAT=IERR)
              WRITE (NDSO,3941) TABNME
            END IF

!
! ... ITYPE = 4
!
        ELSE IF (ITYPE .EQ. 4) THEN
          WRITE (NDSO,942) ITYPE, '1-D and/or 2-D spectra'
          CALL NEXTLN ( COMSTR , NDSI , NDSE )
          READ (NDSI,*,END=801,ERR=802) OTYPE, SCALE1, SCALE2,        &
                NDSTAB, FLFORM
!/NCO          NDSTAB = 51
          IF (OTYPE .EQ. 1) THEN
              WRITE (NDSO,943) 'print plots'
              IF ( SCALE1 .LT. 0.  ) THEN
                  WRITE (NDSO,1940) '1-D'
                ELSE IF ( SCALE1 .EQ. 0.  ) THEN
                  WRITE (NDSO,1941) '1-D'
                ELSE
                  WRITE (NDSO,1942) '1-D', SCALE1
                END IF
              IF ( SCALE2 .LT. 0.  ) THEN
                  WRITE (NDSO,1940) '2-D'
                ELSE IF ( SCALE2 .EQ. 0.  ) THEN
                  WRITE (NDSO,1941) '2-D'
                ELSE
                  WRITE (NDSO,1942) '2-D', SCALE2
                END IF
!
            ELSE IF ( OTYPE .EQ. 2 ) THEN
              WRITE (NDSO,943) 'Table of 1-D spectral data'
              TABNME = 'tab--.nc'
              IF ( NDSTAB.LE.0 .OR. NDSTAB.GT.99 ) NDSTAB = 51
              WRITE ( TABNME(4:5) , '(I2.2)' ) NDSTAB
              J      = LEN_TRIM(FNMPRE)
              OPEN (NDSTAB,FILE=FNMPRE(:J)//TABNME,ERR=803,IOSTAT=IERR)
              WRITE (NDSO,1947) TABNME

              ! Create the netCDF file
              dimln(1)=NF90_UNLIMITED  !time
              dimln(2)=NOPTS ! lon
              dimln(3)=NOPTS ! lat
              dimln(4)=NK ! freq
              ncfile=trim(FNMPRE(:J)//TABNME)  ! filename
              CALL W3CRNC(ITYPE,OTYPE,ncfile,ncid,dimid,dimln,varid)

            ELSE IF ( OTYPE .EQ. 3 ) THEN
              TFNAME = 'ww3_--------_spec.nc'
              WRITE (TFNAME(5:12),'(I6.6,I2.2)')          &
                   MOD(TOUT(1),1000000), TOUT(2)/10000
              WRITE (NDSO,943) 'Transfer file'

              J = LEN_TRIM(FNMPRE)
              OPEN (NDSTAB,FILE=FNMPRE(:J)//TFNAME,ERR=804,      &
                         IOSTAT=IERR,FORM='UNFORMATTED')
              WRITE (NDSO,1947) TFNAME

              ! Create the netCDF file
              dimln(1)=NF90_UNLIMITED  !time
              dimln(2)=NOPTS ! lon
              dimln(3)=NOPTS ! lat
              dimln(4)=NK ! freq
              dimln(5)=NTH ! dir
              ncfile=trim(FNMPRE(:J)//TFNAME)  ! filename
              CALL W3CRNC(ITYPE,OTYPE,ncfile,ncid,dimid,dimln,varid)

            ELSE IF ( OTYPE .EQ. 4 ) THEN
              WRITE (NDSO,943) 'Partitioning of spectra'
              TABNME = 'tab--.nc'
              IF ( NDSTAB.LE.0 .OR. NDSTAB.GT.99 ) NDSTAB = 51
              WRITE ( TABNME(4:5) , '(I2.2)' ) NDSTAB
              J      = LEN_TRIM(FNMPRE)
              OPEN (NDSTAB,FILE=FNMPRE(:J)//TABNME,ERR=803,IOSTAT=IERR)
              WRITE (NDSO,1947) TABNME

              ! Create the netCDF file
              dimln(1)=NF90_UNLIMITED  !time
              dimln(2)=NOPTS ! lon
              dimln(3)=NOPTS ! lat
              dimln(4)=DIMXP ! npart
              ncfile=trim(FNMPRE(:J)//TABNME)  ! filename
              CALL W3CRNC(ITYPE,OTYPE,ncfile,ncid,dimid,dimln,varid)

            ELSE
              WRITE (NDSE,1011) OTYPE
              CALL EXTCDE ( 10 )
            END IF

!
! ... ITYPE = 5
!
        ELSE IF (ITYPE .EQ. 5) THEN
          WRITE (NDSO,942) ITYPE, 'Table of mean wave parameters'
          CALL NEXTLN ( COMSTR , NDSI , NDSE )
          READ (NDSI,*,END=801,ERR=802) OTYPE, NDSTAB
!/NCO          NDSTAB = 51
          TABNME = 'tab--.nc'
          IF ( NDSTAB.LE.0 .OR. NDSTAB.GT.99 ) NDSTAB = 51
          WRITE ( TABNME(4:5) , '(I2.2)' ) NDSTAB
          J = LEN_TRIM(FNMPRE)
          OPEN (NDSTAB,FILE=FNMPRE(:J)//TABNME,ERR=803,IOSTAT=IERR)

          ! Create the netCDF file
          dimln(1)=NF90_UNLIMITED  !time
          dimln(2)=NOPTS ! lon
          dimln(3)=NOPTS ! lat
          ncfile=trim(FNMPRE(:J)//TABNME)  ! filename
          CALL W3CRNC(ITYPE,OTYPE,ncfile,ncid,dimid,dimln,varid)

          IF ( OTYPE .EQ. 1 ) THEN
              WRITE (NDSO,2940) 'depth, current and wind', TABNME
            ELSE IF ( OTYPE .EQ. 2 ) THEN
              WRITE (NDSO,2940) 'Mean wave parameters', TABNME
            ELSE IF ( OTYPE .EQ. 3 ) THEN
              WRITE (NDSO,2940) 'Nondimensional parameters (U*)',     &
                                 TABNME
            ELSE IF ( OTYPE .EQ. 4 ) THEN
              WRITE (NDSO,2940) 'Nondimensional parameters (U10)',    &
                                 TABNME
            ELSE IF ( OTYPE .EQ. 5 ) THEN
              WRITE (NDSO,2940) 'Validation parameters', TABNME
            ELSE IF ( OTYPE .EQ. 6 ) THEN
              WRITE (NDSO,2940) 'WMO standard mean parameters', TABNME
            ELSE
              WRITE (NDSE,1011) OTYPE
              CALL EXTCDE ( 20 )
            END IF

!
! ... ITYPE = ILLEGAL
!
        ELSE
          WRITE (NDSE,1010) ITYPE
          CALL EXTCDE ( 1 )
!
        END IF
!
! ... Output of output points
!
      WRITE (NDSO,950) NREQ
      DO I=1, NOPTS
        IF (FLREQ(I)) THEN
            IF ( FLAGLL ) THEN
                WRITE (NDSO,951) PTNME(I), M2KM*PTLOC(1,I),   &
                                           M2KM*PTLOC(2,I)
              ELSE
                WRITE (NDSO,953) PTNME(I), M2KM*PTLOC(1,I),   &
                                           M2KM*PTLOC(2,I)
              END IF
          END IF
        END DO
!
      IF ( ITYPE.EQ.3 .AND. OTYPE.EQ.4 ) WRITE (NDSO,952)
!
!--- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
! 5.  Time management.
!
      IOUT   = 0
!
      DO
        DTEST  = DSEC21 ( TIME , TOUT )
        IF ( DTEST .GT. 0. ) THEN
            CALL W3IOPO ( 'READ', NDSOP, IOTEST )
            IF ( IOTEST .EQ. -1 ) THEN
                WRITE (NDSO,949)
                EXIT
              END IF
            CYCLE
          END IF
        IF ( DTEST .LT. 0. ) THEN
            CALL TICK21 ( TOUT , DTREQ )
            CYCLE
          END IF
!
        IOUT   = IOUT + 1
        CALL STME21 ( TOUT , IDTIME )
        IF ( ( ITYPE.EQ.1 .AND. OTYPE.EQ.1 ) .OR.                     &
             ( ITYPE.EQ.4 .AND. OTYPE.EQ.1 ) .OR.                     &
             ( ITYPE.EQ.3 .AND. OTYPE.EQ.1 )                          &
             ) WRITE (NDSO,960) IDTIME
        CALL W3EXNC
        CALL TICK21 ( TOUT , DTREQ )
        IF ( IOUT .GE. NOUT ) EXIT
        END DO


!
      GOTO 888
!
! Escape locations read errors :
!
  800 CONTINUE
      WRITE (NDSE,1000) IERR
      CALL EXTCDE ( 40 )
!
  801 CONTINUE
      WRITE (NDSE,1001)
      CALL EXTCDE ( 41 )
!
  802 CONTINUE
      WRITE (NDSE,1002) IERR
      CALL EXTCDE ( 42 )
!
  803 CONTINUE
      WRITE (NDSE,1003) IERR
      CALL EXTCDE ( 43 )
!
  804 CONTINUE
      WRITE (NDSE,1004) IERR
      CALL EXTCDE ( 44 )
!
!/O14  805 CONTINUE
!/O14      WRITE (NDSE,1005) IERR
!/O14      CALL EXTCDE ( 45 )
!
  888 CONTINUE
!
      WRITE (NDSO,999)
!
!/NCO/!     CALL W3TAGE('WAVESPEC')
!
! Formats
!
  900 FORMAT (/15X,'    *** WAVEWATCH III Point output post.***    '/ &
               15X,'==============================================='/)
  901 FORMAT ( '  Comment character is ''',A,''''/)
!
  920 FORMAT ( '  Grid name : ',A/)
!
  930 FORMAT ( '  Points in file : '/                                 &
               ' ------------------------------------')
  931 FORMAT ( '      ',A,2F10.2)
  932 FORMAT ( '      ',A,2(F8.1,'E3'))
!
  940 FORMAT (/'  Output time data : '/                               &
               ' --------------------------------------------------'/ &
               '      First time         : ',A)
  941 FORMAT ( '      Interval           : ',A/                       &
               '      Number of requests : ',I4)
  942 FORMAT (/'  Output type ',I2,' :'/                              &
               ' --------------------------------------------------'/ &
               '      ',A/)
  943 FORMAT ( '      Subtype   : ',A)
  944 FORMAT ( '                  ',A)
!/O14   945 FORMAT ( '      ',I5,3X,A,2F10.2,3X,A)
  948 FORMAT ( '      Data for ',A)
  949 FORMAT (/'      End of file reached '/)
!
  950 FORMAT (/'  Requested output for',I3,' points : '/              &
               ' --------------------------------------------------')
  951 FORMAT ( '      ',A,2F10.2)
  953 FORMAT ( '      ',A,2(F8.1,'E3'))
  952 FORMAT (/'  Output times :'/                                    &
               ' --------------------------------------------------')
!
 1940 FORMAT ( '      ',A,' print plots not requested.')
 1941 FORMAT ( '      ',A,' print plots normalized.')
 1942 FORMAT ( '      Scale factor ',A,' spectrum : ',E10.3)
 1943 FORMAT ( '      File name : ',A,' (',A,')')
 1944 FORMAT ('''',A,'''',1X,3I6,1X,'''',A,'''')
 1945 FORMAT (8E10.3)
 1946 FORMAT (7E11.3)
 1947 FORMAT ( '      File name : ',A)
!
 2940 FORMAT ( '      Table output : ',A/                             &
               '      File name    : ',A)
!
 3940 FORMAT ( '                        ',A)
 3941 FORMAT ( '      File name : ',A)
 3943 FORMAT ( '      File name : ',A,' (',A,')')
 3944 FORMAT ('''',A,'''',1X,3I6,6L2)
 3945 FORMAT (8E10.3)
 3946 FORMAT (7E11.3)
!
  960 FORMAT (//'  Output for ',A/                                    &
               ' --------------------------------------------------')
!
  999 FORMAT (/'  End of program '/                                   &
               ' ========================================='/          &
               '         WAVEWATCH III Point output '/)
!
 1000 FORMAT (/' *** WAVEWATCH III ERROR IN W3OUNP : '/               &
               '     ERROR IN OPENING INPUT FILE'/                    &
               '     IOSTAT =',I5/)
!
 1001 FORMAT (/' *** WAVEWATCH III ERROR IN W3OUNP : '/               &
               '     PREMATURE END OF INPUT FILE'/)
!
 1002 FORMAT (/' *** WAVEWATCH III ERROR IN W3OUNP : '/               &
               '     ERROR IN READING FROM INPUT FILE'/               &
               '     IOSTAT =',I5/)
!
 1003 FORMAT (/' *** WAVEWATCH III ERROR IN W3OUNP : '/               &
               '     ERROR IN OPENING TABLE FILE'/                    &
               '     IOSTAT =',I5/)
!
 1004 FORMAT (/' *** WAVEWATCH III ERROR IN W3OUNP : '/               &
               '     ERROR IN OPENING IDL FILE'/                      &
               '     IOSTAT =',I5/)
!
!/O14 1005 FORMAT (/' *** WAVEWATCH III ERROR IN W3OUNP : '/          &
!/O14               '     ERROR IN OPENING BUOY LOG FILE'/            &
!/O14               '     IOSTAT =',I5/)
!
 1010 FORMAT (/' *** WAVEWATCH III ERROR IN W3OUNP : '/               &
               '     ILLEGAL TYPE, ITYPE =',I4/)
!
 1011 FORMAT (/' *** WAVEWATCH III ERROR IN W3OUNP : '/               &
               '     ILLEGAL TYPE, OTYPE =',I4/)
!/
!/ Internal subroutine W3EXNC ---------------------------------------- /
!/
      CONTAINS
!/ ------------------------------------------------------------------- /
      SUBROUTINE W3EXNC
!/
!/                  +-----------------------------------+
!/                  | WAVEWATCH III           NOAA/NCEP |
!/                  |           H. L. Tolman            |
!/                  |            J.H. Alves             |
!/                  |            F. Ardhuin             |
!/                  |             A. Chawla             |
!/                  |                        FORTRAN 90 |
!/                  | Last update :         29-Apr-2008 |
!/                  +-----------------------------------+
!/
!/    08-Jun-1999 : Final FORTRAN 77                    ( version 1.18 )
!/    21-Jan-2000 : Upgrade to FORTRAN 90               ( version 2.00 )
!/                  Massive changes to logistics
!/    09-Jan-2001 : U* bug fix in tabular output        ( version 2.05 )
!/    25-Jan-2001 : Flat grid version                   ( version 2.06 )
!/    02-Feb-2001 : Xnl version 3.0                     ( version 2.07 )
!/    11-Jun-2001 : Clean up                            ( version 2.11 )
!/    11-Oct-2001 : Clean up, X*, Y* in tables          ( version 2.14 )
!/    24-Dec-2004 : Multiple grid version.              ( version 3.06 )
!/    17-Apr-2006 : Filter for directional spread.      ( version 3.09 )
!/    23-Jun-2006 : Linear input added.                 ( version 3.09 )
!/    03-Jul-2006 : Separate flux modules.              ( version 3.09 )
!/    28-Oct-2006 : Add partitioning option.            ( version 3.10 )
!/    24-Mar-2007 : Add pars for entire spectrum.       ( version 3.11 )
!/    25-Apr-2007 : Battjes-Janssen Sdb added.          ( version 3.11 )
!/                  (J. H. Alves)
!/    09-Oct-2007 : WAM 4+ Sin and Sds added.           ( version 3.13 )
!/                  (F. Ardhuin)
!/    09-Oct-2007 : Experimental Sbs (BS1) added.       ( version 3.13 )
!/                  (F. Ardhuin)
!/    09-Apr-2008 : Adding an additional output for     ( version 3.12 )
!/                  WMO standard (A. Chawla)
!/    29-Apr-2008 : Adjust format partition output.     ( version 3.14 )
!/
!  1. Purpose :
!
!     Perform actual point output.
!
!  3. Parameters :
!
!  4. Subroutines used :
!
!      Name      Type  Module   Description
!     ----------------------------------------------------------------
!      W3SPRn    Subr. W3SRCnMD Mean wave parameters for use in
!                               source terms.
!      W3FLXn    Subr. W3FLXnMD Flux/stress computation.
!      W3SLNn    Subr. W3SLNnMD Linear input.
!      W3SINn    Subr. W3SRCnMD Input source term.
!      W3SDSn    Subr. W3SRCnMD Whitecapping source term
!      W3SNLn    Subr. W3SNLnMD Nonlinear interactions.
!      W3SBTn    Subr. W3SBTnMD Bottom friction source term.
!      W3SDBn    Subr. W3SBTnMD depth induced breaking source term.
!      W3STRn    Subr. W3STRnMD Triad interaction source term.
!      W3SBSn    Subr. W3SBSnMD Bottom scattering source term.
!      W3SXXn    Subr. W3SXXnMD Unclassified source term.
!      W3PART    Sunr. W3PARTMD Spectral partitioning routine.
!      STRACE    Subr. W3SERVMD Subroutine tracing.
!      STME21    Subr. W3TIMEMD Convert time to string.
!      PRT1DS    Subr. W3ARRYMD Print plot of 1-D spectrum.
!      PRT1DM    Subr.   Id.    Print plot of several 1-D spectra.
!      PRT2DS    Subr.   Id.    Print plot of 2-D spectrum.
!      WAVNU1    Subr. W3DISPMD Solve dispersion relation.
!     ----------------------------------------------------------------
!
!  5. Called by :
!
!     Main program in which it is contained,
!
!  6. Error messages :
!
!     None.
!
!  7. Remarks :
!
!     - Spectra are relative frequency energy spectra.
!     - Note that arrays CX and CY of the main program now contain
!       the absolute current speed and direction respectively.
!
!  8. Structure :
!
!     See source code.
!
!  9. Switches :
!
!       !/S      Enable subroutine tracing.
!       !/T      Enable test output.
!
!       !/FLXx   Flux/stress computation.
!       !/LNx    Linear input package
!       !/STx    Source term package
!       !/NLx    Nonlinear interaction package
!       !/BTx    Bottom friction package
!       !/DBx    depth-induced breaking package
!       !/TRx    Triad interaction package
!       !/BSx    Bottom scattering package
!       !/XXx    Arbitrary adittional source term package
!
!       !/STAB2  Stability correction for !/ST2
!
! 10. Source code :
!
!/ ------------------------------------------------------------------- /
!/FLX1      USE W3FLX1MD
!/FLX2      USE W3FLX2MD
!/FLX3      USE W3FLX3MD
!/LN1      USE W3SLN1MD
!/LNX      USE W3SLNXMD
!/ST1      USE W3SRC1MD
!/ST2      USE W3SRC2MD
!/ST3      USE W3SRC3MD
!/ST4      USE W3SRC4MD
!/STX      USE W3SRCXMD
!/NL1      USE W3SNL1MD
!/NL2      USE W3SNL2MD
!/NLX      USE W3SNLXMD
!/BT1      USE W3SBT1MD
!/BTX      USE W3SBTXMD
!/DB1      USE W3SDB1MD
!/DBX      USE W3SDBXMD
!/TRX      USE W3STRXMD
!/BS1      USE W3SBS1MD
!/BSX      USE W3SBSXMD
!/XXX      USE W3SXXXMD
      USE W3PARTMD, ONLY: W3PART
      USE W3DISPMD, ONLY: WAVNU1
!/
      USE W3ARRYMD, ONLY: PRT1DS, PRT2DS, PRT1DM
      USE W3DISPMD, ONLY: NAR1D, DFAC, N1MAX, ECG1, EWN1, DSIE
      USE NETCDF

      IMPLICIT NONE

!/
!/ ------------------------------------------------------------------- /
!/ Local parameters
!/
      INTEGER                 :: J, I1, I2, ISP, IKM, IKL, IKH, ITH,  &
                                 IK, IH, IM, IS, IYR, IMTH, IDY, ITT, &
                                 I, NPART, IX, IY
      INTEGER, SAVE           :: IPASS  = 0
!/S      INTEGER, SAVE           :: IENT   = 0
      REAL                    :: depth, SQRTH, CDIR, SIX, R1, R2,     &
                                 UDIR, UDIRR, UABS, XL, XH, XL2, XH2, &
                                 ET, EWN, ETR, ETX, ETY, EBND, EBX,   &
                                 EBY, HSIG, WLEN, TMEAN, THMEAN,      &
                                 THSPRD, EMAX, EL, EH, DENOM, FP, THP,&
                                 SPP, CD, USTAR, FACTOR, UNORM, ESTAR,&
                                 FPSTAR, FACF, FACE, FACS, HMAT, WNA, &
                                 XYZ, AGE1, AFR, AGE2, FACT, XSTAR,   &
                                 YSTAR, FHIGH, ZWND, Z0, USTD, EMEAN, &
                                 FMEAN, WNMEAN, UDIRCA, CHARN, M2KM
!/ST1      REAL                    :: AMAX, FH1, FH2
!/ST2      REAL                    :: AMAX, ALPHA(NK), FPI
!/ST3      REAL                    :: AMAX, FMEANS, FMEANWS, TAUWX, TAUWY, &
!/ST3                                 TAUWNX, TAUWNY
!/ST4      REAL                    :: AMAX, FMEANS, FMEANWS, TAUWX, TAUWY, &
!/ST4                                 TAUWNX, TAUWNY
!/BS1      REAL                    :: TAUSCX, TAUSCY
           REAL                    :: ICE
!/STAB2      REAL                    :: STAB0, STAB,  COR1, COR2, ASFAC,     &
!/STAB2                                 THARG1, THARG2
      REAL, SAVE              :: HSMIN  = 0.05
      REAL                    :: WN(NK), CG(NK)
      REAL                    :: E(NK,NTH), E1(NK), APM(NK),          &
                                 THBND(NK), SPBND(NK), A(NTH,NK),     &
                                 WN2(NTH,NK)
      REAL                    :: DIA(NTH,NK), SWN(NK,NTH), SNL(NK,NTH),&
                                 SDS(NK,NTH), SBT(NK,NTH), XLN(NTH,NK),&
                                 XIN(NTH,NK), XNL(NTH,NK), XTR(NTH,NK),&
                                 XDS(NTH,NK), XDB(NTH,NK), XBT(NTH,NK),&
                                 XBS(NTH,NK), XXX(NTH,NK), STT(NK,NTH)
      REAL                    :: SIN1(NK), SNL1(NK), SDS1(NK),         &
                                 SBT1(NK), STT1(NK), E1ALL(NK,5)
!/ST3      LOGICAL                 :: LLWS(NSPEC)
!/ST4      LOGICAL                 :: LLWS(NSPEC)
      CHARACTER               :: DTME21*23
      CHARACTER*4             :: VAR1(5)
!
      DATA VAR1   / 'Sin ' , 'Snl ', 'Sds ' , 'Sbt ' , 'Stot' /



      real(kind=8)         :: ncDaysOffset,timenc,Jday0
      integer(kind=4)      :: iyc,imc,idc,ihc,iminc,isc
    



!/
!/ ------------------------------------------------------------------- /
!/
! 1. Initialisations
!
!/S      CALL STRACE (IENT, 'W3EXNC')
!
      IF ( FLAGLL ) THEN
          M2KM   = 1.
        ELSE
          M2KM   = 1.E-3
        END IF
!
      XL     = 1./XFR - 1.
      XH     =  XFR - 1.
      XL2    = XL**2
      XH2    = XH**2
      IPASS  = IPASS + 1
!
      IF ( ITYPE .EQ. 3 ) THEN
          XLN = 0.
          XIN = 0.
          XNL = 0.
          XTR = 0.
          XDS = 0.
          XDB = 0.
          XBT = 0.
          XBS = 0.
          XXX = 0.
        END IF
!
!/T      WRITE (NDST,9000) (FLREQ(J),J=1,NOPTS)
!/T      WRITE (NDST,9001) ITYPE, OTYPE, NREQ, SCALE1, SCALE2, FLSRCE
!
!     Output of time
!
      IF (  ( ITYPE.EQ.1 .AND. OTYPE.EQ.3 ) .OR.                      &
            ( ITYPE.EQ.3 .AND. OTYPE.EQ.4 ) ) THEN
          IF ( FLFORM ) THEN
              WRITE (NDSTAB) TIME
            ELSE
              WRITE (NDSTAB,900) TIME
            END IF
        END IF
!
      IF (ITYPE.EQ.2) THEN
          IF ( NREQ.EQ.1 .AND. IPASS.EQ.1 ) THEN
              IF ( OTYPE.EQ.1 ) THEN
                  WRITE (NDSTAB,1901)
                ELSE IF ( OTYPE.EQ.2 ) THEN
                  WRITE (NDSTAB,1902)
                ELSE IF ( OTYPE.EQ.3 ) THEN
                  WRITE (NDSTAB,1903)
                ELSE IF ( OTYPE.EQ.4 ) THEN
                  WRITE (NDSTAB,1904)
                ELSE IF ( OTYPE.EQ.5 ) THEN
                  WRITE (NDSTAB,1905)
                ELSE IF ( OTYPE.EQ.6 ) THEN
                  WRITE (NDSTAB,1906)
                END IF
            END IF
          IF ( NREQ.NE.1 ) THEN
              CALL STME21 ( TIME , DTME21 )
              IF ( IPASS .NE. 1 ) WRITE (NDSTAB,1910)
              IF ( OTYPE.EQ.1 ) THEN
                  IF ( FLAGLL ) THEN
                      WRITE (NDSTAB,1911) DTME21
                    ELSE
                      WRITE (NDSTAB,1711) DTME21
                    END IF
                ELSE IF ( OTYPE.EQ.2 ) THEN
                  IF ( FLAGLL ) THEN
                      WRITE (NDSTAB,1912) DTME21
                    ELSE
                      WRITE (NDSTAB,1712) DTME21
                    END IF
                ELSE IF ( OTYPE.EQ.3 ) THEN
                  WRITE (NDSTAB,1913) DTME21
                ELSE IF ( OTYPE.EQ.4 ) THEN
                  WRITE (NDSTAB,1914) DTME21
                ELSE IF ( OTYPE.EQ.5 ) THEN
                  IF ( FLAGLL ) THEN
                      WRITE (NDSTAB,1915) DTME21
                    ELSE
                      WRITE (NDSTAB,1715) DTME21
                    END IF
                ELSE IF ( OTYPE.EQ.6 ) THEN
                  IF ( FLAGLL ) THEN
                      WRITE (NDSTAB,1916) DTME21
                    ELSE
                      WRITE (NDSTAB,1716) DTME21
                    END IF
                END IF
            END IF
        END IF
!
      IF (ITYPE.EQ.3) THEN
            IF ( OTYPE .EQ. 4 ) THEN
              CALL STME21 ( TIME , DTME21 )
              WRITE (NDSO,905) DTME21
            END IF
        END IF
!
!--- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
!     Loop over output points.
!
      DO J=1, NOPTS
        IF ( FLREQ(J) ) THEN
!
!/T            WRITE (NDST,9002) PTNME(J)
!
! 2. Calculate grid parameters using and inlined version of WAVNU1.
!
            depth  = MAX ( DMIN, DPO(J) )
            SQRTH  = SQRT ( depth )
            UDIR   = MOD ( 270. - WDO(J)*RADE , 360. )
            UDIRCA = WDO(J)*RADE
            UDIRR  = WDO(J)
            UABS   = MAX ( 0.001 , WAO(J) )
            CDIR   = MOD ( 270. - CDO(J)*RADE , 360. )
!
!/STAB2            STAB0  = ZWIND * GRAV / 273.
!/STAB2            STAB   = STAB0 * ASO(J) / MAX(5.,WAO(J))**2
!/STAB2            STAB   = MAX ( -1. , MIN ( 1. , STAB ) )
!/STAB2            THARG1 = MAX ( 0. , FFNG*(STAB-OFSTAB))
!/STAB2            THARG2 = MAX ( 0. , FFPS*(STAB-OFSTAB))
!/STAB2            COR1   = CCNG * TANH(THARG1)
!/STAB2            COR2   = CCPS * TANH(THARG2)
!/STAB2            ASFAC  = SQRT ( (1.+COR1+COR2)/SHSTAB )
!
!/T            WRITE (NDST,9010) depth
            DO IK=1, NK
              SIX    = SIG(IK) * SQRTH
              I1     = INT(SIX/DSIE)
              IF (I1.LE.N1MAX) THEN
                  I2 = I1 + 1
                  R1 = SIX/DSIE - REAL(I1)
                  R2 = 1. - R1
                  WN(IK) = ( R2*EWN1(I1) + R1*EWN1(I2) ) / depth
                  CG(IK) = ( R2*ECG1(I1) + R1*ECG1(I2) ) * SQRTH
                ELSE
                  WN(IK) = SIG(IK)*SIG(IK)/GRAV
                  CG(IK) = 0.5 * GRAV / SIG(IK)
                END IF
!/T              WRITE (NDST,9011) IK, TPI/SIG(IK), WN(IK), CG(IK)
!
              END DO
!
! 3.  Prepare spectra etc.
! 3.a Mean wave parameters.
!
            ET     = 0.
            EWN    = 0.
            ETR    = 0.
            ETX    = 0.
            ETY    = 0.
            DO IK=1, NK
              EBND   = 0.
              EBX    = 0.
              EBY    = 0.
              DO ITH=1, NTH
                ISP    = ITH + (IK-1)*NTH
                E(IK,ITH) = SPCO(ISP,J)
                EBND   = EBND + SPCO(ISP,J)
                EBX    = EBX  + SPCO(ISP,J)*ECOS(ITH)
                EBY    = EBY  + SPCO(ISP,J)*ESIN(ITH)
                END DO
              E1(IK) = EBND * DTH
              APM(IK)= E1(IK) / ( TPI * GRAV**2 / SIG(IK)**5  )
              IF ( E1(IK) .GT. 1.E-5) THEN
                  THBND(IK) = MOD(630.- RADE*ATAN2(EBY,EBX),360.)
                  SPBND(IK) = RADE * SQRT ( MAX ( 0. , 2.*( 1. -      &
                    SQRT( MAX(0.,(EBX**2+EBY**2)/EBND**2) ) ) ) )
                ELSE
                  THBND(IK) = -999.9
                  SPBND(IK) = -999.9
                END IF
              EBND   = E1(IK) * DSII(IK) * TPIINV
              ET     = ET  + EBND
              EWN    = EWN + EBND / WN(IK)
              ETR    = ETR + EBND / SIG(IK)
              ETX    = ETX + EBX * DSII(IK)
              ETY    = ETY + EBY * DSII(IK)
              END DO
!
! tail factors for radian action etc ...!
!
            EBND   = E1(NK) * TPIINV / ( SIG(NK) * DTH )
            ET     = ET  + FTE *EBND
            EWN    = EWN + FTWL*EBND
            ETR    = ETR + FTTR*EBND
            ETX    = DTH*ETX*TPIINV + FTE*EBX*TPIINV/SIG(NK)
            ETY    = DTH*ETY*TPIINV + FTE*EBY*TPIINV/SIG(NK)
!
            HSIG   = 4. * SQRT ( ET )
            IF ( HSIG .GT. HSMIN ) THEN
                WLEN   = EWN / ET * TPI
                TMEAN  = ETR / ET * TPI
                THMEAN = MOD ( 630. - RADE*ATAN2(ETY,ETX) , 360. )
                THSPRD = RADE * SQRT ( MAX ( 0. , 2.*( 1. - SQRT(     &
                           MAX(0.,(ETX**2+ETY**2)/ET**2) ) ) ) )
                IF ( THSPRD .LT. 0.01*RADE*DTH ) THSPRD = 0.
              ELSE
                WLEN   = 0.
                TMEAN  = 0.
                THMEAN = 0.
                THSPRD = 0.
                DO IK=1, NK
                  E1(IK) = 0.
                  DO ITH=1, NTH
                    E(IK,ITH) = 0.
                  END DO
                END DO
              END IF
!
! 3.b peak frequency
!
            EMAX   = E1(NK)
            IKM    = NK
!
            DO IK=NK-1, 1, -1
              IF ( E1(IK) .GT. EMAX ) THEN
                  EMAX   = E1(IK)
                  IKM    = IK
                END IF
              END DO
!
            IKL    = MAX (  1 , IKM-1 )
            IKH    = MIN ( NK , IKM+1 )
            EL     = E1(IKL) - E1(IKM)
            EH     = E1(IKH) - E1(IKM)
            DENOM  = XL*EH - XH*EL
!
            IF ( HSIG .GE. HSMIN ) THEN
                FP     = SIG(IKM) * ( 1. + 0.5 * ( XL2*EH - XH2*EL )  &
                            / SIGN ( MAX(ABS(DENOM),1.E-15) , DENOM ) )
                THP    = THBND(IKM)
                SPP    = SPBND(IKM)
                IF ( SPP .LT. 0.01*RADE*DTH ) SPP = 0.
              ELSE
                FP     = 0.
                THP    = 0.
                SPP    = 0.
              END IF
!
! 3.c spectral partitioning
!
            IF ( ( ITYPE.EQ.1 .AND. OTYPE.EQ.4 ) .OR. &
                 ( ITYPE.EQ.4 .AND. OTYPE.EQ.4 ) ) THEN
               CALL W3PART( E, UABS, UDIRCA, depth, WN, NPART, XPART, DIMXP )
            END IF
!
! 3.d nondimensional parameters
!
            IF ( ( ITYPE.EQ.2 .AND. (OTYPE.EQ.3.OR.OTYPE.EQ.4) ) .OR. &
                 ( ITYPE.EQ.5 .AND. (OTYPE.EQ.3.OR.OTYPE.EQ.4) ) .OR. &
                 ( ITYPE.EQ.4 .AND. (OTYPE.EQ.2) )               .OR. &
                 ( ITYPE.EQ.1 .AND. (OTYPE.EQ.2) ) ) THEN
!
                DO IK=1, NK
                  FACTOR = TPIINV * CG(IK) / SIG(IK)
                  DO ITH=1, NTH
                    ISP    = ITH + (IK-1)*NTH
                    A(ITH,IK)   = FACTOR * SPCO(ISP,J)
                    WN2(ITH,IK) = WN(IK)
                    END DO
                  END DO
!
!/STAB2                UABS   = UABS / ASFAC
!
!/ST0                ZWND   = 10.
!/ST1                ZWND   = 10.
!/ST2                ZWND   = ZWIND
!/ST3                ZWND   = ZZWND
!/ST3                TAUWX  = 0.
!/ST3                TAUWY  = 0.
!/ST3                LLWS(:)  = .TRUE.
!/ST4                LLWS(:)  = .TRUE.
!/ST4                ZWND   = ZZWND
!/ST4                TAUWX  = 0.
!/ST4                TAUWY  = 0.
!
!/ST1                CALL W3SPR1 (A, CG, WN, EMEAN, FMEAN, WNMEAN, AMAX)
!/ST1                FP     = 0.85 * FMEAN
!/ST2                CALL W3SPR2 (A, CG, WN, depth, FP , UABS, USTAR, &
!/ST2                             EMEAN, FMEAN, WNMEAN, AMAX, ALPHA, FP )
!/ST3                CALL W3SPR3 (A, CG, WN, EMEAN, FMEAN, FMEANS,       &
!/ST3                             WNMEAN, AMAX, UABS, UDIRR, USTAR, USTD,&
!/ST3                             TAUWX, TAUWY, CD, Z0, CHARN, LLWS, FMEANWS )
!/ST4                CALL W3SPR4 (A, CG, WN, EMEAN, FMEAN,        &
!/ST4                             WNMEAN, AMAX, UABS, UDIRR, USTAR, USTD,&
!/ST4                             TAUWX, TAUWY, CD, Z0, CHARN, LLWS, FMEANWS )

!/FLX1                CALL W3FLX1 ( ZWND, UABS, UDIRR,                   &
!/FLX1                              USTAR, USTD, Z0, CD )
!/FLX2                CALL W3FLX2 ( ZWND, depth, FP, UABS, UDIRR,        &
!/FLX2                                          USTAR, USTD, Z0, CD )
!/FLX3                CALL W3FLX3 ( ZWND, depth, FP, UABS, UDIRR,        &
!/FLX3                                          USTAR, USTD, Z0, CD )
!
                DO ITT=1, 3
!/ST2                  CALL W3SIN2 (A, CG, WN2, UABS, UDIRR, CD, Z0,    &
!/ST2                                                 FPI, XIN, DIA )
!/ST2                  CALL W3SPR2 (A, CG, WN, depth, FPI, UABS, USTAR, &
!/ST2                               EMEAN, FMEAN, WNMEAN, AMAX, ALPHA, FP )
!/ST3                  IX=1
!/ST3                  IY=1
!/ST3                  CALL W3SIN3 ( A, CG, WN2, UABS, USTAR, DAIR/DWAT,&
!/ST3                               ASO(J), UDIRR, Z0, CD, TAUWX, TAUWY,&
!/ST3                               TAUWNX, TAUWNY, ICE, XIN, DIA, LLWS, IX, IY )
!/ST3                  CALL W3SPR3 (A, CG, WN, EMEAN, FMEAN, FMEANS,       &
!/ST3                             WNMEAN, AMAX, UABS, UDIRR, USTAR, USTD,&
!/ST3                             TAUWX, TAUWY, CD, Z0, CHARN, LLWS, FMEANWS )
!/ST4                  IX=1
!/ST4                  IY=1
!/ST4                  CALL W3SIN4 ( A, CG, WN2, UABS, USTAR, DAIR/DWAT,&
!/ST4                               ASO(J), UDIRR, Z0, CD, TAUWX, TAUWY,&
!/ST4                               TAUWNX, TAUWNY, ICE, XIN, DIA, LLWS, IX, IY )
!/ST4                  CALL W3SPR4 (A, CG, WN, EMEAN, FMEAN,      &
!/ST4                             WNMEAN, AMAX, UABS, UDIRR, USTAR, USTD,&
!/ST4                             TAUWX, TAUWY, CD, Z0, CHARN, LLWS, FMEANWS )
!/FLX2                  CALL W3FLX2 ( ZWND, depth, FP, UABS, UDIRR,      &
!/FLX2                                            USTAR, USTD, Z0, CD )
!/FLX3                  CALL W3FLX3 ( ZWND, depth, FP, UABS, UDIRR,      &
!/FLX3                                            USTAR, USTD, Z0, CD )
                  END DO
!
! Add alternative flux calculations here as part of !/ST2 option ....
! Also add before actual source term calculation !!!
!
!/STAB2                UABS   = UABS * ASFAC
!
              IF ( WAO(J) .LT. 0.01 ) THEN
                  UNORM  = 0.
                  ESTAR  = 0.
                  FPSTAR = 0.
                ELSE
                  IF ( OTYPE.EQ.3 ) THEN
                      UNORM  = USTAR
                    ELSE
                      UNORM  = WAO(J)
                    END IF
                  ESTAR  = ET * GRAV**2 / UNORM**4
                  FPSTAR = FP * TPIINV * UNORM / GRAV
                  XSTAR  = PTLOC(1,J) * GRAV / UNORM**2
                  YSTAR  = PTLOC(2,J) * GRAV / UNORM**2
                  IF ( FLAGLL ) THEN
                      XSTAR  = XSTAR * DERA * RADIUS &
                             * COS(PTLOC(2,J)*DERA)
                      YSTAR  = YSTAR * DERA * RADIUS
                    END IF
                END IF
!
              END IF
!
! 3.e source terms
!
            IF ( ITYPE.EQ.3 ) THEN
!
                DO IK=1, NK
                  FACTOR = TPIINV * CG(IK) / SIG(IK)
                  DO ITH=1, NTH
                    A(ITH,IK)   = FACTOR * SPCO(ITH+(IK-1)*NTH,J)
                    WN2(ITH,IK) = WN(IK)
                    END DO
                  END DO
!
!/STAB2                UABS   = UABS / ASFAC
!
!/ST0                ZWND   = 10.
!/ST1                ZWND   = 10.
!/ST2                ZWND   = ZWIND
!/ST3                ZWND   = ZZWND
!/ST3                USTAR  = 0.
!/ST3                USTD   = 0.
!/ST3                TAUWX  = 0.
!/ST3                TAUWY  = 0.
!/ST4                ZWND   = ZZWND
!/ST4                USTAR  = 0.
!/ST4                USTD   = 0.
!/ST4                TAUWX  = 0.
!/ST4                TAUWY  = 0.
!
!/ST0                FHIGH  = SIG(NK)
!/ST1                CALL W3SPR1 (A, CG, WN, EMEAN, FMEAN, WNMEAN, AMAX)
!/ST1                FP     = 0.85 * FMEAN
!/ST1                FH1    = FXFM * FMEAN
!/ST1                FH2    = FXPM / USTAR
!/ST1                FHIGH  = MAX ( FH1 , FH2 )
!/ST2                CALL W3SPR2 (A, CG, WN, depth, FP , UABS, USTAR, &
!/ST2                             EMEAN, FMEAN, WNMEAN, AMAX, ALPHA, FP )
!/ST3                CALL W3SPR3 (A, CG, WN, EMEAN, FMEAN, FMEANS,       &
!/ST3                             WNMEAN, AMAX, UABS, UDIRR, USTAR, USTD,&
!/ST3                             TAUWX, TAUWY, CD, Z0, CHARN, LLWS, FMEANWS )
!/ST4                CALL W3SPR4 (A, CG, WN, EMEAN, FMEAN,        &
!/ST4                             WNMEAN, AMAX, UABS, UDIRR, USTAR, USTD,&
!/ST4                             TAUWX, TAUWY, CD, Z0, CHARN, LLWS, FMEANWS )
!
!/FLX1                CALL W3FLX1 ( ZWND, UABS, UDIRR,                   &
!/FLX1                              USTAR, USTD, Z0, CD )
!/FLX2                CALL W3FLX2 ( ZWND, depth, FP, UABS, UDIRR,        &
!/FLX2                                          USTAR, USTD, Z0, CD )
!/FLX3                CALL W3FLX3 ( ZWND, depth, FP, UABS, UDIRR,        &
!/FLX3                                          USTAR, USTD, Z0, CD )
!
                DO ITT=1, 3
!/ST2                  CALL W3SIN2 (A, CG, WN2, UABS, UDIRR, CD, Z0,    &
!/ST2                                                 FPI, XIN, DIA )
!/ST2                  CALL W3SPR2 (A, CG, WN, depth, FPI, UABS, USTAR, &
!/ST2                               EMEAN, FMEAN, WNMEAN, AMAX, ALPHA, FP )
!/ST3                CALL W3SPR3 (A, CG, WN, EMEAN, FMEAN, FMEANS,       &
!/ST3                             WNMEAN, AMAX, UABS, UDIRR, USTAR, USTD,&
!/ST3                             TAUWX, TAUWY, CD, Z0, CHARN, LLWS, FMEANWS )
!/ST3                  CALL W3SIN3 ( A, CG, WN2, UABS, USTAR, DAIR/DWAT,&
!/ST3                                ASO(J), UDIRR, Z0, CD,TAUWX, TAUWY, &
!/ST3                                TAUWNX, TAUWNY, ICE, XIN, DIA, LLWS, IX, IY )
!/ST4                CALL W3SPR4 (A, CG, WN, EMEAN, FMEAN,       &
!/ST4                             WNMEAN, AMAX, UABS, UDIRR, USTAR, USTD,&
!/ST4                             TAUWX, TAUWY, CD, Z0, CHARN, LLWS, FMEANWS )
!/ST4                  CALL W3SIN4 ( A, CG, WN2, UABS, USTAR, DAIR/DWAT,&
!/ST4                                ASO(J), UDIRR, Z0, CD,TAUWX, TAUWY, &
!/ST4                                TAUWNX, TAUWNY, ICE, XIN, DIA, LLWS, IX, IY )
!/FLX2                  CALL W3FLX2 ( ZWND, depth, FP, UABS, UDIRR,      &
!/FLX2                                            USTAR, USTD, Z0, CD )
!/FLX3                  CALL W3FLX3 ( ZWND, depth, FP, UABS, UDIRR,      &
!/FLX3                                            USTAR, USTD, Z0, CD )
                  END DO
!
!/ST2                FHIGH  = XFC * FPI
!
                IF ( FLSRCE(2) ) THEN
!/LN1                    CALL W3SLN1 (WN, FHIGH, USTAR, UDIRR, XLN )
!/LNX                    CALL W3SLNX
!
!/ST1                    CALL W3SIN1 (A, WN2, USTAR, UDIRR,  XIN, DIA )
!/ST2                    CALL W3SIN2 (A, CG, WN2, UABS, UDIRR, CD, Z0,&
!/ST2                                                   FPI, XIN, DIA )
!/ST3                    CALL W3SIN3 ( A, CG, WN2, UABS, USTAR,       &
!/ST3                                  DAIR/DWAT, ASO(J), UDIRR,      &
!/ST3                            Z0, CD, TAUWX, TAUWY,TAUWNX, TAUWNY, &
!/ST3                            ICE, XIN, DIA, LLWS, IX, IY )
!/ST4                    CALL W3SIN4 ( A, CG, WN2, UABS, USTAR,       &
!/ST4                                  DAIR/DWAT, ASO(J), UDIRR,      &
!/ST4                            Z0, CD, TAUWX, TAUWY,TAUWNX, TAUWNY, &
!/ST4                            ICE, XIN, DIA, LLWS, IX, IY )
!/STX                    CALL W3SINX
                  END IF
                IF ( FLSRCE(3) ) THEN
!/NL1                    CALL W3SNL1 ( A, CG, WNMEAN*depth,  XNL, DIA )
!/NL2                    CALL W3SNL2 ( A, CG, depth,         XNL, DIA )
!/NLX                    CALL W3SNLX
!
!/TRX                    CALL W3STRX
                  END IF
                IF ( FLSRCE(4) ) THEN
!/ST1                    CALL W3SDS1 ( A, WN2, EMEAN, FMEAN, WNMEAN,  &
!/ST1                                                        XDS, DIA )
!/ST2                    CALL W3SDS2 ( A, CG, WN, FPI, USTAR,         &
!/ST2                                  ALPHA,                XDS, DIA )
!/ST3                    CALL W3SDS3 ( A, WN, CG, EMEAN, FMEANS, WNMEAN,  &
!/ST3                                  USTAR, USTD, depth, XDS, DIA, IX, IY )
!/ST4                    CALL W3SDS4 ( A, WN, CG,  &
!/ST4                                  USTAR, USTD, depth, XDS, DIA, IX, IY )
!/STX                    CALL W3SDSX
!
!/DB1                    CALL W3SDB1 ( A, WN2, depth, EMEAN, FMEAN,   &
!/DB1                                  WNMEAN,               XDB, DIA )
!/DBX                    CALL W3SDBX
                  END IF
                IF ( FLSRCE(5) ) THEN
!/BT1                    CALL W3SBT1 ( A, CG, WN, depth,     XBT, DIA )
!/BTX                    CALL W3SBTX
!
!/BS1                    CALL W3SBS1 ( A, CG, WN, depth,              &
!/BS1                           CAO(J)*COS(CDO(J)), CAO(J)*SIN(CDO(J)), &
!/BS1                                  TAUSCX, TAUSCY,   XBS, DIA )
!/BSX                    CALL W3SBSX
!
                  END IF
!
!/XXX                CALL W3SXXX
!
!/STAB2                UABS   = UABS * ASFAC
!
                IF ( ISCALE.EQ.0 .OR. ISCALE.EQ.3 ) THEN
                    FACF   = TPIINV
                    FACE   = 1.
                    FACS   = 1.
                  ELSE IF ( ISCALE.EQ.1 .OR. ISCALE.EQ.4 ) THEN
                    FACF   = TPIINV * UABS / GRAV
                    FACE   = GRAV**3 / UABS**5
                    FACS   = GRAV**2 / UABS**4
                  ELSE IF ( ISCALE.EQ.2 .OR. ISCALE.EQ.5 ) THEN
                    FACF   = TPIINV * USTAR / GRAV
                    FACE   = GRAV**3 / USTAR**5
                    FACS   = GRAV**2 / USTAR**4
                  END IF
!
                DO IK=1, NK
                  FACTOR = TPI / CG(IK) * SIG(IK)
                  E1  (IK) = 0.
                  SIN1(IK) = 0.
                  SNL1(IK) = 0.
                  SDS1(IK) = 0.
                  SBT1(IK) = 0.
                  STT1(IK) = 0.
                  DO ITH=1, NTH
                    ISP         = ITH + (IK-1)*NTH
                    E  (IK,ITH) = SPCO(ISP,J)
                    SWN(IK,ITH) = ( XLN(ITH,IK) + XIN(ITH,IK) ) * FACTOR
                    SNL(IK,ITH) = ( XNL(ITH,IK) + XTR(ITH,IK) ) * FACTOR
                    SDS(IK,ITH) = ( XDS(ITH,IK) + XDB(ITH,IK) ) * FACTOR
                    SBT(IK,ITH) = ( XBT(ITH,IK) * XBS(ITH,IK) ) * FACTOR
                    STT(IK,ITH) = SWN(IK,ITH) + SNL(IK,ITH) +         &
                                  SNL(IK,ITH) + SBT(IK,ITH) +         &
                                  XXX(ITH,IK) * FACTOR
                    E1  (IK) = E1  (IK) + E(IK,ITH)
                    SIN1(IK) = SIN1(IK) + SWN(IK,ITH)
                    SNL1(IK) = SNL1(IK) + SNL(IK,ITH)
                    SDS1(IK) = SDS1(IK) + SDS(IK,ITH)
                    SBT1(IK) = SBT1(IK) + SBT(IK,ITH)
                    END DO
                  E1  (IK) = E1(IK)   * DTH * FACE
                  SIN1(IK) = SIN1(IK) * DTH * FACS
                  SNL1(IK) = SNL1(IK) * DTH * FACS
                  SDS1(IK) = SDS1(IK) * DTH * FACS
                  SBT1(IK) = SBT1(IK) * DTH * FACS
                  END DO
!
                STT1       = SIN1 + SNL1 + SDS1 + SBT1
                E1ALL(:,1) = SIN1
                E1ALL(:,2) = SNL1
                E1ALL(:,3) = SDS1
                E1ALL(:,4) = SBT1
                E1ALL(:,5) = STT1
!
              END IF
!
! 4.a Perform output type 1 ( print plots / tables / file )
!
            IF ( ITYPE .EQ. 1 ) THEN
!
                IF ( OTYPE .EQ. 1 ) THEN
!
                    IF ( SCALE1 .GE. 0. )                             &
                        CALL PRT1DS (NDSO, NK, E1, SIG(1:NK), 'RAD/S',&
                             17, SCALE1, 'E(f)', 'm^2s', PTNME(J) )
                    IF ( SCALE2 .GE. 0. )                             &
                        CALL PRT2DS (NDSO, NK, NK, NTH, E, SIG(1:NK), &
                             'RAD/S', 1., SCALE2, 0.0001, 'E(f,th)',  &
                             'm^2s', PTNME(J) )
                    WRITE (NDSO,910) DPO(J), UABS
                    IF ( WAO(J) .GT. 0. ) WRITE (NDSO,911) UDIR
                    WRITE (NDSO,912) ASO(J), CAO(J)
                    IF ( CAO(J) .GT. 0. ) WRITE (NDSO,913) CDIR
                    WRITE (NDSO,914) HSIG, WLEN, TMEAN, THMEAN, THSPRD
!
                  ELSE IF ( OTYPE .EQ. 2 ) THEN
!
                    CALL STME21 ( TIME , DTME21 )
                    IF ( FLAGLL ) THEN
                        WRITE (NDSTAB,920) DTME21, PTNME(J),          &
                            M2KM*PTLOC(1,J), M2KM*PTLOC(2,J),         &
                            DPO(J), USTAR, WAO(J), UDIR
                      ELSE
                        WRITE (NDSTAB,720) DTME21, PTNME(J),          &
                            M2KM*PTLOC(1,J), M2KM*PTLOC(2,J),         &
                            DPO(J), USTAR, WAO(J), UDIR
                      END IF
                    IF ( FP .EQ. 0. ) FP = SIG(NK)
                    DO IK=1, NK
                      WRITE (NDSTAB,921) TPIINV*SIG(IK), SIG(IK)/FP,  &
                          E1(IK), THBND(IK), SPBND(IK), APM(IK)
                      END DO
                    IF ( FP .EQ. SIG(NK) ) FP = 0.
                    WRITE (NDSTAB,922)
!
                  ELSE IF ( OTYPE .EQ. 3 ) THEN
!
                    IF ( FLFORM ) THEN
                        WRITE (NDSTAB) PTNME(J), PTLOC(2,J),          &
                                       PTLOC(1,J), DPO(J), WAO(J),    &
                                       UDIR, CAO(J), CDIR
                        WRITE (NDSTAB) ((E(IK,ITH),IK=1,NK),ITH=1,NTH)
                      ELSE
                        WRITE (NDSTAB,901) PTNME(J), M2KM*PTLOC(2,J), &
                                           M2KM*PTLOC(1,J), DPO(J),   &
                                           WAO(J), UDIR, CAO(J), CDIR
                        WRITE (NDSTAB,902)                            &
                              ((E(IK,ITH),IK=1,NK),ITH=1,NTH)
                      END IF
!
                  ELSE IF ( OTYPE .EQ. 4 ) THEN
!
                    IF ( FLAGLL ) THEN
                        IF ( PTLOC(1,J) .LT. 0. )                     &
                            PTLOC(1,J) = PTLOC(1,J) + 360.
                        WRITE (NDSTAB,940) TIME, M2KM*PTLOC(2,J),     &
                            M2KM*PTLOC(1,J), PTNME(J), NPART, depth,  &
                            WAO(J), UDIR, CAO(J), CDIR
                      ELSE
                        WRITE (NDSTAB,943) TIME, M2KM*PTLOC(1,J),     &
                            M2KM*PTLOC(2,J), PTNME(J), NPART, depth,  &
                            WAO(J), UDIR, CAO(J), CDIR
                      END IF
!                   WRITE (NDSTAB,941)
                    DO I=0, NPART
                      WRITE (NDSTAB,942) I, XPART(:,I)
                      END DO
!
                  END IF
!
! 4.b Perform output type 2 ( tables )
!
              ELSE IF ( ITYPE .EQ. 2 ) THEN
!
                IF ( NREQ .EQ. 1 ) THEN
!
                    IYR    = TIME(1) / 10000
                    IMTH   = MOD ( TIME(1) , 10000 ) / 100
                    IDY    = MOD ( TIME(1) , 100 )
                    IH     = TIME(2) / 10000
                    IM     = MOD ( TIME(2) , 10000 ) / 100
                    IS     = MOD ( TIME(2) , 100 )

                    IF ( OTYPE .EQ. 1 ) THEN
                        WRITE (NDSTAB,1921) TIME(1), IH, IM, IS,      &
                               DPO(J), CAO(J), CDIR, WAO(J), UDIR
                      ELSE IF ( OTYPE .EQ. 2 ) THEN
                        WRITE (NDSTAB,1922) TIME(1), IH, IM, IS,      &
                               HSIG, WLEN, TMEAN, THMEAN, THSPRD,     &
                               FP*TPIINV, THP, SPP
                      ELSE IF ( OTYPE.EQ.3 ) THEN
                        WRITE (NDSTAB,1923) TIME(1), IH, IM, IS,      &
                           UNORM, ESTAR, FPSTAR, CD*1000., APM(NK)*100.
                      ELSE IF ( OTYPE.EQ.4 ) THEN
                        WRITE (NDSTAB,1924) TIME(1), IH, IM, IS,      &
                           UNORM, ESTAR, FPSTAR, CD*1000., APM(NK)*100.
                      ELSE IF ( OTYPE.EQ.5 ) THEN
                        HMAT   = MIN ( 100. , 3.33*GRAV*HSIG/UABS**2 )
                        IF ( HSIG .GE. HSMIN ) THEN
                            CALL WAVNU1 ( FP, DPO(J), WNA, XYZ )
                            AGE1   = MIN ( 100. , FP / WNA / UABS )
                            AFR    = TPI / TMEAN
                            CALL WAVNU1 ( AFR, DPO(J), WNA, XYZ )
                            AGE2   = MIN ( 100. , AFR / WNA / UABS )
                          ELSE
                            AGE1   = -9.99
                            AGE2   = -9.99
                          END IF
                        WRITE (NDSTAB,1925) TIME(1), IH, IM, IS,      &
                               WAO(J), UDIR, HSIG, HMAT, AGE1, AGE2,  &
                               ASO(J)
                      ELSE IF ( OTYPE.EQ.6 ) THEN
                        IF ( HSIG .GE. HSMIN ) THEN
                           WRITE (NDSTAB,1926) IYR, IMTH, IDY, IH,    &
                                 WAO(J), NINT(UDIR), HSIG, TPI / FP
                        ELSE
                           WRITE (NDSTAB,1926) IYR, IMTH, IDY, IH,    &
                                 WAO(J), NINT(UDIR), HSIG, 0.0
                        END IF
                      END IF
!
                  ELSE
!
                    IF ( OTYPE .EQ. 1 ) THEN
                        IF ( FLAGLL ) THEN
                            WRITE (NDSTAB,1931) M2KM*PTLOC(1,J),      &
                                   M2KM*PTLOC(2,J), DPO(J), CAO(J),   &
                                   CDIR, WAO(J), UDIR
                          ELSE
                            WRITE (NDSTAB,1731) M2KM*PTLOC(1,J),      &
                                   M2KM*PTLOC(2,J), DPO(J), CAO(J),   &
                                   CDIR, WAO(J), UDIR
                          END IF
                      ELSE IF ( OTYPE .EQ. 2 ) THEN
                        IF ( FLAGLL ) THEN
                            WRITE (NDSTAB,1932) M2KM*PTLOC(1,J),      &
                                   M2KM*PTLOC(2,J), HSIG, WLEN,       &
                                   TMEAN, THMEAN, THSPRD, FP*TPIINV,  &
                                   THP, SPP
                          ELSE
                            WRITE (NDSTAB,1732) M2KM*PTLOC(1,J),      &
                                   M2KM*PTLOC(2,J), HSIG, WLEN,       &
                                   TMEAN, THMEAN, THSPRD, FP*TPIINV,  &
                                   THP, SPP
                          END IF
                      ELSE IF ( OTYPE .EQ. 3 ) THEN
                        WRITE (NDSTAB,1933) 1.E-4*XSTAR,              &
                               1.E-4*YSTAR, UNORM, ESTAR, FPSTAR,     &
                               CD*1000., APM(NK)*100.
                      ELSE IF ( OTYPE .EQ. 4 ) THEN
                        WRITE (NDSTAB,1934) XSTAR, YSTAR, UNORM,      &
                               ESTAR, FPSTAR, CD*1000., APM(NK)*100.
                      ELSE IF ( OTYPE .EQ. 5 ) THEN
                        HMAT   = MIN ( 100. , 3.33*GRAV*HSIG/UABS**2 )
                        CALL WAVNU1 ( FP, DPO(J), WNA, XYZ )
                        AGE1   = MIN ( 100. , FP / WNA / UABS )
                        AFR    = TPI / TMEAN
                        CALL WAVNU1 ( AFR, DPO(J), WNA, XYZ )
                        AGE2   = MIN ( 100. , AFR / WNA / UABS )
                        IF ( FLAGLL ) THEN
                            WRITE (NDSTAB,1935) M2KM*PTLOC(1,J),      &
                                   M2KM*PTLOC(2,J), WAO(J), UDIR,     &
                                   HSIG, HMAT, AGE1, AGE2, ASO(J)
                          ELSE
                            WRITE (NDSTAB,1735) M2KM*PTLOC(1,J),      &
                                   M2KM*PTLOC(2,J), WAO(J), UDIR,     &
                                   HSIG, HMAT, AGE1, AGE2, ASO(J)
                          END IF
                      ELSE IF ( OTYPE .EQ. 6 ) THEN
                        IF ( HSIG .GE. HSMIN ) THEN
                           IF ( FLAGLL ) THEN
                               WRITE (NDSTAB,1936) M2KM*PTLOC(1,J),       &
                                      M2KM*PTLOC(2,J), WAO(J), NINT(UDIR),&
                                      HSIG, TPI / FP
                             ELSE
                               WRITE (NDSTAB,1736) M2KM*PTLOC(1,J),       &
                                      M2KM*PTLOC(2,J), WAO(J), NINT(UDIR),&
                                      HSIG, TPI / FP
                             END IF
                        ELSE
                           IF ( FLAGLL ) THEN
                               WRITE (NDSTAB,1936) M2KM*PTLOC(1,J),       &
                                      M2KM*PTLOC(2,J), WAO(J), NINT(UDIR),&
                                      HSIG, 0.0
                             ELSE
                               WRITE (NDSTAB,1736) M2KM*PTLOC(1,J),       &
                                      M2KM*PTLOC(2,J), WAO(J), NINT(UDIR),&
                                      HSIG, 0.0
                             END IF
                        END IF
                      END IF
!
                  END IF
!
! 4.c Perform output type 3 ( source terms )
!
              ELSE IF ( ITYPE .EQ. 3 ) THEN
!
                IF ( OTYPE .EQ. 1 ) THEN
!
                    IF ( SCALE1 .GE. 0. ) THEN
                        IF ( FLSRCE(1) )                              &
                            CALL PRT1DS (NDSO, NK, E1, SIG(1:NK),     &
                                 'RAD/S', 17,  0., 'E(f)', 'm^2s',    &
                                 PTNME(J) )
                        IF (FLSRCE(2) .OR. FLSRCE(3) .OR.             &
                            FLSRCE(4) .OR. FLSRCE(5) .OR.             &
                            FLSRCE(6) )                               &
                            CALL PRT1DM (NDSO, NK, 5, E1ALL, SIG(1:NK),&
                                 'RAD/S', 17, SCALE1, VAR1, 'M2',     &
                                 PTNME(J) )
                      END IF
                    IF ( SCALE2 .GE. 0. ) THEN
                        IF ( FLSRCE(1) )                              &
                            CALL PRT2DS (NDSO, NK, NK, NTH, E,        &
                                 SIG(1:NK), 'RAD/S', 1., 0., 0.0001,  &
                                 'E(f,th)', 'm^2s', PTNME(J) )
                        IF ( FLSRCE(2) )                              &
                            CALL PRT2DS (NDSO, NK, NK, NTH, SWN,      &
                                SIG(1:NK), 'RAD/S', 1., SCALE2, 0.0001,&
                                 'Sin(f,th)', 'm^2', PTNME(J) )
                        IF ( FLSRCE(3) )                              &
                            CALL PRT2DS (NDSO, NK, NK, NTH, SNL,      &
                                SIG(1:NK), 'RAD/S', 1., SCALE2, 0.0001,&
                                 'Snl(f,th)', 'm^2', PTNME(J) )
                        IF ( FLSRCE(4) )                              &
                            CALL PRT2DS (NDSO, NK, NK, NTH, SDS,      &
                                SIG(1:NK), 'RAD/S', 1., SCALE2, 0.0001,&
                                 'Sds(f,th)', 'm^2', PTNME(J) )
                        IF ( FLSRCE(5) )                              &
                            CALL PRT2DS (NDSO, NK, NK, NTH, SBT,      &
                                SIG(1:NK), 'RAD/S', 1., SCALE2, 0.0001,&
                                 'Sbt(f,th)', 'm^2', PTNME(J) )
                        IF ( FLSRCE(6) )                              &
                            CALL PRT2DS (NDSO, NK, NK, NTH, STT,      &
                                SIG(1:NK), 'RAD/S', 1., SCALE2, 0.0001,&
                                 'Stot(f,th)', 'm^2', PTNME(J) )
                      END IF
!
                  ELSE IF ( OTYPE .EQ. 2 ) THEN
!
                    CALL STME21 ( TIME , DTME21 )
                    IF ( FLAGLL ) THEN
                        WRITE (NDSTAB,2920) DTME21, PTNME(J),         &
                            M2KM*PTLOC(1,J), M2KM*PTLOC(2,J),         &
                            DPO(J), USTAR, WAO(J)
                      ELSE
                        WRITE (NDSTAB,2720) DTME21, PTNME(J),         &
                            M2KM*PTLOC(1,J), M2KM*PTLOC(2,J),         &
                            DPO(J), USTAR, WAO(J)
                      END IF
                    IF ( ISCALE.EQ.0 ) THEN
                        WRITE (NDSTAB,2921)
                      ELSE IF ( ISCALE.EQ.1 .OR. ISCALE.EQ.2 ) THEN
                        WRITE (NDSTAB,2922)
                      ELSE IF ( ISCALE.EQ.3 ) THEN
                        WRITE (NDSTAB,2923)
                      ELSE IF ( ISCALE.EQ.4 .OR. ISCALE.EQ.5 ) THEN
                        WRITE (NDSTAB,2924)
                      END IF
                    IF ( ISCALE.GE.3 ) FACF = 1. / FP
                    DO IK=1, NK
                      WRITE (NDSTAB,2930) FACF*SIG(IK), E1(IK),       &
                        SIN1(IK), SNL1(IK), SDS1(IK), SBT1(IK), STT1(IK)
                      END DO
                    WRITE (NDSTAB,2940)
!
                  ELSE IF ( OTYPE .EQ. 3 ) THEN
!
                    CALL STME21 ( TIME , DTME21 )
                    IF ( FLAGLL ) THEN
                        WRITE (NDSTAB,2920) DTME21, PTNME(J),         &
                            M2KM*PTLOC(1,J), M2KM*PTLOC(2,J),         &
                            DPO(J), USTAR, WAO(J)
                      ELSE
                        WRITE (NDSTAB,2720) DTME21, PTNME(J),         &
                            M2KM*PTLOC(1,J), M2KM*PTLOC(2,J),         &
                            DPO(J), USTAR, WAO(J)
                      END IF
                    IF ( ISCALE.EQ.0 ) THEN
                        WRITE (NDSTAB,2925)
                      ELSE IF ( ISCALE.EQ.1 .OR. ISCALE.EQ.2 ) THEN
                        WRITE (NDSTAB,2926)
                      ELSE IF ( ISCALE.EQ.3 ) THEN
                        WRITE (NDSTAB,2927)
                      ELSE IF ( ISCALE.EQ.4 .OR. ISCALE.EQ.5 ) THEN
                        WRITE (NDSTAB,2928)
                      END IF
!
                    IF ( ISCALE.GE.3 ) FACF = 1. / FP
                    DO IK=1, NK
                      FACT   = 1. / MAX ( 1.E-10 , E1(IK) )
                      IF ( E1(IK) .GT. 1.E-10 ) THEN
                          WRITE (NDSTAB,2931) FACF*SIG(IK), E1(IK),   &
                            FACT*SIN1(IK), FACT*SNL1(IK),             &
                            FACT*SDS1(IK), FACT*SBT1(IK), FACT*STT1(IK)
                        ELSE
                          WRITE (NDSTAB,2931) FACF*SIG(IK), E1(IK)
                        END IF
                      END DO
                    WRITE (NDSTAB,2940)
!
                  ELSE IF ( OTYPE .EQ. 4 ) THEN
!
                    IF ( FLFORM ) THEN
                        WRITE (NDSTAB) PTNME(J), PTLOC(2,J),          &
                                       PTLOC(1,J), DPO(J), WAO(J),    &
                                       UDIR, CAO(J), CDIR
                        IF ( FLSRCE(1) ) WRITE (NDSTAB)               &
                              ((E(IK,ITH),IK=1,NK),ITH=1,NTH)
                        IF ( FLSRCE(2) ) WRITE (NDSTAB)               &
                              ((SWN(IK,ITH),IK=1,NK),ITH=1,NTH)
                        IF ( FLSRCE(3) ) WRITE (NDSTAB)               &
                              ((SNL(IK,ITH),IK=1,NK),ITH=1,NTH)
                        IF ( FLSRCE(4) ) WRITE (NDSTAB)               &
                              ((SDS(IK,ITH),IK=1,NK),ITH=1,NTH)
                        IF ( FLSRCE(5) ) WRITE (NDSTAB)               &
                              ((SBT(IK,ITH),IK=1,NK),ITH=1,NTH)
                        IF ( FLSRCE(6) ) WRITE (NDSTAB)               &
                              ((STT(IK,ITH),IK=1,NK),ITH=1,NTH)
                      ELSE
                        IF ( FLAGLL ) THEN
                            WRITE (NDSTAB,901) PTNME(J),              &
                                M2KM*PTLOC(2,J), M2KM*PTLOC(1,J),     &
                                DPO(J), WAO(J), UDIR, CAO(J), CDIR
                          ELSE
                            WRITE (NDSTAB,701) PTNME(J),              &
                                M2KM*PTLOC(2,J), M2KM*PTLOC(1,J),     &
                                DPO(J), WAO(J), UDIR, CAO(J), CDIR
                          END IF
                        IF ( FLSRCE(1) ) WRITE (NDSTAB,902)           &
                              ((E(IK,ITH),IK=1,NK),ITH=1,NTH)
                        IF ( FLSRCE(2) ) WRITE (NDSTAB,902)           &
                              ((SWN(IK,ITH),IK=1,NK),ITH=1,NTH)
                        IF ( FLSRCE(3) ) WRITE (NDSTAB,902)           &
                              ((SNL(IK,ITH),IK=1,NK),ITH=1,NTH)
                        IF ( FLSRCE(4) ) WRITE (NDSTAB,902)           &
                              ((SDS(IK,ITH),IK=1,NK),ITH=1,NTH)
                        IF ( FLSRCE(5) ) WRITE (NDSTAB,902)           &
                              ((SBT(IK,ITH),IK=1,NK),ITH=1,NTH)
                        IF ( FLSRCE(6) ) WRITE (NDSTAB,902)           &
                              ((STT(IK,ITH),IK=1,NK),ITH=1,NTH)
                      END IF
!
                  END IF
!



!
! 4.d Perform output type 4 ( print plots / tables / file )
!
              ELSE IF ( ITYPE .EQ. 4 ) THEN
!

                IF ( OTYPE .NE. 1 ) THEN
!  Format Time
                  iyc=TIME(1)/10000
                  imc=(TIME(1)-iyc*10000)/100
                  idc=TIME(1)-iyc*10000-100*imc
                  ihc=TIME(2)/10000
                  iminc=(TIME(2)-ihc*10000)/100
                  isc=TIME(2)-ihc*10000-100*iminc
       
                  timenc=DBLE(julday(idc,imc,iyc))+(DBLE(ihc)+(DBLE(iminc)+(DBLE(isc)/60.))/60.)/24.
                  Jday0=julday(1,1,1900)
                  timenc=timenc-Jday0

!  Open netCDF file to write values in each array
                  !CLOSE (NDSTAB)
                  iret=nf90_open(ncfile, NF90_WRITE, ncid)
                  call check_err(iret)


!  Add values in netCDF file      
                  iret=nf90_put_var(ncid,varid(1),timenc,(/IOUT/))

                  END IF


                IF ( OTYPE .EQ. 1 ) THEN
!
                    IF ( SCALE1 .GE. 0. )                             &
                        CALL PRT1DS (NDSO, NK, E1, SIG(1:NK), 'RAD/S',&
                             17, SCALE1, 'E(f)', 'm^2s', PTNME(J) )
                    IF ( SCALE2 .GE. 0. )                             &
                        CALL PRT2DS (NDSO, NK, NK, NTH, E, SIG(1:NK), &
                             'RAD/S', 1., SCALE2, 0.0001, 'E(f,th)',  &
                             'm^2s', PTNME(J) )
                    WRITE (NDSO,910) DPO(J), UABS
                    IF ( WAO(J) .GT. 0. ) WRITE (NDSO,911) UDIR
                    WRITE (NDSO,912) ASO(J), CAO(J)
                    IF ( CAO(J) .GT. 0. ) WRITE (NDSO,913) CDIR
                    WRITE (NDSO,914) HSIG, WLEN, TMEAN, THMEAN, THSPRD


                    ELSE IF ( OTYPE .EQ. 2 ) THEN
!  Add values in netCDF file      
                      iret=nf90_put_var(ncid,varid(2),M2KM*PTLOC(1,J),(/J/))
                      iret=nf90_put_var(ncid,varid(3),M2KM*PTLOC(2,J),(/J/))
                      iret=nf90_put_var(ncid,varid(5),DPO(J),(/J,J,IOUT/))
                      iret=nf90_put_var(ncid,varid(6),USTAR,(/J,J,IOUT/))
                      iret=nf90_put_var(ncid,varid(7),WAO(J),(/J,J,IOUT/))
                      iret=nf90_put_var(ncid,varid(8),UDIR,(/J,J,IOUT/))

                      IF ( FP .EQ. 0. ) FP = SIG(NK)
                      DO IK=1, NK
                        iret=nf90_put_var(ncid,varid(9),SIG(IK)/FP,(/ IK,J,J,IOUT /))
                        iret=nf90_put_var(ncid,varid(10),E1(IK),(/ IK,J,J,IOUT /))
                        iret=nf90_put_var(ncid,varid(11),THBND(IK),(/ IK,J,J,IOUT /))
                        iret=nf90_put_var(ncid,varid(12),SPBND(IK),(/ IK,J,J,IOUT /))
                        iret=nf90_put_var(ncid,varid(13),APM(IK),(/ IK,J,J,IOUT /))
                        END DO

                      !IF ( FP .EQ. SIG(NK) ) FP = 0.
                      !WRITE (NDSTAB,922)


!
                  ELSE IF ( OTYPE .EQ. 3 ) THEN
!
                    iret=nf90_put_var(ncid,varid(6),DPO(J),(/J,J,IOUT/))
                    iret=nf90_put_var(ncid,varid(7),WAO(J),(/J,J,IOUT/))
                    iret=nf90_put_var(ncid,varid(8),UDIR,(/J,J,IOUT/))
                    iret=nf90_put_var(ncid,varid(9),CAO(J),(/J,J,IOUT/))
                    iret=nf90_put_var(ncid,varid(10),CDIR,(/J,J,IOUT/))
                    IF ( FLFORM ) THEN
                        iret=nf90_put_var(ncid,varid(2),PTLOC(1,J),(/J/))
                        iret=nf90_put_var(ncid,varid(3),PTLOC(2,J),(/J/))
                      ELSE
                       iret=nf90_put_var(ncid,varid(2),M2KM*PTLOC(1,J),(/J/))
                       iret=nf90_put_var(ncid,varid(3),M2KM*PTLOC(2,J),(/J/))
                       END IF

                    DO ITH=1,NTH
                        DO IK=1,NK
                            iret=nf90_put_var(ncid,varid(11),(PI/180.)*mod(E(IK,ITH),360.)&
																								,(/ITH,IK,J,J,IOUT/))
                            END DO
                        END DO
!
                  ELSE IF ( OTYPE .EQ. 4 ) THEN
!
                    iret=nf90_put_var(ncid,varid(2),M2KM*PTLOC(1,J),(/J/))
                    iret=nf90_put_var(ncid,varid(3),M2KM*PTLOC(2,J),(/J/))
                    iret=nf90_put_var(ncid,varid(4),NPART,(/J,J,IOUT/))
                    iret=nf90_put_var(ncid,varid(5),depth,(/J,J,IOUT/))
                    iret=nf90_put_var(ncid,varid(6),WAO(J),(/J,J,IOUT/))
                    iret=nf90_put_var(ncid,varid(7),UDIR,(/J,J,IOUT/))
                    iret=nf90_put_var(ncid,varid(8),CAO(J),(/J,J,IOUT/))
                    iret=nf90_put_var(ncid,varid(9),CDIR,(/J,J,IOUT/))

                    DO I=0, NPART
                      iret=nf90_put_var(ncid,varid(10),XPART(1,I),(/I,J,J,IOUT/))
                      iret=nf90_put_var(ncid,varid(11),XPART(2,I),(/I,J,J,IOUT/))
                      iret=nf90_put_var(ncid,varid(12),XPART(3,I),(/I,J,J,IOUT/))
                      iret=nf90_put_var(ncid,varid(13),XPART(4,I),(/I,J,J,IOUT/))
                      iret=nf90_put_var(ncid,varid(14),XPART(5,I),(/I,J,J,IOUT/))
                      iret=nf90_put_var(ncid,varid(15),XPART(6,I),(/I,J,J,IOUT/))
                      END DO
!
                  END IF

                  iret=nf90_close(ncid)
                  call check_err(iret)


!
! 4.e Perform output type 5 ( tables )
!
              ELSE IF ( ITYPE .EQ. 5 ) THEN

!  Format Time
                  iyc=TIME(1)/10000
                  imc=(TIME(1)-iyc*10000)/100
                  idc=TIME(1)-iyc*10000-100*imc
                  ihc=TIME(2)/10000
                  iminc=(TIME(2)-ihc*10000)/100
                  isc=TIME(2)-ihc*10000-100*iminc
       
                  timenc=DBLE(julday(idc,imc,iyc))+(DBLE(ihc)+(DBLE(iminc)+(DBLE(isc)/60.))/60.)/24.
                  Jday0=julday(1,1,1900)
                  timenc=timenc-Jday0



!  Open netCDF file to write values in each array

                  CLOSE (NDSTAB)
                  iret=nf90_open(ncfile, NF90_WRITE, ncid)
                  call check_err(iret)


!  Add values in netCDF file      

                  iret=nf90_put_var(ncid,varid(1),timenc,(/IOUT/))

                  IF ( OTYPE .EQ. 1 ) THEN
                      iret=nf90_put_var(ncid,varid(2),M2KM*PTLOC(1,J),(/J/))
                      iret=nf90_put_var(ncid,varid(3),M2KM*PTLOC(2,J),(/J/))
                      iret=nf90_put_var(ncid,varid(4),DPO(J),(/ J,J,IOUT /))
                      iret=nf90_put_var(ncid,varid(5),CAO(J),(/ J,J,IOUT /))
                      iret=nf90_put_var(ncid,varid(6),CDIR,(/ J,J,IOUT /))
                      iret=nf90_put_var(ncid,varid(7),WAO(J),(/ J,J,IOUT /))
                      iret=nf90_put_var(ncid,varid(8),UDIR,(/ J,J,IOUT /))

                    ELSE IF ( OTYPE .EQ. 2 ) THEN
                      iret=nf90_put_var(ncid,varid(2),M2KM*PTLOC(1,J),(/J/))
                      iret=nf90_put_var(ncid,varid(3),M2KM*PTLOC(2,J),(/J/))
                      iret=nf90_put_var(ncid,varid(9),HSIG,(/ J,J,IOUT /))
                      iret=nf90_put_var(ncid,varid(10),WLEN,(/ J,J,IOUT /))
                      iret=nf90_put_var(ncid,varid(11),TMEAN,(/ J,J,IOUT /))
                      iret=nf90_put_var(ncid,varid(12),THMEAN,(/ J,J,IOUT /))
                      iret=nf90_put_var(ncid,varid(13),THSPRD,(/ J,J,IOUT /))
                      iret=nf90_put_var(ncid,varid(14),FP*TPIINV,(/ J,J,IOUT /))
                      iret=nf90_put_var(ncid,varid(15),THP,(/ J,J,IOUT /))
                      iret=nf90_put_var(ncid,varid(16),SPP,(/ J,J,IOUT /))

                    ELSE IF ( OTYPE .EQ. 3 ) THEN
                      iret=nf90_put_var(ncid,varid(2),1.E-4*XSTAR,(/J/))
                      iret=nf90_put_var(ncid,varid(3),1.E-4*YSTAR,(/J/))
                      iret=nf90_put_var(ncid,varid(17),UNORM,(/ J,J,IOUT /))
                      iret=nf90_put_var(ncid,varid(18),ESTAR,(/ J,J,IOUT /))
                      iret=nf90_put_var(ncid,varid(19),FPSTAR,(/ J,J,IOUT /))
                      iret=nf90_put_var(ncid,varid(20),CD*1000.,(/ J,J,IOUT /))
                      iret=nf90_put_var(ncid,varid(21),APM(NK)*100.,(/ J,J,IOUT /))

                    ELSE IF ( OTYPE .EQ. 4 ) THEN
                      iret=nf90_put_var(ncid,varid(2),XSTAR,(/J/))
                      iret=nf90_put_var(ncid,varid(3),YSTAR,(/J/))
                      iret=nf90_put_var(ncid,varid(7),UNORM,(/ J,J,IOUT /))
                      iret=nf90_put_var(ncid,varid(18),ESTAR,(/ J,J,IOUT /))
                      iret=nf90_put_var(ncid,varid(19),FPSTAR,(/ J,J,IOUT /))
                      iret=nf90_put_var(ncid,varid(20),CD*1000.,(/ J,J,IOUT /))
                      iret=nf90_put_var(ncid,varid(21),APM(NK)*100.,(/ J,J,IOUT /))

                    ELSE IF ( OTYPE .EQ. 5 ) THEN
                      HMAT   = MIN ( 100. , 3.33*GRAV*HSIG/UABS**2 )
                      IF ( HSIG .GE. HSMIN ) THEN
                          CALL WAVNU1 ( FP, DPO(J), WNA, XYZ )
                          AGE1   = MIN ( 100. , FP / WNA / UABS )
                          AFR    = TPI / TMEAN
                          CALL WAVNU1 ( AFR, DPO(J), WNA, XYZ )
                          AGE2   = MIN ( 100. , AFR / WNA / UABS )
                        ELSE
                          AGE1   = NF90_FILL_FLOAT
                          AGE2   = NF90_FILL_FLOAT
                        END IF

                      iret=nf90_put_var(ncid,varid(2),M2KM*PTLOC(1,J),(/J/))
                      iret=nf90_put_var(ncid,varid(3),M2KM*PTLOC(2,J),(/J/))
                      iret=nf90_put_var(ncid,varid(7),WAO(J),(/ J,J,IOUT /))
                      iret=nf90_put_var(ncid,varid(8),UDIR,(/ J,J,IOUT /))
                      iret=nf90_put_var(ncid,varid(9),HSIG,(/ J,J,IOUT /))
                      iret=nf90_put_var(ncid,varid(22),HMAT,(/ J,J,IOUT /))
                      iret=nf90_put_var(ncid,varid(23),AGE1,(/ J,J,IOUT /))
                      iret=nf90_put_var(ncid,varid(24),AGE2,(/ J,J,IOUT /))
                      iret=nf90_put_var(ncid,varid(25),ASO(J),(/ J,J,IOUT /))
      
                    ELSE IF ( OTYPE .EQ. 6 ) THEN
                      iret=nf90_put_var(ncid,varid(2),M2KM*PTLOC(1,J),(/J/))
                      iret=nf90_put_var(ncid,varid(3),M2KM*PTLOC(2,J),(/J/))
                      iret=nf90_put_var(ncid,varid(7),WAO(J),(/ J,J,IOUT /))
                      iret=nf90_put_var(ncid,varid(8),UDIR,(/ J,J,IOUT /))
                      iret=nf90_put_var(ncid,varid(9),HSIG,(/ J,J,IOUT /))

                      IF ( HSIG .GE. HSMIN ) THEN

                          iret=nf90_put_var(ncid,varid(26),TPI/FP,(/ J,J,IOUT /))
                        ELSE
                          iret=nf90_put_var(ncid,varid(26),0.0,(/ J,J,IOUT /))
                        END IF

                    END IF


                  iret=nf90_close(ncid)
                  call check_err(iret)
!                 
            END IF

!
! ... End of fields loop
!
          END IF
        END DO
!
      RETURN
!
! Formats
!
  900 FORMAT (I8.8,I7.6)
  901 FORMAT ('''',A10,'''',2F7.2,F10.1,2(F7.2,F6.1))
  701 FORMAT ('''',A10,'''',2(F8.1,'E3'),F10.1,2(F7.2,F6.1))
  902 FORMAT (7E11.3)
  905 FORMAT (9X,A)
  910 FORMAT (/15X,' Water depth       :',F7.1,'  (m)'/               &
               15X,' Wind speed        :',F8.2,' (m/s)')
  911 FORMAT ( 15X,' Wind direction    :',F7.1,'  (degr)')
  912 FORMAT ( 15X,' Air-sea temp. dif.:',F7.1,'  (degr)'/            &
               15X,' Current speed     :',F8.2,' (m/s)')
  913 FORMAT ( 15X,' Current direction :',F7.1,'  (degr)')
  914 FORMAT ( 15X,' Wave height       :',F8.2,' (m)'/                &
               15X,' Mean wave length  :',F6.0,'   (m)'/              &
               15X,' Mean wave period  :',F7.1,'  (s)'/               &
               15X,' Mean wave direct. :',F7.1,'  (degr)'/            &
               15X,' Direct. spread    :',F7.1,'  (degr)'/)
  920 FORMAT (' Time     : ',A/                                  &
              ' Location : ',A,'  (',2F8.2,' )'/                 &
              ' depth    : ',F7.1,'   m'/                        &
              ' U*       : ',F9.3,' m/s'/                        &
              ' U10      : ',F7.1,'   m/s'/                      &
              ' Dir U10  : ',F7.1,'   degr'//                    &
       '      f     f/fp      F(f)    theta    spr    alpha  '/  &
       '     (Hz)    (-)     (m2s)    (deg)   (deg)    (-)   '/  &
           '  --------------------------------------------------')
  720 FORMAT (' Time     : ',A/                                  &
              ' Location : ',A,'  (',2(F8.1,'E3'),' )'/          &
              ' depth    : ',F7.1,'   m'/                        &
              ' U*       : ',F9.3,' m/s'/                        &
              ' U10      : ',F7.1,'   m/s'/                      &
              ' Dir U10  : ',F7.1,'   degr'//                    &
       '      f     f/fp      F(f)    theta    spr    alpha  '/  &
       '     (Hz)    (-)     (m2s)    (deg)   (deg)    (-)   '/  &
       '  --------------------------------------------------')
  921 FORMAT (1x,F8.5,F7.3,E11.3,2F8.1,F8.4)
  922 FORMAT (' '/' ')
!
  940 FORMAT (1X,I8.8,1X,I6.6,2F8.3,2X,'''',A10,'''',            &
              1X,I2,F7.1,F5.1,f6.1,F5.2,F6.1)
  943 FORMAT (1X,I8.8,1X,I6.6,2(F8.1,'E3'),2X,'''',A10,'''',     &
              1X,I2,F7.1,F5.1,f6.1,F5.2,F6.1)
  941 FORMAT ('        hs     tp     lp       theta     sp      wf')
  942 FORMAT (I3,3F8.2,2F9.2,F7.2)
!
 1901 FORMAT (                                                        &
       '    Date     Time        d     Uc     Dir.  U10    Dir. '/    &
       '            h  m  s     (m)   (m/s)  (d.N) (m/s)  (d.N) '/    &
       ' ---------------------------------------------------------')
 1902 FORMAT (                                                        &
       '    Date     Time        Hs     L      Tr    Dir.  Spr. ',    &
       '    fp    p_dir  p_spr'/                                      &
       '            h  m  s     (m)    (m)    (s)   (d.N)  (deg)',    &
       '   (Hz)   (d.N)  (deg)'/                                      &
       ' -------------------------------------------------------',    &
       '-----------------------')
 1903 FORMAT (                                                        &
    '    Date     Time       U*       E*        fp*       Cd   alpha'/&
    '            h  m  s   (m/s)     (-)        (-)     *1000  *100'/ &
    ' --------------------------------------------------------------')
 1904 FORMAT (                                                        &
     '    Date     Time     U10       E*        fp*       Cd   alpha'/&
     '            h  m  s  (m/s)     (-)        (-)     *1000  *100'/ &
     ' --------------------------------------------------------------')
 1905 FORMAT (                                                        &
       '   Date     Time     U10    Dir.    Hs      H*    cp/U  ',    &
           '  cm/U     Dt'/                                           &
       '                    (m/s)  (d.N)   (m)     (-)    (-)   ',    &
           '   (-)   (deg)'/                                          &
      ' --------------------------------------------------',          &
       '---------------------')
 1906 FORMAT (                                                         &
     '     Time      U10    Dir. Hs  Tp  '/         &
     '  yr mth dy h  (m/s) (d.N) (m) (s) '/         &
     ' ----------------------------------')
 1910 FORMAT ( ' '/' ' )
 1911 FORMAT (' Time : ',A//                                     &
   '    Long.    Lat.       d     Uc     Dir.  U10    Dir. '/    &
   '                       (m)   (m/s)  (d.N) (m/s)  (d.N) '/    &
   ' --------------------------------------------------------')
 1912 FORMAT (' Time : ',A//                                     &
   '    Long.    Lat.       Hs     L      Tr    Dir.  Spr. ',    &
   '    fp    p_dir  p_spr'/                                     &
   '                       (m)    (m)    (s)   (d.N)  (deg)',    &
   '   (Hz)   (d.N)  (deg)'/                                     &
   ' ------------------------------------------------------',    &
   '-----------------------')
 1711 FORMAT (' Time : ',A//                                     &
   '       X        Y          d     Uc     Dir.  U10    Dir. '/ &
   '      (m)      (m)        (m)   (m/s)  (d.N) (m/s)  (d.N) '/ &
   ' ----------------------------------------------------------')
 1712 FORMAT (' Time : ',A//                                     &
   '       X        Y          Hs     L      Tr    Dir.  Spr. ', &
   '    fp    p_dir  p_spr'/                                     &
   '      (m)      (m))       (m)    (m)    (s)   (d.N)  (deg)', &
   '   (Hz)   (d.N)  (deg)'/                                     &
   ' ------------------------------------------------------',    &
   '-------------------------')
 1913 FORMAT (' Time : ',A//                                          &
   '       X*       Y*       U*       E*        fp*       Cd   alpha'/&
   '      (-)      (-)     (m/s)     (-)        (-)     *1000  *100'/ &
   ' --------------------------------------------------------------')
 1914 FORMAT (' Time : ',A//                                          &
   '       X*       Y*     U10       E*        fp*       Cd   alpha'/ &
   '      (-)      (-)    (m/s)     (-)        (-)     *1000  *100 '/ &
   ' --------------------------------------------------------------')
 1915 FORMAT (' Time : ',A//                                     &
   '     Long.    Lat.   U10    Dir.    Hs      H*    cp/U  ',   &
       '  cm/U     Dt'/                                          &
   '                    (m/s)  (d.N)   (m)     (-)    (-)   ',   &
       '   (-)   (deg)'/                                         &
   ' -------------------------------------------------',         &
   '---------------------')
 1715 FORMAT (' Time : ',A//                                     &
   '       X        Y      U10    Dir.    Hs      H*    cp/U  ', &
       '  cm/U     Dt'/                                          &
   '      (m)      (m)    (m/s)  (d.N)   (m)     (-)    (-)   ', &
       '   (-)   (deg)'/                                         &
   ' ---------------------------------------------------',       &
   '---------------------')
 1916 FORMAT (' Time : ',A//                                     &
   '   Long.   Lat.   U10     Dir.     Hs      Tp  '/         &
   '                 (m/s)   (d.N)    (m)     (s)  '/         &
   '-----------------------------------------------')
 1716 FORMAT (' Time : ',A//                                     &
   '    X     Y     U10     Dir.     Hs      Tp  '/         &
   '    (m)  (m)   (m/s)   (d.N)    (m)     (s)  '/         &
   '---------------------------------------------')
 1921 FORMAT ( 2X,I8.8,I3,2(1X,I2.2),F10.1,F6.2,F7.1,F6.2,F7.1)
 1922 FORMAT ( 2X,I8.8,I3,2(1X,I2.2),F9.3,F7.1,F7.2,F7.1,F7.2,        &
               F8.4,F7.1,F7.2)
 1923 FORMAT ( 2X,I8.8,I3,2(1X,I2.2),F8.4,2E11.3,2F7.3)
 1924 FORMAT ( 2X,I8.8,I3,2(1X,I2.2),F7.1,2E11.3,2F7.3)
 1925 FORMAT ( 2X,I8.8,I3,2(1X,I2.2),F7.2,F7.1,2F7.2,2F8.2,F7.1)
 1926 FORMAT ( 2X,I4,3(1X,I2),F5.1,1X,I3,2F5.1)
 1931 FORMAT ( 2X,2F8.3,F10.1,F6.2,F7.1,F6.2,F7.1)
 1932 FORMAT ( 2X,2F8.3,F9.3,F7.1,F7.2,F7.1,F7.2,                &
               F8.4,F7.1,F7.2)
 1731 FORMAT ( 2X,2(F7.1,'E3'),F10.1,F6.2,F7.1,F6.2,F7.1)
 1732 FORMAT ( 2X,2(F7.1,'E3'),F9.3,F7.1,F7.2,F7.1,F7.2,         &
               F8.4,F7.1,F7.2)
 1933 FORMAT ( 2X,2(F7.1,'E4'),F8.4,2E11.3,2F7.3)
 1934 FORMAT ( 2X,2F9.1,F7.1,2E11.3,2F7.3)
 1935 FORMAT ( 2X,2F8.3,F7.2,F7.1,2F7.2,2F8.2,F7.1)
 1735 FORMAT ( 2X,2(F7.1,'E3'),F7.2,F7.1,2F7.2,2F8.2,F7.1)
 1936 FORMAT ( 2X,2F8.3,F5.1,1X,I3,2F5.1)
 1736 FORMAT ( 2X,2(F7.1,'E3'),F5.1,1X,I3,2F5.1)
!
 2920 FORMAT (' Time     : ',A/                                  &
              ' Location : ',A,'  (',2F8.2,' )'/                 &
              ' depth    : ',F7.1,'   m'/                        &
              ' U*       : ',F9.3,' m/s'/                        &
              ' U10      : ',F7.1,'   m/s'/)
 2720 FORMAT (' Time     : ',A/                                  &
              ' Location : ',A,'  (',2(F8.1,'E3'),' )'/          &
              ' depth    : ',F7.1,'   m'/                        &
              ' U*       : ',F9.3,' m/s'/                        &
              ' U10      : ',F7.1,'   m/s'/)
 2921 FORMAT ('    f           E      ',                              &
              '    Sin        Snl        Sds        Sbt       Stot'/  &
              '   (Hz)       (m2s)    ',                              &
              '   (m2)       (m2)       (m2)       (m2)       (m2)'/  &
              ' -------------------------------------',               &
              '--------------------------------------')
 2922 FORMAT ('    f*          E*    ',                               &
              '    Sin*       Snl*       Sds*       Sbt*      Stot*'/ &
              '   (-)         (-)    ',                               &
              '    (-)        (-)        (-)        (-)        (-)'/  &
              ' -------------------------------------',               &
              '--------------------------------------')
 2923 FORMAT ('   f/fp         E      ',                              &
              '   Sin        Snl        Sds        Sbt       Stot'/   &
              '   (-)        (m2s)    ',                              &
              '  (m2)       (m2)       (m2)       (m2)       (m2)'/   &
              ' -------------------------------------',               &
              '--------------------------------------')
 2924 FORMAT ('   f/fp         E*     ',                              &
              '   Sin*       Snl*       Sds*       Sbt*      Stot*'/  &
              '     (-)       (-)     ',                              &
              '   (-)        (-)        (-)        (-)        (-)'/   &
              ' -------------------------------------',               &
              '--------------------------------------')
 2925 FORMAT ('    f         E      ',                                &
              '  Tini       Tnli       Tdsi       Tbti      Ttoti'/   &
              '   (Hz)     (m2s)    ',                                &
              ' (1/s)      (1/s)      (1/s)      (1/s)      (1/s)'/   &
              ' -----------------------------------',                 &
              '--------------------------------------')
 2926 FORMAT ('    f*        E*     ',                                &
              ' Tini*      Tnli*      Tdsi*      Tbti*     Ttoti*'/   &
              '   (-)       (-)     ',                                &
              '  (-)        (-)        (-)        (-)        (-)'/    &
              ' -----------------------------------',                 &
              '--------------------------------------')
 2927 FORMAT ('   f/fp       E      ',                                &
              '  Tini       Tnli       Tdsi       Tbti      Ttoti'/   &
              '   (-)       (m2s)    ',                               &
              ' (1/s)      (1/s)      (1/s)      (1/s)      (1/s)'/   &
              ' -----------------------------------',                 &
              '--------------------------------------')
 2928 FORMAT ('   f/fp       E*     ',                                &
              ' Tini*      Tnli*      Tdsi*      Tbti*     Ttoti*'/   &
              '   (-)       (-)     ',                                &
              '  (-)        (-)        (-)        (-)        (-)'/    &
              ' -----------------------------------',                 &
              '--------------------------------------')
 2930 FORMAT (1X,F6.4,2X,6E11.3)
 2931 FORMAT (1X,F6.4,6E11.3)
 2940 FORMAT ( ' '/' ' )
!
!/T 9000 FORMAT (' TEST W3EXNC : FLAGS :',40L2)
!/T 9001 FORMAT (' TEST W3EXNC : ITPYE  :',I4/                        &
!/T              '               OTPYE  :',I4/                        &
!/T              '               NREQ   :',I4/                        &
!/T              '               SCALE1 :',E10.3/                     &
!/T              '               SCALE2 :',E10.3/                     &
!/T              '               FLSRCE :',6L2)
!/T 9002 FORMAT (' TEST W3EXNC : OUTPUT POINT : ',A)
!/T 9010 FORMAT (' TEST W3EXNC : depth =',F7.1,'  IK, T, K, CG :')
!/T 9011 FORMAT ('               ',I3,F8.2,F8.4,F8.2)
!/
!/ End of W3EXNC ----------------------------------------------------- /
!/
      END SUBROUTINE W3EXNC





!--------------------------------------------------------------------------    
      SUBROUTINE W3CRNC (itype,otype,ncfile, ncid, dimid, dimln, varid)


		USE W3GDATMD
		USE NETCDF

      implicit none


      integer, INTENT(IN)               :: itype,otype
      character*(*), INTENT(IN)         :: ncfile
      integer, INTENT(IN)               :: dimln(5)
      integer, INTENT(OUT)              :: dimid(7), varid(26),ncid
      INTEGER                           :: iret
      REAL(kind=4)                      :: freq,XFR=1.1




!
!     Create netCDF file
!      
      iret = nf90_create(ncfile, NF90_CLOBBER, ncid)
      call check_err(iret)

!
!     Define generals dimensions
!
      iret = nf90_def_dim(ncid, 'time', dimln(1), dimid(1))
      IF (FLAGLL) THEN
        iret = nf90_def_dim(ncid, 'longitude', dimln(2), dimid(2))
        iret = nf90_def_dim(ncid, 'latitude', dimln(3), dimid(3))
      ELSE                     
        iret = nf90_def_dim(ncid, 'x', dimln(2), dimid(2))
        iret = nf90_def_dim(ncid, 'y', dimln(3), dimid(3))
      END IF
      call check_err(iret)

!
!     define generals variables
!

!  time
      iret=nf90_def_var(ncid, 'time', NF90_DOUBLE, dimid(1), varid(1))
      iret=nf90_put_att(ncid,varid(1),'units','days since 1990-01-01T00:00:00Z')
      iret=nf90_put_att(ncid,varid(1),'long_name','julian day (UT)')
      iret=nf90_put_att(ncid,varid(1),'standard_name','time')
      iret=nf90_put_att(ncid,varid(1),'conventions','relative julian days with &
                            decimal part (as parts of the day )')
      iret=nf90_put_att(ncid,varid(1),'axis','T') 

      IF (FLAGLL) THEN 
!  longitude
        iret=nf90_def_var(ncid, 'longitude', NF90_FLOAT, dimid(2), varid(2))
        iret=nf90_put_att(ncid,varid(2),'units','degrees_east')
        iret=nf90_put_att(ncid,varid(2),'long_name','longitude')
        iret=nf90_put_att(ncid,varid(2),'standard_name','longitude')
        iret=nf90_put_att(ncid,varid(2),'valid_min',-180.0)
        iret=nf90_put_att(ncid,varid(2),'valid_max',180.)
        iret=nf90_put_att(ncid,varid(2),'axis','X') 

!  latitude
        iret=nf90_def_var(ncid, 'latitude', NF90_FLOAT, dimid(3), varid(3))
        iret=nf90_put_att(ncid,varid(3),'units','degrees_north')
        iret=nf90_put_att(ncid,varid(3),'long_name','latitude')
        iret=nf90_put_att(ncid,varid(3),'standard_name','latitude')
        iret=nf90_put_att(ncid,varid(3),'valid_min',-90.0)
        iret=nf90_put_att(ncid,varid(3),'valid_max',90.)
        iret=nf90_put_att(ncid,varid(3),'axis','Y') 

        ELSE
!  longitude
        iret=nf90_def_var(ncid, 'x', NF90_FLOAT, dimid(2), varid(2))
        iret=nf90_put_att(ncid,varid(2),'units','m')
        iret=nf90_put_att(ncid,varid(2),'long_name','x')
        iret=nf90_put_att(ncid,varid(2),'axis','X')   

!  latitude
        iret=nf90_def_var(ncid, 'y', NF90_FLOAT, dimid(3), varid(3))
        iret=nf90_put_att(ncid,varid(3),'units','m')
        iret=nf90_put_att(ncid,varid(3),'long_name','y')
        iret=nf90_put_att(ncid,varid(3),'axis','Y')   
        END IF 


!
! ... ITYPE = 4 AND OTYPE = 2
!

      IF (ITYPE.EQ.4 .AND. OTYPE.EQ.2) THEN
!
!     Define specifics dimensions
!
        iret = nf90_def_dim(ncid, 'frequency', dimln(4), dimid(4))
        call check_err(iret)

!
!     define specifics variables
!

!  frequency
        iret=nf90_def_var(ncid, 'frequency', NF90_FLOAT, dimid(4), varid(4))
        iret=nf90_put_att(ncid,varid(4),'units','s-1')
        iret=nf90_put_att(ncid,varid(4),'long_name','center_frequency_of_band')
        iret=nf90_put_att(ncid,varid(4),'standard_name','frequency')
!d
        iret=nf90_def_var(ncid, 'depth', NF90_FLOAT, (/ dimid(3),dimid(2),dimid(1) /), varid(5))
        iret=nf90_put_att(ncid,varid(5),'standard_name','depth')
        iret=nf90_put_att(ncid,varid(5),'units','m')
        iret=nf90_put_att(ncid,varid(5),'_FillValue',NF90_FILL_FLOAT)
!U*
        iret=nf90_def_var(ncid, 'Ustar', NF90_FLOAT, (/ dimid(3),dimid(2),dimid(1) /), varid(6))
        iret=nf90_put_att(ncid,varid(6),'standard_name','?')
        iret=nf90_put_att(ncid,varid(6),'units','m s-1')
        iret=nf90_put_att(ncid,varid(6),'_FillValue',NF90_FILL_FLOAT)
!U10
        iret=nf90_def_var(ncid, 'u10m', NF90_FLOAT, (/ dimid(3),dimid(2),dimid(1) /), varid(7))
        iret=nf90_put_att(ncid,varid(7),'standard_name','wind_speed')
        iret=nf90_put_att(ncid,varid(7),'units','m s-1')
        iret=nf90_put_att(ncid,varid(7),'_FillValue',NF90_FILL_FLOAT)
!Dir
        iret=nf90_def_var(ncid, 'udir', NF90_FLOAT, (/ dimid(3),dimid(2),dimid(1) /), varid(8))
        iret=nf90_put_att(ncid,varid(8),'standard_name','wind_from_direction')
        iret=nf90_put_att(ncid,varid(8),'units','degree')
        iret=nf90_put_att(ncid,varid(8),'_FillValue',NF90_FILL_FLOAT)


!f/fp
        iret=nf90_def_var(ncid, 'ffp', NF90_FLOAT, (/ dimid(4),dimid(3),dimid(2),dimid(1) /), varid(9))
        iret=nf90_put_att(ncid,varid(9),'standard_name','f/fp')
        iret=nf90_put_att(ncid,varid(9),'units','n/a')
        iret=nf90_put_att(ncid,varid(9),'_FillValue',NF90_FILL_FLOAT)
!F
        iret=nf90_def_var(ncid, 'F', NF90_FLOAT, (/ dimid(4),dimid(3),dimid(2),dimid(1) /), varid(10))
        iret=nf90_put_att(ncid,varid(10),'standard_name','F')
        iret=nf90_put_att(ncid,varid(10),'units','m2 s')
        iret=nf90_put_att(ncid,varid(10),'_FillValue',NF90_FILL_FLOAT)
!theta
        iret=nf90_def_var(ncid, 'th1m', NF90_FLOAT, (/ dimid(4),dimid(3),dimid(2),dimid(1) /), varid(11))
        iret=nf90_put_att(ncid,varid(11),'standard_name','average_wave_direction')
        iret=nf90_put_att(ncid,varid(11),'units','degree')
        iret=nf90_put_att(ncid,varid(11),'_FillValue',NF90_FILL_FLOAT)
!spr
        iret=nf90_def_var(ncid, 'sth1m', NF90_FLOAT,(/ dimid(4),dimid(3),dimid(2),dimid(1) /), varid(12))
        iret=nf90_put_att(ncid,varid(12),'standard_name','average_wave_spreading')
        iret=nf90_put_att(ncid,varid(12),'units','degree')
        iret=nf90_put_att(ncid,varid(12),'_FillValue',NF90_FILL_FLOAT)
!alpha
        iret=nf90_def_var(ncid, 'alpha', NF90_FLOAT, (/ dimid(4),dimid(3),dimid(2),dimid(1) /), varid(13))
        iret=nf90_put_att(ncid,varid(13),'standard_name','?')
        iret=nf90_put_att(ncid,varid(13),'units','-')
        iret=nf90_put_att(ncid,varid(13),'_FillValue',NF90_FILL_FLOAT)



!  Open netCDF file to write values in each array
        iret = nf90_close(ncid)
        iret = nf90_open(ncfile, NF90_WRITE, ncid)

!  Add values in netCDF file      
        DO IK=1,NK
          iret=nf90_put_var(ncid,varid(4),SIG(IK)*TPIINV,(/IK/))
          END DO


!
! ... ITYPE = 4 AND OTYPE = 3
!

      ELSE IF (ITYPE.EQ.4 .AND. OTYPE.EQ.3) THEN
!
!     Define specifics dimensions
!
        iret = nf90_def_dim(ncid, 'frequency', dimln(4), dimid(4))
        iret = nf90_def_dim(ncid, 'direction', dimln(5), dimid(5))
        call check_err(iret)

!
!     define specifics variables
!

!frequency
        iret=nf90_def_var(ncid, 'frequency', NF90_FLOAT, (/dimid(4)/), varid(4))
        iret=nf90_put_att(ncid,varid(4),'units','s-1')
        iret=nf90_put_att(ncid,varid(4),'long_name','center_frequency_of_band')
        iret=nf90_put_att(ncid,varid(4),'standard_name','frequency')

!frequency1
        iret=nf90_def_var(ncid, 'frequency1', NF90_FLOAT, (/dimid(4)/), varid(12))
        iret=nf90_put_att(ncid,varid(12),'units','s-1')
        iret=nf90_put_att(ncid,varid(12),'long_name','lower_frequency_of_band ')
        iret=nf90_put_att(ncid,varid(12),'standard_name','frequency1')

!frequency2
        iret=nf90_def_var(ncid, 'frequency2', NF90_FLOAT, (/dimid(4)/), varid(13))
        iret=nf90_put_att(ncid,varid(13),'units','s-1')
        iret=nf90_put_att(ncid,varid(13),'long_name','higher_frequency_of_band ')
        iret=nf90_put_att(ncid,varid(13),'standard_name','frequency2')

!direction
        iret=nf90_def_var(ncid, 'direction', NF90_FLOAT, (/dimid(5)/), varid(5))
        iret=nf90_put_att(ncid,varid(5),'units','degree')
        iret=nf90_put_att(ncid,varid(5),'long_name','direction')
        iret=nf90_put_att(ncid,varid(5),'standard_name','direction')

!Efth
        iret=nf90_def_var(ncid,'Efth',NF90_FLOAT,(/dimid(5),dimid(4),dimid(3),dimid(2),dimid(1)/)&
                       ,varid(11))
        iret=nf90_put_att(ncid,varid(11),'standard_name','Efth')
        iret=nf90_put_att(ncid,varid(11),'units','m2 s degree')
        iret=nf90_put_att(ncid,varid(11),'_FillValue',NF90_FILL_FLOAT)

!d
        iret=nf90_def_var(ncid, 'depth', NF90_FLOAT, (/ dimid(3),dimid(2),dimid(1) /), varid(6))
        iret=nf90_put_att(ncid,varid(6),'standard_name','depth')
        iret=nf90_put_att(ncid,varid(6),'units','m')
        iret=nf90_put_att(ncid,varid(6),'_FillValue',NF90_FILL_FLOAT)
!U10
        iret=nf90_def_var(ncid, 'u10m', NF90_FLOAT, (/ dimid(3),dimid(2),dimid(1) /), varid(7))
        iret=nf90_put_att(ncid,varid(7),'standard_name','wind_speed')
        iret=nf90_put_att(ncid,varid(7),'units','m s-1')
        iret=nf90_put_att(ncid,varid(7),'_FillValue',NF90_FILL_FLOAT)
!Dir
        iret=nf90_def_var(ncid, 'udir', NF90_FLOAT, (/ dimid(3),dimid(2),dimid(1) /), varid(8))
        iret=nf90_put_att(ncid,varid(8),'standard_name','wind_from_direction')
        iret=nf90_put_att(ncid,varid(8),'units','degree')
        iret=nf90_put_att(ncid,varid(8),'_FillValue',NF90_FILL_FLOAT)
!Uc
        iret=nf90_def_var(ncid, 'U', NF90_FLOAT, (/ dimid(3),dimid(2),dimid(1) /), varid(9))
        iret=nf90_put_att(ncid,varid(9),'standard_name','current_speed')
        iret=nf90_put_att(ncid,varid(9),'units','m s-1')
        iret=nf90_put_att(ncid,varid(9),'_FillValue',NF90_FILL_FLOAT)
!Dir
        iret=nf90_def_var(ncid, 'Udir', NF90_FLOAT, (/ dimid(3),dimid(2),dimid(1) /), varid(10))
        iret=nf90_put_att(ncid,varid(10),'standard_name','current_from_direction')
        iret=nf90_put_att(ncid,varid(10),'units','degree')
        iret=nf90_put_att(ncid,varid(10),'_FillValue',NF90_FILL_FLOAT)



!  Open netCDF file to write values in each array
        iret = nf90_close(ncid)
        iret = nf90_open(ncfile, NF90_WRITE, ncid)


!  Add values in netCDF file      
        DO IK=1,NK
          freq=SIG(IK)*TPIINV
          iret=nf90_put_var(ncid,varid(4),freq,(/IK/))
          iret=nf90_put_var(ncid,varid(12),freq-0.5*(freq-(freq/XFR)),(/IK/))
          iret=nf90_put_var(ncid,varid(13),freq+0.5*(-freq+(freq*XFR)),(/IK/))
        END DO
        iret=nf90_put_var(ncid,varid(12),SIG(1)*TPIINV,(/1/))
        iret=nf90_put_var(ncid,varid(13),SIG(NK)*TPIINV,(/NK/))


        DO ITH=1,NTH
          iret=nf90_put_var(ncid,varid(5),MOD(450-THD(ITH),360.),(/ITH/))
        END DO



!
! ... ITYPE = 4 AND OTYPE = 4
!

      ELSE IF (ITYPE.EQ.4 .AND. OTYPE.EQ.4) THEN
!
!     Define specifics dimensions
!
        iret = nf90_def_dim(ncid, 'npart', dimln(4), dimid(4))
        call check_err(iret)

!
!     define specifics variables
!

!npart
        iret=nf90_def_var(ncid, 'npart', NF90_INT, (/ dimid(3),dimid(2),dimid(1) /), varid(4))
        iret=nf90_put_att(ncid,varid(4),'standard_name','npart')
        iret=nf90_put_att(ncid,varid(4),'units','n/a')
        iret=nf90_put_att(ncid,varid(4),'_FillValue',NF90_FILL_INT)
!d
        iret=nf90_def_var(ncid, 'depth', NF90_FLOAT, (/ dimid(3),dimid(2),dimid(1) /), varid(5))
        iret=nf90_put_att(ncid,varid(5),'standard_name','depth')
        iret=nf90_put_att(ncid,varid(5),'units','m')
        iret=nf90_put_att(ncid,varid(5),'_FillValue',NF90_FILL_FLOAT)
!U10
        iret=nf90_def_var(ncid, 'u10m', NF90_FLOAT, (/ dimid(3),dimid(2),dimid(1) /), varid(6))
        iret=nf90_put_att(ncid,varid(6),'standard_name','wind_speed')
        iret=nf90_put_att(ncid,varid(6),'units','m s-1')
        iret=nf90_put_att(ncid,varid(6),'_FillValue',NF90_FILL_FLOAT)
!Dir
        iret=nf90_def_var(ncid, 'udir', NF90_FLOAT, (/ dimid(3),dimid(2),dimid(1) /), varid(7))
        iret=nf90_put_att(ncid,varid(7),'standard_name','wind_from_direction')
        iret=nf90_put_att(ncid,varid(7),'units','degree')
        iret=nf90_put_att(ncid,varid(7),'_FillValue',NF90_FILL_FLOAT)
!Uc
        iret=nf90_def_var(ncid, 'U', NF90_FLOAT, (/ dimid(3),dimid(2),dimid(1) /), varid(8))
        iret=nf90_put_att(ncid,varid(8),'standard_name','current_speed')
        iret=nf90_put_att(ncid,varid(8),'units','m s-1')
        iret=nf90_put_att(ncid,varid(8),'_FillValue',NF90_FILL_FLOAT)
!Dir
        iret=nf90_def_var(ncid, 'Udir', NF90_FLOAT, (/ dimid(3),dimid(2),dimid(1) /), varid(9))
        iret=nf90_put_att(ncid,varid(9),'standard_name','current_from_direction')
        iret=nf90_put_att(ncid,varid(9),'units','degree')
        iret=nf90_put_att(ncid,varid(9),'_FillValue',NF90_FILL_FLOAT)


!Hs
        iret=nf90_def_var(ncid, 'Hs', NF90_FLOAT, (/dimid(4),dimid(3),dimid(2),dimid(1)/),varid(10))
        iret=nf90_put_att(ncid,varid(10),'standard_name','significant_wave_height')
        iret=nf90_put_att(ncid,varid(10),'units','m')
        iret=nf90_put_att(ncid,varid(10),'_FillValue',NF90_FILL_FLOAT)
!Tp
        iret=nf90_def_var(ncid, 'Tp', NF90_FLOAT,(/dimid(4),dimid(3),dimid(2),dimid(1)/),varid(11))
        iret=nf90_put_att(ncid,varid(11),'standard_name','dominant_wave_period')
        iret=nf90_put_att(ncid,varid(11),'units','m')
        iret=nf90_put_att(ncid,varid(11),'_FillValue',NF90_FILL_FLOAT)
!L
        iret=nf90_def_var(ncid, 'wl', NF90_FLOAT, (/dimid(4),dimid(3),dimid(2),dimid(1)/),varid(12))
        iret=nf90_put_att(ncid,varid(12),'standard_name','dominant_wavelength')
        iret=nf90_put_att(ncid,varid(12),'units','m')
        iret=nf90_put_att(ncid,varid(12),'_FillValue',NF90_FILL_FLOAT)
!Tr
        iret=nf90_def_var(ncid, 'Tr', NF90_FLOAT,(/dimid(4),dimid(3),dimid(2),dimid(1)/),varid(13))
        iret=nf90_put_att(ncid,varid(13),'standard_name','?')
        iret=nf90_put_att(ncid,varid(13),'units','-')
        iret=nf90_put_att(ncid,varid(13),'_FillValue',NF90_FILL_FLOAT)
!th1m
        iret=nf90_def_var(ncid, 'th1m', NF90_FLOAT, (/dimid(4),dimid(3),dimid(2),dimid(1)/),varid(14))
        iret=nf90_put_att(ncid,varid(14),'standard_name','average_wave_from_direction')
        iret=nf90_put_att(ncid,varid(14),'units','degree')
        iret=nf90_put_att(ncid,varid(14),'_FillValue',NF90_FILL_FLOAT)
!sth1m
        iret=nf90_def_var(ncid, 'sth1m', NF90_FLOAT,(/dimid(4),dimid(3),dimid(2),dimid(1)/),varid(15))
        iret=nf90_put_att(ncid,varid(15),'standard_name','average_wave_spreading')
        iret=nf90_put_att(ncid,varid(15),'units','degree')
        iret=nf90_put_att(ncid,varid(15),'_FillValue',NF90_FILL_FLOAT)



!
! ... ITYPE = 5 AND OTYPE = 1
!


      ELSE IF (ITYPE.EQ.5 .AND. OTYPE.EQ.1) THEN
!d
        iret=nf90_def_var(ncid, 'depth', NF90_FLOAT, (/ dimid(3),dimid(2),dimid(1) /), varid(4))
        iret=nf90_put_att(ncid,varid(4),'standard_name','depth')
        iret=nf90_put_att(ncid,varid(4),'units','m')
        iret=nf90_put_att(ncid,varid(4),'_FillValue',NF90_FILL_FLOAT)
!Uc
        iret=nf90_def_var(ncid, 'U', NF90_FLOAT, (/ dimid(3),dimid(2),dimid(1) /), varid(5))
        iret=nf90_put_att(ncid,varid(5),'standard_name','current_speed')
        iret=nf90_put_att(ncid,varid(5),'units','m s-1')
        iret=nf90_put_att(ncid,varid(5),'_FillValue',NF90_FILL_FLOAT)
!Dir
        iret=nf90_def_var(ncid, 'Udir', NF90_FLOAT, (/ dimid(3),dimid(2),dimid(1) /), varid(6))
        iret=nf90_put_att(ncid,varid(6),'standard_name','current_from_direction')
        iret=nf90_put_att(ncid,varid(6),'units','degree')
        iret=nf90_put_att(ncid,varid(6),'_FillValue',NF90_FILL_FLOAT)
!U10
        iret=nf90_def_var(ncid, 'u10m', NF90_FLOAT, (/ dimid(3),dimid(2),dimid(1) /), varid(7))
        iret=nf90_put_att(ncid,varid(7),'standard_name','wind_speed')
        iret=nf90_put_att(ncid,varid(7),'units','m s-1')
        iret=nf90_put_att(ncid,varid(7),'_FillValue',NF90_FILL_FLOAT)
!Dir
        iret=nf90_def_var(ncid, 'udir', NF90_FLOAT, (/ dimid(3),dimid(2),dimid(1) /), varid(8))
        iret=nf90_put_att(ncid,varid(8),'standard_name','wind_from_direction')
        iret=nf90_put_att(ncid,varid(8),'units','degree')
        iret=nf90_put_att(ncid,varid(8),'_FillValue',NF90_FILL_FLOAT)



!
! ... ITYPE = 5 AND OTYPE = 2
!

      ELSE IF (ITYPE.EQ.5 .AND. OTYPE.EQ.2) THEN
!Hs
        iret=nf90_def_var(ncid, 'Hs', NF90_FLOAT, (/ dimid(3),dimid(2),dimid(1) /), varid(9))  
        iret=nf90_put_att(ncid,varid(9),'standard_name','significant_wave_height') 
        iret=nf90_put_att(ncid,varid(9),'units','m')
        iret=nf90_put_att(ncid,varid(9),'_FillValue',NF90_FILL_FLOAT)
!L
        iret=nf90_def_var(ncid, 'wl', NF90_FLOAT, (/ dimid(3),dimid(2),dimid(1) /), varid(10))
        iret=nf90_put_att(ncid,varid(10),'standard_name','dominant_wavelength')
        iret=nf90_put_att(ncid,varid(10),'units','m')
        iret=nf90_put_att(ncid,varid(10),'_FillValue',NF90_FILL_FLOAT)
!Tr
        iret=nf90_def_var(ncid, 'Tr', NF90_FLOAT, (/ dimid(3),dimid(2),dimid(1) /), varid(11))
        iret=nf90_put_att(ncid,varid(11),'standard_name','?')
        iret=nf90_put_att(ncid,varid(11),'units','s')
        iret=nf90_put_att(ncid,varid(11),'_FillValue',NF90_FILL_FLOAT)
!Dir
        iret=nf90_def_var(ncid, 'th1p', NF90_FLOAT, (/ dimid(3),dimid(2),dimid(1) /), varid(12))
        iret=nf90_put_att(ncid,varid(12),'standard_name','dominant_wave_from_direction')
        iret=nf90_put_att(ncid,varid(12),'units','degree')
        iret=nf90_put_att(ncid,varid(12),'_FillValue',NF90_FILL_FLOAT)
!Spr
        iret=nf90_def_var(ncid, 'sth1p', NF90_FLOAT, (/ dimid(3),dimid(2),dimid(1) /), varid(13))
        iret=nf90_put_att(ncid,varid(13),'standard_name','dominant_wave_spreading')
        iret=nf90_put_att(ncid,varid(13),'units','degree')
        iret=nf90_put_att(ncid,varid(13),'_FillValue',NF90_FILL_FLOAT)
!fp
        iret=nf90_def_var(ncid, 'fp', NF90_FLOAT, (/ dimid(3),dimid(2),dimid(1) /), varid(14))
        iret=nf90_put_att(ncid,varid(14),'standard_name','dominant_wave_frequency')
        iret=nf90_put_att(ncid,varid(14),'units','s-1')
        iret=nf90_put_att(ncid,varid(14),'_FillValue',NF90_FILL_FLOAT)
!p_dir
        iret=nf90_def_var(ncid, 'th1m', NF90_FLOAT, (/ dimid(3),dimid(2),dimid(1) /), varid(15))
        iret=nf90_put_att(ncid,varid(15),'standard_name','average_wave_from_direction')
        iret=nf90_put_att(ncid,varid(15),'units','degree')
        iret=nf90_put_att(ncid,varid(15),'_FillValue',NF90_FILL_FLOAT)
!p_spr
        iret=nf90_def_var(ncid, 'sth1m', NF90_FLOAT, (/ dimid(3),dimid(2),dimid(1) /), varid(16))
        iret=nf90_put_att(ncid,varid(16),'standard_name','average_wave_from_spreading')
        iret=nf90_put_att(ncid,varid(16),'units','degree')
        iret=nf90_put_att(ncid,varid(16),'_FillValue',NF90_FILL_FLOAT)



!
! ... ITYPE = 5 AND OTYPE = 3
!

      ELSE IF (ITYPE.EQ.5 .AND. OTYPE.EQ.3) THEN
!U*
        iret=nf90_def_var(ncid, 'Ustar', NF90_FLOAT, (/ dimid(3),dimid(2),dimid(1) /), varid(17))
        iret=nf90_put_att(ncid,varid(17),'standard_name','?')
        iret=nf90_put_att(ncid,varid(17),'units','m s-1')
        iret=nf90_put_att(ncid,varid(17),'_FillValue',NF90_FILL_FLOAT)
!E*
        iret=nf90_def_var(ncid, 'Estar', NF90_FLOAT, (/ dimid(3),dimid(2),dimid(1) /), varid(18))
        iret=nf90_put_att(ncid,varid(18),'standard_name','?')
        iret=nf90_put_att(ncid,varid(18),'units','-')
        iret=nf90_put_att(ncid,varid(18),'_FillValue',NF90_FILL_FLOAT)
!fp*
        iret=nf90_def_var(ncid, 'fpstar', NF90_FLOAT, (/ dimid(3),dimid(2),dimid(1) /), varid(19))
        iret=nf90_put_att(ncid,varid(19),'standard_name','?')
        iret=nf90_put_att(ncid,varid(19),'units','-')
        iret=nf90_put_att(ncid,varid(19),'_FillValue',NF90_FILL_FLOAT)
!Cd
        iret=nf90_def_var(ncid, 'Cd', NF90_FLOAT, (/ dimid(3),dimid(2),dimid(1) /), varid(20))
        iret=nf90_put_att(ncid,varid(20),'standard_name','?')
        iret=nf90_put_att(ncid,varid(20),'units','*1000')
        iret=nf90_put_att(ncid,varid(20),'_FillValue',NF90_FILL_FLOAT)
!alpha
        iret=nf90_def_var(ncid, 'alpha', NF90_FLOAT, (/ dimid(3),dimid(2),dimid(1) /), varid(21))
        iret=nf90_put_att(ncid,varid(21),'standard_name','?')
        iret=nf90_put_att(ncid,varid(21),'units','*100')
        iret=nf90_put_att(ncid,varid(21),'_FillValue',NF90_FILL_FLOAT)




!
! ... ITYPE = 5 AND OTYPE = 4
!

      ELSE IF (ITYPE.EQ.5 .AND. OTYPE.EQ.4) THEN
!U10
        iret=nf90_def_var(ncid, 'u10m', NF90_FLOAT, (/ dimid(3),dimid(2),dimid(1) /), varid(7))
        iret=nf90_put_att(ncid,varid(7),'standard_name','wind_speed')
        iret=nf90_put_att(ncid,varid(7),'units','m s-1')
        iret=nf90_put_att(ncid,varid(7),'_FillValue',NF90_FILL_FLOAT)
!E*
        iret=nf90_def_var(ncid, 'Estar', NF90_FLOAT, (/ dimid(3),dimid(2),dimid(1) /), varid(18))
        iret=nf90_put_att(ncid,varid(18),'standard_name','?')
        iret=nf90_put_att(ncid,varid(18),'units','-')
        iret=nf90_put_att(ncid,varid(18),'_FillValue',NF90_FILL_FLOAT)
!fp*
        iret=nf90_def_var(ncid, 'fpstar', NF90_FLOAT, (/ dimid(3),dimid(2),dimid(1) /), varid(19))
        iret=nf90_put_att(ncid,varid(19),'standard_name','?')
        iret=nf90_put_att(ncid,varid(19),'units','-')
        iret=nf90_put_att(ncid,varid(19),'_FillValue',NF90_FILL_FLOAT)
!Cd
        iret=nf90_def_var(ncid, 'Cd', NF90_FLOAT, (/ dimid(3),dimid(2),dimid(1) /), varid(20))
        iret=nf90_put_att(ncid,varid(20),'standard_name','?')
        iret=nf90_put_att(ncid,varid(20),'units','*1000')
        iret=nf90_put_att(ncid,varid(20),'_FillValue',NF90_FILL_FLOAT)
!alpha
        iret=nf90_def_var(ncid, 'alpha', NF90_FLOAT, (/ dimid(3),dimid(2),dimid(1) /), varid(21))
        iret=nf90_put_att(ncid,varid(21),'standard_name','?')
        iret=nf90_put_att(ncid,varid(21),'units','*100')
        iret=nf90_put_att(ncid,varid(21),'_FillValue',NF90_FILL_FLOAT)



!
! ... ITYPE = 5 AND OTYPE = 5
!

      ELSE IF (ITYPE.EQ.5 .AND. OTYPE.EQ.5) THEN
!U10
        iret=nf90_def_var(ncid, 'u10m', NF90_FLOAT, (/ dimid(3),dimid(2),dimid(1) /), varid(7))
        iret=nf90_put_att(ncid,varid(7),'standard_name','wind_speed')
        iret=nf90_put_att(ncid,varid(7),'units','m s-1')
        iret=nf90_put_att(ncid,varid(7),'_FillValue',NF90_FILL_FLOAT)
!Dir
        iret=nf90_def_var(ncid, 'udir', NF90_FLOAT, (/ dimid(3),dimid(2),dimid(1) /), varid(8))
        iret=nf90_put_att(ncid,varid(8),'standard_name','wind_from_direction')
        iret=nf90_put_att(ncid,varid(8),'units','degree')
        iret=nf90_put_att(ncid,varid(8),'_FillValue',NF90_FILL_FLOAT)
!Hs
        iret=nf90_def_var(ncid, 'Hs', NF90_FLOAT, (/ dimid(3),dimid(2),dimid(1) /), varid(9))
        iret=nf90_put_att(ncid,varid(9),'standard_name','significant_wave_height') 
        iret=nf90_put_att(ncid,varid(9),'units','m')
        iret=nf90_put_att(ncid,varid(9),'_FillValue',NF90_FILL_FLOAT)
!H*
        iret=nf90_def_var(ncid, 'Hstar', NF90_FLOAT, (/ dimid(3),dimid(2),dimid(1) /), varid(22))
        iret=nf90_put_att(ncid,varid(22),'standard_name','?')
        iret=nf90_put_att(ncid,varid(22),'units','-')
        iret=nf90_put_att(ncid,varid(22),'_FillValue',NF90_FILL_FLOAT)
!cp/U
        iret=nf90_def_var(ncid, 'cpU', NF90_FLOAT, (/ dimid(3),dimid(2),dimid(1) /), varid(23))
        iret=nf90_put_att(ncid,varid(23),'standard_name','?')
        iret=nf90_put_att(ncid,varid(23),'units','-')
        iret=nf90_put_att(ncid,varid(23),'_FillValue',NF90_FILL_FLOAT)
!cm/U
        iret=nf90_def_var(ncid, 'cmU', NF90_FLOAT, (/ dimid(3),dimid(2),dimid(1) /), varid(24))
        iret=nf90_put_att(ncid,varid(24),'standard_name','?')
        iret=nf90_put_att(ncid,varid(24),'units','-')
        iret=nf90_put_att(ncid,varid(24),'_FillValue',NF90_FILL_FLOAT)
!Dt
        iret=nf90_def_var(ncid, 'Dt', NF90_FLOAT, (/ dimid(3),dimid(2),dimid(1) /), varid(25))
        iret=nf90_put_att(ncid,varid(25),'standard_name','?')
        iret=nf90_put_att(ncid,varid(25),'units','degree')
        iret=nf90_put_att(ncid,varid(25),'_FillValue',NF90_FILL_FLOAT)




!
! ... ITYPE = 5 AND OTYPE = 6
!

      ELSE IF (ITYPE.EQ.5 .AND. OTYPE.EQ.6) THEN
!U10
        iret=nf90_def_var(ncid, 'u10m', NF90_FLOAT, (/ dimid(3),dimid(2),dimid(1) /), varid(7))
        iret=nf90_put_att(ncid,varid(7),'standard_name','wind_speed')
        iret=nf90_put_att(ncid,varid(7),'units','m s-1')
        iret=nf90_put_att(ncid,varid(7),'_FillValue',NF90_FILL_FLOAT)
!Dir
        iret=nf90_def_var(ncid, 'udir', NF90_FLOAT, (/ dimid(3),dimid(2),dimid(1) /), varid(8))
        iret=nf90_put_att(ncid,varid(8),'standard_name','wind_from_direction')
        iret=nf90_put_att(ncid,varid(8),'units','degree')
        iret=nf90_put_att(ncid,varid(8),'_FillValue',NF90_FILL_FLOAT)
!Hs
        iret=nf90_def_var(ncid, 'Hs', NF90_FLOAT, (/ dimid(3),dimid(2),dimid(1) /), varid(9))
        iret=nf90_put_att(ncid,varid(9),'standard_name','significant_wave_height') 
        iret=nf90_put_att(ncid,varid(9),'units','m')
        iret=nf90_put_att(ncid,varid(9),'_FillValue',NF90_FILL_FLOAT)
!Tp
        iret=nf90_def_var(ncid, 'Tp', NF90_FLOAT, (/ dimid(3),dimid(2),dimid(1) /), varid(26))
        iret=nf90_put_att(ncid,varid(26),'standard_name','dominant_wave_period')
        iret=nf90_put_att(ncid,varid(26),'units','s')
        iret=nf90_put_att(ncid,varid(26),'_FillValue',NF90_FILL_FLOAT)


      END IF


!  Close netCDF file
      iret=nf90_close(ncid)
      call check_err(iret)


      return


      END SUBROUTINE W3CRNC 


!--------------------------------------------------------------------------
!--------------------------------------------------------------------------

      subroutine check_err(iret)

      USE NETCDF
      implicit none
      
      integer iret

      if (iret .ne. NF90_NOERR) then
         print *, nf90_strerror(iret)
         stop
      endif
      return
      END subroutine check_err

!--------------------------------------------------------------------------
!--------------------------------------------------------------------------


!/
!/ End of W3OUNP ----------------------------------------------------- /
!/
      END PROGRAM W3OUNP
