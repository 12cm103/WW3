!/ ------------------------------------------------------------------- /
      PROGRAM W3OUNP
!/
!/                  +-----------------------------------+
!/                  | WAVEWATCH III           NOAA/NCEP |
!/                  |           F. Ardhuin              |
!/                  |           M. Accensi              |
!/                  |                        FORTRAN 90 |
!/                  | Last update :         16-Jul-2011 |
!/                  +-----------------------------------+
!/
!/    14-Jan-1999 : Final FORTRAN 77                    ( version 1.18 )
!/    21-Jan-2000 : Upgrade to FORTRAN 90               ( version 2.00 )
!/    14-Feb-2000 : Exact nonlinear interactions        ( version 2.01 )
!/    09-Jan-2001 : U* bug fix in tabular output        ( version 2.05 )
!/    25-Jan-2001 : Flat grid version                   ( version 2.06 )
!/    02-Feb-2001 : Xnl version 3.0                     ( version 2.07 )
!/    11-Jun-2001 : Clean up                            ( version 2.11 )
!/    11-Oct-2001 : Clean up, X*, Y* in tables          ( version 2.14 )
!/    13-Nov-2002 : Add stress vector                   ( version 3.00 )
!/    27-Nov-2002 : First version of VDIA and MDIA      ( version 3.01 )
!/    24-Dec-2004 : Multiple grid version.              ( version 3.06 )
!/    17-Apr-2006 : Filter for directional spread.      ( version 3.09 )
!/    23-Jun-2006 : Linear input added.                 ( version 3.09 )
!/    28-Jun-2006 : Adding file name preamble.          ( version 3.09 )
!/    03-Jul-2006 : Separate flux modules.              ( version 3.09 )
!/    28-Oct-2006 : Add partitioning option.            ( version 3.10 )
!/    24-Mar-2007 : Add pars for entire spectrum.       ( version 3.11 )
!/    25-Apr-2007 : Battjes-Janssen Sdb added.          ( version 3.11 )
!/                  (J. H. Alves)
!/    08-Aug-2007 : Creation of buoy log file added     ( version 3.12 )
!/                  (switch O14 -- A. Chawla)
!/    09-Oct-2007 : WAM 4+ Sin and Sds added.           ( version 3.13 )
!/                  (F. Ardhuin)
!/    09-Oct-2007 : Experimental Sbs (BS1) added.       ( version 3.13 )
!/                  (F. Ardhuin)
!/    09-Apr-2008 : Adding an additional output for     ( version 3.12 )
!/                  WMO standard (A. Chawla)
!/    29-Apr-2008 : Adjust format partition output.     ( version 3.14 )
!/    29-May-2009 : Preparing distribution version.     ( version 3.14 )
!/    30-Oct-2009 : Implement run-time grid selection.  ( version 3.14 )
!/                  (W. E. Rogers & T. J. Campbell, NRL)
!/    24-Mar-2011 : Adaptation to NetCDF (M. Accensi)   ( version 4.04 )
!/    16-Jul-2011 : NC3 / NC4 switch     (M. Accensi)   ( version 4.05 )
!/
!/    Copyright 2009 National Weather Service (NWS),
!/       National Oceanic and Atmospheric Administration.  All rights
!/       reserved.  WAVEWATCH III is a trademark of the NWS. 
!/       No unauthorized use without permission.
!/
!  1. Purpose :
!
!     Post-processing of point output.
!
!  2. Method :
!
!     Data is read from the grid output file out_pnt.ww3 (raw data)
!     and from the file ww3_ounp.inp ( NDSI, output requests ).
!     Model definition and raw data files are read using WAVEWATCH III
!     subroutines.
!
!
!  3. Parameters :
!
!  4. Subroutines used :
!
!      Name      Type  Module   Description
!     ----------------------------------------------------------------
!      W3NMOD    Subr. W3GDATMD Set number of model.
!      W3SETG    Subr.   Id.    Point to selected model.
!      W3NDAT    Subr. W3WDATMD Set number of model for wave data.
!      W3SETW    Subr.   Id.    Point to selected model for wave data.
!      W3NAUX    Subr. W3ADATMD Set number of model for aux data.
!      W3SETA    Subr.   Id.    Point to selected model for aux data.
!      W3NOUT    Subr. W3ODATMD Set number of model for output.
!      W3SETO    Subr.   Id.    Point to selected model for output.
!      ITRACE    Subr. W3SERVMD Subroutine tracing initialization.
!      STRACE    Subr.   Id.    Subroutine tracing.
!      NEXTLN    Subr.   Id.    Get next line from input filw
!      EXTCDE    Subr.   Id.    Abort program as graceful as possible.
!      STME21    Subr. W3TIMEMD Convert time to string.
!      TICK21    Subr.   Id.    Advance time.
!      DSEC21    Func.   Id.    Difference between times.
!      W3IOGR    Subr. W3IOGRMD Reading/writing model definition file.
!      W3IOPO    Subr. W3IOPOMD Reading/writing raw point output file.
!      W3EXNC    Subr. Internal Execute point output.
!     ----------------------------------------------------------------
!
!  5. Called by :
!
!     None, stand-alone program.
!
!  6. Error messages :
!
!     Checks on input, checks in W3IOxx.
!
!  7. Remarks :
!
!     - Tables written to file 'tabNN.ww3', where NN is the
!       unit umber (NDSTAB).
!     - Transfer file written to ww3.yymmddhh.spc with multiple
!       spectra and times in file. yymmddhh relates to first
!       output (NDSTAB).
!
!  8. Structure :
!
!     See source code.
!
!  9. Switches :
!
!       !/S    Enable subroutine tracing.
!
!       !/NCO  NCEP NCO modifications for operational implementation.
!
!       !/O14  Buoy log file generation.
!
! 10. Source code :
!
!/ ------------------------------------------------------------------- /
      USE CONSTANTS
!/
!     USE W3GDATMD, ONLY: W3NMOD, W3SETG
      USE W3WDATMD, ONLY: W3SETW, W3NDAT
!/NL1      USE W3ADATMD, ONLY: W3SETA, W3NAUX
      USE W3ODATMD, ONLY: W3SETO, W3NOUT
      USE W3IOGRMD, ONLY: W3IOGR
      USE W3IOPOMD, ONLY: W3IOPO
      USE W3SERVMD, ONLY : ITRACE, NEXTLN, EXTCDE
!/S      USE W3SERVMD, ONLY : STRACE
      USE W3TIMEMD, ONLY: STME21, TICK21, DSEC21, julday
!/
      USE W3GDATMD
      USE W3WDATMD, ONLY: TIME
      USE W3ODATMD, ONLY: NDSE, NDST, NDSO, NOPTS, PTLOC, PTNME,     &
                          DPO, WAO, WDO, ASO, CAO, CDO, SPCO, FNMPRE
!/O14      USE W3ODATMD, ONLY: GRDID
!

      USE NETCDF

      IMPLICIT NONE
      

!/
!/ ------------------------------------------------------------------- /
!/ Local parameters
!/
      INTEGER                 :: NDSI, NDSM, NDSOP,  NDSTRC, NTRACE,  &
                                 IERR, I, TOUT(2), NOUT, TDUM(2),     &
                                 NREQ, ITYPE, OTYPE, NDSTAB, IPOINT,  &
                                 IOTEST, IK, ITH, IOUT, J, DIMXP, K,  &
                                 icode, strl, strl2, FLWW3, NBFILEOUT,&
                                 S8, S5, S4, S3, NBSTATION, NCTYPE
      INTEGER                 :: ISCALE = 0
!/O14      INTEGER                 :: NDBO
!/S      INTEGER, SAVE           :: IENT   = 0
      REAL                    :: DTREQ, SCALE1, SCALE2, DTEST
      REAL                    :: M2KM
      REAL, ALLOCATABLE       :: XPART(:,:)
      LOGICAL                 :: FLFORM, FLSRCE(6)
      LOGICAL, ALLOCATABLE    :: FLREQ(:)
      LOGICAL                 :: TOGETHER

      CHARACTER(16)           :: DATE
      CHARACTER(30)           :: FILEPREFIX
      CHARACTER               :: COMSTR*1, IDTIME*23, IDDDAY*11,      &
                                 TABNME*9, TFNAME*1024, FILETIME*16,   &
                                 attname*120,attval*120

      CHARACTER*25            :: IDSRCE(6)

      REAL(kind=4)            :: DTHD,RTH0
      REAL(kind=4),DIMENSION(:),ALLOCATABLE    :: THD
      integer(kind=4)         :: iyc,imc,idc,ihc,iminc,isc
      CHARACTER*20            :: FORMAT1



!ITYPE=5
      INTEGER               :: ncid
      integer               :: iret
      character(len=1024),ALLOCATABLE   :: ncfile(:)
      integer               :: dimid(7), dimln(5), varid(28)
      character             :: globalAtt*60, startdate*30, stopdate*30



!/
!/ ------------------------------------------------------------------- /
!/
      DATA IDSRCE / 'Spectrum                 ' ,                     &
                    'Wind-wave interactions   ' ,                     &
                    'Nonlinear interactions   ' ,                     &
                    'Dissipation              ' ,                     &
                    'Wave-bottom interactions ' ,                     &
                    'Sum of selected sources  ' /
      FLSRCE = .FALSE.
!
!/NCO/!     CALL W3TAGB('WAVESPEC',1998,0007,0050,'NP21   ')
!
!--- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
! 1.  IO set-up.
!
      CALL W3NMOD ( 1, 6, 6 )
      CALL W3SETG ( 1, 6, 6 )
      CALL W3NDAT (    6, 6 )
      CALL W3SETW ( 1, 6, 6 )
!/NL1      CALL W3NAUX (    6, 6 )
!/NL1      CALL W3SETA ( 1, 6, 6 )
      CALL W3NOUT (    6, 6 )
      CALL W3SETO ( 1, 6, 6 )
!
      NDSI   = 10
      NDSM   = 20
      NDSOP  = 20
!
      NDSTRC =  6
      NTRACE = 10
      CALL ITRACE ( NDSTRC, NTRACE )
!
!/S      CALL STRACE (IENT, 'W3OUNP')
!
!/NCO/!
!/NCO/! Redo according to NCO
!/NCO/!
!/NCO      NDSI   = 11
!/NCO      NDSO   =  6
!/NCO      NDSE   = NDSO
!/NCO      NDST   = NDSO
!/NCO      NDSM   = 12
!/NCO      NDSOP  = 13
!/O14      NDBO   = 14
!/NCO      NDSTRC = NDSO
!
      WRITE (NDSO,900)
!
      J      = LEN_TRIM(FNMPRE)
      OPEN (NDSI,FILE=FNMPRE(:J)//'ww3_ounp.inp',STATUS='OLD',        &
            ERR=800,IOSTAT=IERR)
      READ (NDSI,'(A)',END=801,ERR=802) COMSTR
      IF (COMSTR.EQ.' ') COMSTR = '$'
      WRITE (NDSO,901) COMSTR
!
!--- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
! 2.  Read model definition file.
!
      CALL W3IOGR ( 'READ', NDSM )
      WRITE (NDSO,920) GNAME
!
      IF ( FLAGLL ) THEN
          M2KM = 1.
        ELSE
          M2KM = 1.E-3
        END IF
!
      DIMXP  = ((NK+1)/2) * ((NTH-1)/2)
      ALLOCATE ( XPART(6,0:DIMXP) )
!
!--- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
! 3.  Read general data and first fields from file
!
      CALL W3IOPO ( 'READ', NDSOP, IOTEST )
!
      WRITE (NDSO,930)
      DO I=1, NOPTS
        IF ( FLAGLL ) THEN
            WRITE (NDSO,931) PTNME(I), M2KM*PTLOC(1,I), M2KM*PTLOC(2,I)
          ELSE
            WRITE (NDSO,932) PTNME(I), M2KM*PTLOC(1,I), M2KM*PTLOC(2,I)
          END IF
        END DO
!
      WRITE(DATE,'(I8.8,I6.6)') TIME(1), TIME(2)
      WRITE(FILETIME,'(8A)') DATE(1:4), DATE(5:6), DATE(7:8), 'T', DATE(9:10), 'Z'
!
!--- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
! 4.  Read requests from input file.
!     Output times
!
      CALL NEXTLN ( COMSTR , NDSI , NDSE )
      READ (NDSI,*,END=801,ERR=802) TOUT, DTREQ, NOUT
      DTREQ  = MAX ( 0. , DTREQ )
      IF ( DTREQ.EQ.0 ) NOUT = 1
      NOUT   = MAX ( 1 , NOUT )
!
      CALL STME21 ( TOUT , IDTIME )
      WRITE (NDSO,940) IDTIME
!
      TDUM   = 0
      CALL TICK21 ( TDUM , DTREQ )
      CALL STME21 ( TDUM , IDTIME )
      IF ( DTREQ .GE. 86400. ) THEN
          WRITE (IDDDAY,'(I10,1X)') INT(DTREQ/86400.)
        ELSE
          IDDDAY = '           '
        END IF
      IDTIME(1:11) = IDDDAY
      IDTIME(21:23) = '   '
      WRITE (NDSO,941) IDTIME, NOUT
!
! ... Output points
!

      ALLOCATE ( FLREQ(NOPTS) )
      FLREQ = .FALSE.
      NREQ   = 0
      ALLOCATE (ncfile(NOPTS))
      NBSTATION = 1
!
      DO I=1, NOPTS
        ! reads point index
        CALL NEXTLN ( COMSTR , NDSI , NDSE )
        READ (NDSI,*,END=801,ERR=802) IPOINT
        ! last index
        IF (IPOINT .LT. 0) THEN
          IF (I.EQ.1) THEN
            FLREQ = .TRUE.
            NREQ = NOPTS
          END IF
          EXIT
        END IF
        ! existing index in out_pnt.ww3   
        IF ( (IPOINT .GT. 0) .AND. (IPOINT .LE. NOPTS) ) THEN
          IF ( .NOT. FLREQ(IPOINT) ) NREQ = NREQ + 1
          FLREQ(IPOINT) = .TRUE.
        END IF
      END DO

!
! ... Formats file prefix and date
!
      CALL NEXTLN ( COMSTR , NDSI , NDSE )
      FILEPREFIX= 'ww3.'
      READ (NDSI,*,END=801,ERR=802) FILEPREFIX

!
! S3 defines the number of characters in the date for the filename
!             S3=4-> YYYY, S3=6 -> YYYYMM, S3=10 -> YYYYMMDDTHHZ ...
!
      CALL NEXTLN ( COMSTR , NDSI , NDSE )
      READ (NDSI,*,END=801,ERR=802) S3
 
      !S3.EQ.10 -> default configuration
      IF (S3.LT.4) S3=4 
      IF (S3.GT.10) S3=10 

!
!  S5 is the string length for the time
!
      S5=S3-8
      S4=S3
      IF (S5.GT.0) THEN 
!
! When the time stamp is longer than 8 characters (YYYYMMDD) then 
! add a T after the date and a Z after the hours. 
!
        S4=S4+2
        WRITE(FORMAT1,'(A,I1,A,I1,A)') '(I8.8,A1,I',S5,'.',S5,',A)'
        WRITE (FILETIME,FORMAT1) TIME(1), 'T', &
               NINT(REAL(TIME(2))/NINT(10.**(6-S5))),'Z'
      ELSE IF (S5.EQ.0) THEN
        WRITE(FORMAT1,'(A,I1,A,I1,A)') '(I',S3,'.',S3,')'
        WRITE (FILETIME,FORMAT1) TIME(1)
      ELSE 
        WRITE(FORMAT1,'(A,I1,A,I1,A)') '(I',S3,'.',S3,')'
        WRITE (FILETIME,FORMAT1) NINT(REAL(TIME(1))/NINT(10.**(8-S3)))
        END IF
        


!      IF (S3.EQ.6) THEN 
!        WRITE(FILETIME,'(A)') FILETIME(1:6)  
!      ELSE IF (S3.EQ.4) THEN 
!        WRITE(FILETIME,'(A)') FILETIME(1:4)  
!      END IF
!
! ... Output type
!
      CALL NEXTLN ( COMSTR , NDSI , NDSE )
      READ (NDSI,*,END=801,ERR=802) NCTYPE
      CALL NEXTLN ( COMSTR , NDSI , NDSE )
      READ (NDSI,*,END=801,ERR=802) TOGETHER
      CALL NEXTLN ( COMSTR , NDSI , NDSE )
      READ (NDSI,*,END=801,ERR=802) ITYPE

!
! ... Convert direction unit in degree
!

      ALLOCATE(THD(NTH))
      DTHD=360./NTH
      RTH0=TH(1)/DTH
      DO ITH=1, NTH
        THD(ITH)=DTHD*(RTH0+REAL(ITH-1))
      END DO

!
! ... ITYPE = 4
!
      IF (ITYPE .EQ. 4) THEN
        WRITE (NDSO,942) ITYPE, '1-D and/or 2-D spectra'
        CALL NEXTLN ( COMSTR , NDSI , NDSE )
        READ (NDSI,*,END=801,ERR=802) OTYPE, SCALE1, SCALE2, FLWW3
!
! ... OTYPE = 1
!
        IF (OTYPE .EQ. 1) THEN
          WRITE (NDSO,943) 'print plots'
          IF ( SCALE1 .LT. 0.  ) THEN
            WRITE (NDSO,1940) '1-D'
          ELSE IF ( SCALE1 .EQ. 0.  ) THEN
            WRITE (NDSO,1941) '1-D'
          ELSE
            WRITE (NDSO,1942) '1-D', SCALE1
          END IF
          IF ( SCALE2 .LT. 0.  ) THEN
            WRITE (NDSO,1940) '2-D'
          ELSE IF ( SCALE2 .EQ. 0.  ) THEN
            WRITE (NDSO,1941) '2-D'
          ELSE
            WRITE (NDSO,1942) '2-D', SCALE2
          END IF
!
! ... OTYPE = 2
!
        ELSE IF ( OTYPE .EQ. 2 ) THEN
          WRITE (NDSO,943) 'Table of 1-D spectral data'
          TABNME = 'tab.nc'

          ! Create the netCDF file
          dimln(1)=NF90_UNLIMITED  !time
          dimln(2)=NOPTS ! station
          dimln(3)=16    ! string station name length
          dimln(4)=NK ! freq
          ncfile(1)=trim(FNMPRE(:J)//TABNME)  ! filename
          CALL W3CRNC(ITYPE,OTYPE,NCTYPE,ncfile(1),ncid,dimid,dimln,varid)
!
! ... OTYPE = 3
!
        ELSE IF ( OTYPE .EQ. 3 ) THEN

          IF (TOGETHER) THEN
            NBFILEOUT = 1
            NBSTATION = NREQ
          ELSE
            NBFILEOUT = NOPTS
            NBSTATION = 1
          ENDIF

          DO I=1,NBFILEOUT

            IF (FLREQ(I) .OR. TOGETHER) THEN

              IF (TOGETHER) THEN
                WRITE (TFNAME, '(3A)') trim(FILEPREFIX), trim(FILETIME),'_spec.nc'
              ELSE
                WRITE (TFNAME, '(5A)') trim(FILEPREFIX), trim(PTNME(I)),'_', trim(FILETIME),'_spec.nc'
              END IF
              WRITE (NDSO,943) 'Transfer file'

              J = LEN_TRIM(FNMPRE)
              WRITE (NDSO,1947) trim(TFNAME)

              ! Create the netCDF file
              dimln(1)=NF90_UNLIMITED  !time
              dimln(2)=NBSTATION ! station
              dimln(3)=16    ! string station name length
              dimln(4)=NK ! freq
              dimln(5)=NTH ! dir
              ncfile(I)=trim(FNMPRE(:J)//TFNAME)  ! filename
              CALL W3CRNC(ITYPE,OTYPE,NCTYPE,ncfile(I),ncid,dimid,dimln,varid)

            END IF

          END DO
!
! ... OTYPE = 4
!
        ELSE IF ( OTYPE .EQ. 4 ) THEN
          WRITE (NDSO,943) 'Partitioning of spectra'
          TABNME = 'tab.nc'
          WRITE (NDSO,1947) TABNME

          ! Create the netCDF file
          dimln(1)=NF90_UNLIMITED  !time
          dimln(2)=NBSTATION ! station
          dimln(3)=16    ! string station name length
          dimln(4)=DIMXP ! npart
          ncfile(1)=trim(FNMPRE(:J)//TABNME)  ! filename
          CALL W3CRNC(ITYPE,OTYPE,NCTYPE,ncfile(1),ncid,dimid,dimln,varid)

        ELSE
          WRITE (NDSE,1011) OTYPE
          CALL EXTCDE ( 10 )
        END IF




!
! ... ITYPE = 5
!
      ELSE IF (ITYPE .EQ. 5) THEN
        WRITE (NDSO,942) ITYPE, 'Table of mean wave parameters'
        CALL NEXTLN ( COMSTR , NDSI , NDSE )
        READ (NDSI,*,END=801,ERR=802) OTYPE, FLWW3
        TABNME = 'tab.nc'

        ! Create the netCDF file
        dimln(1)=NF90_UNLIMITED  !time
        dimln(2)=NBSTATION ! station
        dimln(3)=16    ! string station name length
        ncfile(1)=trim(FNMPRE(:J)//TABNME)  ! filename
        CALL W3CRNC(ITYPE,OTYPE,NCTYPE,ncfile(1),ncid,dimid,dimln,varid)
!
! ... OTYPE = 1
!
        IF ( OTYPE .EQ. 1 ) THEN
          WRITE (NDSO,2940) 'depth, current and wind', TABNME
!
! ... OTYPE = 2
!
        ELSE IF ( OTYPE .EQ. 2 ) THEN
          WRITE (NDSO,2940) 'Mean wave parameters', TABNME
!
! ... OTYPE = 3
!
        ELSE IF ( OTYPE .EQ. 3 ) THEN
          WRITE (NDSO,2940) 'Nondimensional parameters (U*)', TABNME
!
! ... OTYPE = 4
!
        ELSE IF ( OTYPE .EQ. 4 ) THEN
          WRITE (NDSO,2940) 'Nondimensional parameters (U10)', TABNME
!
! ... OTYPE = 5
!
        ELSE IF ( OTYPE .EQ. 5 ) THEN
          WRITE (NDSO,2940) 'Validation parameters', TABNME
!
! ... OTYPE = 6
!
        ELSE IF ( OTYPE .EQ. 6 ) THEN
          WRITE (NDSO,2940) 'WMO standard mean parameters', TABNME
!
! ... OTYPE = ILLEGAL
!
        ELSE
          WRITE (NDSE,1011) OTYPE
          CALL EXTCDE ( 20 )
        END IF

!
! ... ITYPE = ILLEGAL
!
      ELSE
        WRITE (NDSE,1010) ITYPE
        CALL EXTCDE ( 1 )
!
      END IF
!
! ... Output of output points
!
      WRITE (NDSO,950) NREQ
      DO I=1, NOPTS
        IF (FLREQ(I)) THEN
            IF ( FLAGLL ) THEN
                WRITE (NDSO,951) PTNME(I), M2KM*PTLOC(1,I),   &
                                           M2KM*PTLOC(2,I)
              ELSE
                WRITE (NDSO,953) PTNME(I), M2KM*PTLOC(1,I),   &
                                           M2KM*PTLOC(2,I)
              END IF
          END IF
        END DO
!
!--- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
! 5.  Time management.
!
      IF ((ITYPE.EQ.4) .AND. (OTYPE.EQ.3)) THEN
        IF (TOGETHER) THEN
          NBFILEOUT = 1
        ELSE
          NBFILEOUT = NOPTS
        ENDIF
      ELSE
        NBFILEOUT = 1
      END IF
!
      IOUT   = 0
      iyc=TIME(1)/10000
      imc=(TIME(1)-iyc*10000)/100
      idc=TIME(1)-iyc*10000-100*imc
      ihc=TIME(2)/10000
      iminc=(TIME(2)-ihc*10000)/100
      isc=TIME(2)-ihc*10000-100*iminc
      WRITE(startdate,'(I4.4,A,5(I2.2,A))') iyc,'-',imc,'-',idc,'T',ihc,':',iminc,':',isc,'Z'
!
      DO
        DTEST  = DSEC21 ( TIME , TOUT )
        IF ( DTEST .GT. 0. ) THEN
          CALL W3IOPO ( 'READ', NDSOP, IOTEST )
          IF ( IOTEST .EQ. -1 ) THEN
            WRITE (NDSO,949)
            GOTO 700
          END IF
          CYCLE
        END IF
        IF ( DTEST .LT. 0. ) THEN
          CALL TICK21 ( TOUT , DTREQ )
          CYCLE
        END IF
!
        IOUT   = IOUT + 1
        CALL STME21 ( TOUT , IDTIME )
        IF ( ( ITYPE.EQ.4 .AND. OTYPE.EQ.1 ).OR.( ITYPE.EQ.3 .AND. OTYPE.EQ.1 )) THEN
          WRITE (NDSO,960) IDTIME
        END IF

        IF ( (ITYPE.EQ.4) .AND. (OTYPE.EQ.3) ) THEN 
          DO I=1,NBFILEOUT
           IF (FLREQ(I) .OR. TOGETHER) THEN
              CALL W3EXNC(I)
            END IF
          END DO
        ELSE
            CALL W3EXNC(1)
        END IF

        CALL TICK21 ( TOUT , DTREQ )
        IF ( IOUT .GE. NOUT ) GOTO 700
        END DO
!
      GOTO 888


!
! Write Global attributes to netCDF file
!
  700 CONTINUE

      iyc=TIME(1)/10000
      imc=(TIME(1)-iyc*10000)/100
      idc=TIME(1)-iyc*10000-100*imc
      ihc=TIME(2)/10000
      iminc=(TIME(2)-ihc*10000)/100
      isc=TIME(2)-ihc*10000-100*iminc
      WRITE(stopdate,'(I4.4,A,5(I2.2,A))') iyc,'-',imc,'-',idc,'T',ihc,':',iminc,':',isc,'Z' 


      IF ((ITYPE.EQ.4) .AND. (OTYPE.EQ.3)) THEN
        IF (TOGETHER) THEN
          NBFILEOUT = 1
        ELSE
          NBFILEOUT = NOPTS
        ENDIF

        DO I=1,NBFILEOUT

          IF ( FLREQ(I) .OR. TOGETHER ) THEN

            iret=nf90_open(ncfile(I), NF90_WRITE, ncid)
            call check_err(iret)
            iret=nf90_redef(ncid)
            IF (FLWW3.EQ.0)                                      &
              OPEN(unit=994,file='NC_globatt.inp',status='old',iostat=icode)
            rewind(994)
            IF (ICODE.EQ.0) THEN
              DO WHILE (icode.EQ.0)
                read(994,'(a)',iostat=icode) attname
                read(994,'(a)',iostat=icode) attval
                IF (ICODE.EQ.0) THEN
                  strl=LEN_TRIM(attname)
                  strl2=LEN_TRIM(attval)
                  iret=nf90_put_att(ncid,NF90_GLOBAL,attname(1:strl),attval(1:strl2))
                END IF
              END DO
            END IF
            close(994)
            
            write(globalAtt,'(A)') TRIM(ncfile(I))
            iret=nf90_put_att(ncid,NF90_GLOBAL,'product_name' ,globalAtt(3:))
            iret=nf90_put_att(ncid,NF90_GLOBAL,'area',TRIM(GNAME))
            iret=nf90_put_att(ncid,NF90_GLOBAL,'data_type','OCO spectra 2D')
            iret=nf90_put_att(ncid,NF90_GLOBAL,'format_version','1.1')
            write(globalAtt,'(F12.7)') MINVAL(PTLOC(2,:))
            iret=nf90_put_att(ncid,NF90_GLOBAL,'southernmost_latitude',adjustl(trim(globalAtt)//"°"))
            write(globalAtt,'(F12.7)') MAXVAL(PTLOC(2,:))
            iret=nf90_put_att(ncid,NF90_GLOBAL,'northernmost_latitude',adjustl(trim(globalAtt)//"°"))
            iret=nf90_put_att(ncid,NF90_GLOBAL,'latitude_resolution','n/a')
            write(globalAtt,'(F12.7)') MINVAL(PTLOC(1,:))
            iret=nf90_put_att(ncid,NF90_GLOBAL,'westernmost_longitude',adjustl(trim(globalAtt)//"°"))
            write(globalAtt,'(F12.7)') MAXVAL(PTLOC(1,:))
            iret=nf90_put_att(ncid,NF90_GLOBAL,'easternmost_longitude',adjustl(trim(globalAtt)//"°"))
            iret=nf90_put_att(ncid,NF90_GLOBAL,'longitude_resolution','n/a')
            iret=nf90_put_att(ncid,NF90_GLOBAL,'minimum_altitude','n/a')
            iret=nf90_put_att(ncid,NF90_GLOBAL,'maximum_altitude','n/a')
            iret=nf90_put_att(ncid,NF90_GLOBAL,'altitude_resolution','n/a')
            iret=nf90_put_att(ncid,NF90_GLOBAL,'start_date',startdate)
            iret=nf90_put_att(ncid,NF90_GLOBAL,'stop_date',stopdate)
            IF (DTREQ.EQ.3600)  THEN
                iret=nf90_put_att(ncid,NF90_GLOBAL,'field_type','hourly')
              ELSE IF (DTREQ.EQ.7200)  THEN
                iret=nf90_put_att(ncid,NF90_GLOBAL,'field_type','2-hourly')
              ELSE IF (DTREQ.EQ.10800)  THEN
                iret=nf90_put_att(ncid,NF90_GLOBAL,'field_type','3-hourly')
              ELSE IF (DTREQ.EQ.21600)  THEN
                iret=nf90_put_att(ncid,NF90_GLOBAL,'field_type','6-hourly')
              ELSE IF (DTREQ.EQ.32400)  THEN
                iret=nf90_put_att(ncid,NF90_GLOBAL,'field_type','9-hourly')
              ELSE IF (DTREQ.EQ.43200)  THEN
                iret=nf90_put_att(ncid,NF90_GLOBAL,'field_type','12-hourly')
              ELSE IF (DTREQ.EQ.86400)  THEN
                iret=nf90_put_att(ncid,NF90_GLOBAL,'field_type','daily')
              ELSE  
                iret=nf90_put_att(ncid,NF90_GLOBAL,'field_type','n/a')
              END IF


            ! Close netCDF file
            iret=nf90_enddef(ncid)
            iret=nf90_close(ncid)
            call check_err(iret)

          END IF
        END DO
      END IF

      GOTO 888


!
! Escape locations read errors :
!
  800 CONTINUE
      WRITE (NDSE,1000) IERR
      CALL EXTCDE ( 40 )
!
  801 CONTINUE
      WRITE (NDSE,1001)
      CALL EXTCDE ( 41 )
!
  802 CONTINUE
      WRITE (NDSE,1002) IERR
      CALL EXTCDE ( 42 )
!
  803 CONTINUE
      WRITE (NDSE,1003) IERR
      CALL EXTCDE ( 43 )
!
  804 CONTINUE
      WRITE (NDSE,1004) IERR
      CALL EXTCDE ( 44 )
!
!/O14  805 CONTINUE
!/O14      WRITE (NDSE,1005) IERR
!/O14      CALL EXTCDE ( 45 )
!
  888 CONTINUE
!
      WRITE (NDSO,999)
!
!/NCO/!     CALL W3TAGE('WAVESPEC')
!
! Formats
!
  900 FORMAT (/15X,'    *** WAVEWATCH III Point output post.***    '/ &
               15X,'==============================================='/)
  901 FORMAT ( '  Comment character is ''',A,''''/)
!
  920 FORMAT ( '  Grid name : ',A/)
!
  930 FORMAT ( '  Points in file : '/                                 &
               ' ------------------------------------')
  931 FORMAT ( '      ',A,2F10.2)
  932 FORMAT ( '      ',A,2(F8.1,'E3'))
!
  940 FORMAT (/'  Output time data : '/                               &
               ' --------------------------------------------------'/ &
               '      First time         : ',A)
  941 FORMAT ( '      Interval           : ',A/                       &
               '      Number of requests : ',I4)
  942 FORMAT (/'  Output type ',I2,' :'/                              &
               ' --------------------------------------------------'/ &
               '      ',A/)
  943 FORMAT ( '      Subtype   : ',A)
  944 FORMAT ( '                  ',A)
!/O14   945 FORMAT ( '      ',I5,3X,A,2F10.2,3X,A)
  948 FORMAT ( '      Data for ',A)
  949 FORMAT (/'      End of file reached '/)
!
  950 FORMAT (/'  Requested output for',I3,' points : '/              &
               ' --------------------------------------------------')
  951 FORMAT ( '      ',A,2F10.2)
  953 FORMAT ( '      ',A,2(F8.1,'E3'))
  952 FORMAT (/'  Output times :'/                                    &
               ' --------------------------------------------------')
!
 1940 FORMAT ( '      ',A,' print plots not requested.')
 1941 FORMAT ( '      ',A,' print plots normalized.')
 1942 FORMAT ( '      Scale factor ',A,' spectrum : ',E10.3)
 1943 FORMAT ( '      File name : ',A,' (',A,')')
 1944 FORMAT ('''',A,'''',1X,3I6,1X,'''',A,'''')
 1945 FORMAT (8E10.3)
 1946 FORMAT (7E11.3)
 1947 FORMAT ( '      File name : ',A)
!
 2940 FORMAT ( '      Table output : ',A/                             &
               '      File name    : ',A)
!
 3940 FORMAT ( '                        ',A)
 3941 FORMAT ( '      File name : ',A)
 3943 FORMAT ( '      File name : ',A,' (',A,')')
 3944 FORMAT ('''',A,'''',1X,3I6,6L2)
 3945 FORMAT (8E10.3)
 3946 FORMAT (7E11.3)
!
  960 FORMAT (//'  Output for ',A/                                    &
               ' --------------------------------------------------')
!
  999 FORMAT (/'  End of program '/                                   &
               ' ========================================='/          &
               '         WAVEWATCH III Point output '/)
!
 1000 FORMAT (/' *** WAVEWATCH III ERROR IN W3OUNP : '/               &
               '     ERROR IN OPENING INPUT FILE'/                    &
               '     IOSTAT =',I5/)
!
 1001 FORMAT (/' *** WAVEWATCH III ERROR IN W3OUNP : '/               &
               '     PREMATURE END OF INPUT FILE'/)
!
 1002 FORMAT (/' *** WAVEWATCH III ERROR IN W3OUNP : '/               &
               '     ERROR IN READING FROM INPUT FILE'/               &
               '     IOSTAT =',I5/)
!
 1003 FORMAT (/' *** WAVEWATCH III ERROR IN W3OUNP : '/               &
               '     ERROR IN OPENING TABLE FILE'/                    &
               '     IOSTAT =',I5/)
!
 1004 FORMAT (/' *** WAVEWATCH III ERROR IN W3OUNP : '/               &
               '     ERROR IN OPENING IDL FILE'/                      &
               '     IOSTAT =',I5/)
!
!/O14 1005 FORMAT (/' *** WAVEWATCH III ERROR IN W3OUNP : '/          &
!/O14               '     ERROR IN OPENING BUOY LOG FILE'/            &
!/O14               '     IOSTAT =',I5/)
!
 1010 FORMAT (/' *** WAVEWATCH III ERROR IN W3OUNP : '/               &
               '     ILLEGAL TYPE, ITYPE =',I4/)
!
 1011 FORMAT (/' *** WAVEWATCH III ERROR IN W3OUNP : '/               &
               '     ILLEGAL TYPE, OTYPE =',I4/)
!/
!/ Internal subroutine W3EXNC ---------------------------------------- /
!/
      CONTAINS
!/ ------------------------------------------------------------------- /
      SUBROUTINE W3EXNC(I)
!/
!/                  +-----------------------------------+
!/                  | WAVEWATCH III           NOAA/NCEP |
!/                  |            F. Ardhuin             |
!/                  |            M. Accensi             |
!/                  |                        FORTRAN 90 |
!/                  | Last update :         24-Mar-2011 |
!/                  +-----------------------------------+
!/
!/    08-Jun-1999 : Final FORTRAN 77                    ( version 1.18 )
!/    21-Jan-2000 : Upgrade to FORTRAN 90               ( version 2.00 )
!/                  Massive changes to logistics
!/    09-Jan-2001 : U* bug fix in tabular output        ( version 2.05 )
!/    25-Jan-2001 : Flat grid version                   ( version 2.06 )
!/    02-Feb-2001 : Xnl version 3.0                     ( version 2.07 )
!/    11-Jun-2001 : Clean up                            ( version 2.11 )
!/    11-Oct-2001 : Clean up, X*, Y* in tables          ( version 2.14 )
!/    24-Dec-2004 : Multiple grid version.              ( version 3.06 )
!/    17-Apr-2006 : Filter for directional spread.      ( version 3.09 )
!/    23-Jun-2006 : Linear input added.                 ( version 3.09 )
!/    03-Jul-2006 : Separate flux modules.              ( version 3.09 )
!/    28-Oct-2006 : Add partitioning option.            ( version 3.10 )
!/    24-Mar-2007 : Add pars for entire spectrum.       ( version 3.11 )
!/    25-Apr-2007 : Battjes-Janssen Sdb added.          ( version 3.11 )
!/                  (J. H. Alves)
!/    09-Oct-2007 : WAM 4+ Sin and Sds added.           ( version 3.13 )
!/                  (F. Ardhuin)
!/    09-Oct-2007 : Experimental Sbs (BS1) added.       ( version 3.13 )
!/                  (F. Ardhuin)
!/    09-Apr-2008 : Adding an additional output for     ( version 3.12 )
!/                  WMO standard (A. Chawla)
!/    29-Apr-2008 : Adjust format partition output.     ( version 3.14 )
!/
!  1. Purpose :
!
!     Perform actual point output.
!
!  3. Parameters :
!
!  4. Subroutines used :
!
!      Name      Type  Module   Description
!     ----------------------------------------------------------------
!      W3SPRn    Subr. W3SRCnMD Mean wave parameters for use in
!                               source terms.
!      W3FLXn    Subr. W3FLXnMD Flux/stress computation.
!      W3SLNn    Subr. W3SLNnMD Linear input.
!      W3SINn    Subr. W3SRCnMD Input source term.
!      W3SDSn    Subr. W3SRCnMD Whitecapping source term
!      W3SNLn    Subr. W3SNLnMD Nonlinear interactions.
!      W3SBTn    Subr. W3SBTnMD Bottom friction source term.
!      W3SDBn    Subr. W3SBTnMD depth induced breaking source term.
!      W3STRn    Subr. W3STRnMD Triad interaction source term.
!      W3SBSn    Subr. W3SBSnMD Bottom scattering source term.
!      W3SXXn    Subr. W3SXXnMD Unclassified source term.
!      W3PART    Sunr. W3PARTMD Spectral partitioning routine.
!      STRACE    Subr. W3SERVMD Subroutine tracing.
!      STME21    Subr. W3TIMEMD Convert time to string.
!      PRT1DS    Subr. W3ARRYMD Print plot of 1-D spectrum.
!      PRT1DM    Subr.   Id.    Print plot of several 1-D spectra.
!      PRT2DS    Subr.   Id.    Print plot of 2-D spectrum.
!      WAVNU1    Subr. W3DISPMD Solve dispersion relation.
!     ----------------------------------------------------------------
!
!  5. Called by :
!
!     Main program in which it is contained,
!
!  6. Error messages :
!
!     None.
!
!  7. Remarks :
!
!     - Spectra are relative frequency energy spectra.
!     - Note that arrays CX and CY of the main program now contain
!       the absolute sea water speed and direction respectively.
!
!  8. Structure :
!
!     See source code.
!
!  9. Switches :
!
!       !/S      Enable subroutine tracing.
!       !/T      Enable test output.
!
!       !/FLXx   Flux/stress computation.
!       !/LNx    Linear input package
!       !/STx    Source term package
!       !/NLx    Nonlinear interaction package
!       !/BTx    Bottom friction package
!       !/DBx    depth-induced breaking package
!       !/TRx    Triad interaction package
!       !/BSx    Bottom scattering package
!       !/XXx    Arbitrary adittional source term package
!
!       !/STAB2  Stability correction for !/ST2
!
! 10. Source code :
!
!/ ------------------------------------------------------------------- /
!/FLX1      USE W3FLX1MD
!/FLX2      USE W3FLX2MD
!/FLX3      USE W3FLX3MD
!/LN1      USE W3SLN1MD
!/LNX      USE W3SLNXMD
!/ST1      USE W3SRC1MD
!/ST2      USE W3SRC2MD
!/ST3      USE W3SRC3MD
!/ST4      USE W3SRC4MD
!/STX      USE W3SRCXMD
!/NL1      USE W3SNL1MD
!/NL2      USE W3SNL2MD
!/NLX      USE W3SNLXMD
!/BT1      USE W3SBT1MD
!/BTX      USE W3SBTXMD
!/DB1      USE W3SDB1MD
!/DBX      USE W3SDBXMD
!/TRX      USE W3STRXMD
!/BS1      USE W3SBS1MD
!/BSX      USE W3SBSXMD
!/XXX      USE W3SXXXMD
      USE W3PARTMD, ONLY: W3PART
      USE W3DISPMD, ONLY: WAVNU1
!/
      USE W3ARRYMD, ONLY: PRT1DS, PRT2DS, PRT1DM
      USE W3DISPMD, ONLY: NAR1D, DFAC, N1MAX, ECG1, EWN1, DSIE
      USE NETCDF

      IMPLICIT NONE

!/
!/ ------------------------------------------------------------------- /

    INTEGER, INTENT(IN)       :: I



!/ Local parameters
!/
      INTEGER                 :: J, J1, I1, I2, ISP, IKM, IKL, IKH, ITH,  &
                                 IK, IH, IM, IS, IYR, IMTH, IDY, ITT, &
                                 NPART, IX, IY
      INTEGER, SAVE           :: IPASS  = 0
!/S      INTEGER, SAVE           :: IENT   = 0
      REAL                    :: depth, SQRTH, CDIR, SIX, R1, R2,     &
                                 UDIR, UDIRR, UABS, XL, XH, XL2, XH2, &
                                 ET, EWN, ETR, ETX, ETY, EBND, EBX,   &
                                 EBY, HSIG, WLEN, TMEAN, THMEAN,      &
                                 THSPRD, EMAX, EL, EH, DENOM, FP, THP,&
                                 SPP, CD, USTAR, FACTOR, UNORM, ESTAR,&
                                 FPSTAR, FACF, FACE, FACS, HMAT, WNA, &
                                 XYZ, AGE1, AFR, AGE2, FACT, XSTAR,   &
                                 YSTAR, FHIGH, ZWND, Z0, USTD, EMEAN, &
                                 FMEAN, WNMEAN, UDIRCA, CHARN, M2KM
      LOGICAL                 :: LASTSTATION=.FALSE.
!/ST1      REAL                    :: AMAX, FH1, FH2
!/ST2      REAL                    :: AMAX, ALPHA(NK), FPI
!/ST3      REAL                    :: AMAX, FMEANS, FMEANWS, TAUWX, TAUWY, &
!/ST3                                 TAUWNX, TAUWNY
!/ST4      REAL                    :: AMAX, FMEANS, FMEANWS, TAUWX, TAUWY, &
!/ST4                                 TAUWNX, TAUWNY, FMEAN1
!/BS1      REAL                    :: TAUSCX, TAUSCY
           REAL                    :: ICE
!/STAB2      REAL                    :: STAB0, STAB,  COR1, COR2, ASFAC,     &
!/STAB2                                 THARG1, THARG2
      REAL, SAVE              :: HSMIN  = 0.05
      REAL                    :: WN(NK), CG(NK)
      REAL                    :: E(NK,NTH), E1(NK), APM(NK),          &
                                 THBND(NK), SPBND(NK), A(NTH,NK),     &
                                 WN2(NTH,NK)
      REAL                    :: DIA(NTH,NK), SWN(NK,NTH), SNL(NK,NTH),&
                                 SDS(NK,NTH), SBT(NK,NTH), XLN(NTH,NK),&
                                 XIN(NTH,NK), XNL(NTH,NK), XTR(NTH,NK),&
                                 XDS(NTH,NK), XDB(NTH,NK), XBT(NTH,NK),&
                                 XBS(NTH,NK), XXX(NTH,NK), STT(NK,NTH)
      REAL                    :: SIN1(NK), SNL1(NK), SDS1(NK),         &
                                 SBT1(NK), STT1(NK), E1ALL(NK,5)
!/ST3      LOGICAL                 :: LLWS(NSPEC)
!/ST4      LOGICAL                 :: LLWS(NSPEC)
      CHARACTER               :: DTME21*23
      CHARACTER*4             :: VAR1(5)
!
      DATA VAR1   / 'Sin ' , 'Snl ', 'Sds ' , 'Sbt ' , 'Stot' /



      real(kind=8)         :: ncDaysOffset,timenc,Jday0
      integer(kind=4)      :: iyc,imc,idc,ihc,iminc,isc

    



!/
!/ ------------------------------------------------------------------- /
!/
! 1. Initialisations
!
!/S      CALL STRACE (IENT, 'W3EXNC')
!
      IF ( FLAGLL ) THEN
          M2KM   = 1.
        ELSE
          M2KM   = 1.E-3
        END IF
!
      XL     = 1./XFR - 1.
      XH     =  XFR - 1.
      XL2    = XL**2
      XH2    = XH**2
      IPASS  = IPASS + 1
!

!
!/T      WRITE (NDST,9000) (FLREQ(J),J=1,NOPTS)
!/T      WRITE (NDST,9001) ITYPE, OTYPE, NREQ, SCALE1, SCALE2, FLSRCE

!
!--- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
!     Loop over output points.
!



!
! Selects first station index 
!
    IF (TOGETHER) THEN
      J=1
    ELSE
      J=I
    END IF

    J1=1
    LASTSTATION=.FALSE.

    iret=nf90_open(ncfile(J), NF90_WRITE, ncid)
    call check_err(iret)

    DO WHILE (.NOT.LASTSTATION)
!
      IF ( FLREQ(J) ) THEN
!
!  Open netCDF file
!
!/T            WRITE (NDST,9002) PTNME(J)
!
! 2. Calculate grid parameters using and inlined version of WAVNU1.
!
        depth  = MAX ( DMIN, DPO(J) )
        SQRTH  = SQRT ( depth )
        UDIR   = MOD ( 270. - WDO(J)*RADE , 360. )
        UDIRCA = WDO(J)*RADE
        UDIRR  = WDO(J)
        UABS   = MAX ( 0.001 , WAO(J) )
        CDIR   = MOD ( 270. - CDO(J)*RADE , 360. )
!
!/STAB2            STAB0  = ZWIND * GRAV / 273.
!/STAB2            STAB   = STAB0 * ASO(J) / MAX(5.,WAO(J))**2
!/STAB2            STAB   = MAX ( -1. , MIN ( 1. , STAB ) )
!/STAB2            THARG1 = MAX ( 0. , FFNG*(STAB-OFSTAB))
!/STAB2            THARG2 = MAX ( 0. , FFPS*(STAB-OFSTAB))
!/STAB2            COR1   = CCNG * TANH(THARG1)
!/STAB2            COR2   = CCPS * TANH(THARG2)
!/STAB2            ASFAC  = SQRT ( (1.+COR1+COR2)/SHSTAB )
!
!/T            WRITE (NDST,9010) depth
        DO IK=1, NK
          SIX    = SIG(IK) * SQRTH
          I1     = INT(SIX/DSIE)
          IF (I1.LE.N1MAX) THEN
              I2 = I1 + 1
              R1 = SIX/DSIE - REAL(I1)
              R2 = 1. - R1
              WN(IK) = ( R2*EWN1(I1) + R1*EWN1(I2) ) / depth
              CG(IK) = ( R2*ECG1(I1) + R1*ECG1(I2) ) * SQRTH
            ELSE
              WN(IK) = SIG(IK)*SIG(IK)/GRAV
              CG(IK) = 0.5 * GRAV / SIG(IK)
            END IF
!/T              WRITE (NDST,9011) IK, TPI/SIG(IK), WN(IK), CG(IK)
!
          END DO
!
! 3.  Prepare spectra etc.
! 3.a Mean wave parameters.
!
        ET     = 0.
        EWN    = 0.
        ETR    = 0.
        ETX    = 0.
        ETY    = 0.
        DO IK=1, NK
          EBND   = 0.
          EBX    = 0.
          EBY    = 0.
          DO ITH=1, NTH
            ISP    = ITH + (IK-1)*NTH
            E(IK,ITH) = SPCO(ISP,J)
            EBND   = EBND + SPCO(ISP,J)
            EBX    = EBX  + SPCO(ISP,J)*ECOS(ITH)
            EBY    = EBY  + SPCO(ISP,J)*ESIN(ITH)
            END DO
          E1(IK) = EBND * DTH
          APM(IK)= E1(IK) / ( TPI * GRAV**2 / SIG(IK)**5  )
          IF ( E1(IK) .GT. 1.E-5) THEN
              THBND(IK) = MOD(630.- RADE*ATAN2(EBY,EBX),360.)
              SPBND(IK) = RADE * SQRT ( MAX ( 0. , 2.*( 1. -      &
                SQRT( MAX(0.,(EBX**2+EBY**2)/EBND**2) ) ) ) )
            ELSE
              THBND(IK) = -999.9
              SPBND(IK) = -999.9
            END IF
          EBND   = E1(IK) * DSII(IK) * TPIINV
          ET     = ET  + EBND
          EWN    = EWN + EBND / WN(IK)
          ETR    = ETR + EBND / SIG(IK)
          ETX    = ETX + EBX * DSII(IK)
          ETY    = ETY + EBY * DSII(IK)
          END DO
!
! tail factors for radian action etc ...!
!
        EBND   = E1(NK) * TPIINV / ( SIG(NK) * DTH )
        ET     = ET  + FTE *EBND
        EWN    = EWN + FTWL*EBND
        ETR    = ETR + FTTR*EBND
        ETX    = DTH*ETX*TPIINV + FTE*EBX*TPIINV/SIG(NK)
        ETY    = DTH*ETY*TPIINV + FTE*EBY*TPIINV/SIG(NK)
!
        HSIG   = 4. * SQRT ( ET )
        IF ( HSIG .GT. HSMIN ) THEN
            WLEN   = EWN / ET * TPI
            TMEAN  = ETR / ET * TPI
            THMEAN = MOD ( 630. - RADE*ATAN2(ETY,ETX) , 360. )
            THSPRD = RADE * SQRT ( MAX ( 0. , 2.*( 1. - SQRT(     &
                       MAX(0.,(ETX**2+ETY**2)/ET**2) ) ) ) )
            IF ( THSPRD .LT. 0.01*RADE*DTH ) THSPRD = 0.
          ELSE
            WLEN   = 0.
            TMEAN  = 0.
            THMEAN = 0.
            THSPRD = 0.
            DO IK=1, NK
              E1(IK) = 0.
              DO ITH=1, NTH
                E(IK,ITH) = 0.
              END DO
            END DO
          END IF
!
! 3.b peak frequency
!
        EMAX   = E1(NK)
        IKM    = NK
!
        DO IK=NK-1, 1, -1
          IF ( E1(IK) .GT. EMAX ) THEN
              EMAX   = E1(IK)
              IKM    = IK
            END IF
          END DO
!
        IKL    = MAX (  1 , IKM-1 )
        IKH    = MIN ( NK , IKM+1 )
        EL     = E1(IKL) - E1(IKM)
        EH     = E1(IKH) - E1(IKM)
        DENOM  = XL*EH - XH*EL
!
        IF ( HSIG .GE. HSMIN ) THEN
            FP     = SIG(IKM) * ( 1. + 0.5 * ( XL2*EH - XH2*EL )  &
                        / SIGN ( MAX(ABS(DENOM),1.E-15) , DENOM ) )
            THP    = THBND(IKM)
            SPP    = SPBND(IKM)
            IF ( SPP .LT. 0.01*RADE*DTH ) SPP = 0.
          ELSE
            FP     = 0.
            THP    = 0.
            SPP    = 0.
          END IF
!
! 3.c spectral partitioning
!
        IF ( ITYPE.EQ.4 .AND. OTYPE.EQ.4 ) THEN
           CALL W3PART( E, UABS, UDIRCA, depth, WN, NPART, XPART, DIMXP )
        END IF
!
! 3.d nondimensional parameters
!
        IF ( ( ITYPE.EQ.5 .AND. (OTYPE.EQ.3.OR.OTYPE.EQ.4) ) .OR. &
             ( ITYPE.EQ.4 .AND. (OTYPE.EQ.2) ) ) THEN
!
            DO IK=1, NK
              FACTOR = TPIINV * CG(IK) / SIG(IK)
              DO ITH=1, NTH
                ISP    = ITH + (IK-1)*NTH
                A(ITH,IK)   = FACTOR * SPCO(ISP,J)
                WN2(ITH,IK) = WN(IK)
                END DO
              END DO
!
!/STAB2                UABS   = UABS / ASFAC
!
!/ST0                ZWND   = 10.
!/ST1                ZWND   = 10.
!/ST2                ZWND   = ZWIND
!/ST3                ZWND   = ZZWND
!/ST3                TAUWX  = 0.
!/ST3                TAUWY  = 0.
!/ST3                LLWS(:)  = .TRUE.
!/ST4                LLWS(:)  = .TRUE.
!/ST4                ZWND   = ZZWND
!/ST4                TAUWX  = 0.
!/ST4                TAUWY  = 0.
!
!/ST1                CALL W3SPR1 (A, CG, WN, EMEAN, FMEAN, WNMEAN, AMAX)
!/ST1                FP     = 0.85 * FMEAN
!/ST2                CALL W3SPR2 (A, CG, WN, depth, FP , UABS, USTAR, &
!/ST2                             EMEAN, FMEAN, WNMEAN, AMAX, ALPHA, FP )
!/ST3                CALL W3SPR3 (A, CG, WN, EMEAN, FMEAN, FMEANS,       &
!/ST3                             WNMEAN, AMAX, UABS, UDIRR, USTAR, USTD,&
!/ST3                             TAUWX, TAUWY, CD, Z0, CHARN, LLWS, FMEANWS )
!/ST4                CALL W3SPR4 (A, CG, WN, EMEAN, FMEAN, FMEAN1,         &
!/ST4                             WNMEAN, AMAX, UABS, UDIRR, USTAR, USTD,&
!/ST4                             TAUWX, TAUWY, CD, Z0, CHARN, LLWS, FMEANWS )

!/FLX1                CALL W3FLX1 ( ZWND, UABS, UDIRR,                   &
!/FLX1                              USTAR, USTD, Z0, CD )
!/FLX2                CALL W3FLX2 ( ZWND, depth, FP, UABS, UDIRR,        &
!/FLX2                                          USTAR, USTD, Z0, CD )
!/FLX3                CALL W3FLX3 ( ZWND, depth, FP, UABS, UDIRR,        &
!/FLX3                                          USTAR, USTD, Z0, CD )
!
            DO ITT=1, 3
!/ST2                  CALL W3SIN2 (A, CG, WN2, UABS, UDIRR, CD, Z0,    &
!/ST2                                                 FPI, XIN, DIA )
!/ST2                  CALL W3SPR2 (A, CG, WN, depth, FPI, UABS, USTAR, &
!/ST2                               EMEAN, FMEAN, WNMEAN, AMAX, ALPHA, FP )
!/ST3                  IX=1
!/ST3                  IY=1
!/ST3                  CALL W3SIN3 ( A, CG, WN2, UABS, USTAR, DAIR/DWAT,&
!/ST3                               ASO(J), UDIRR, Z0, CD, TAUWX, TAUWY,&
!/ST3                               TAUWNX, TAUWNY, ICE, XIN, DIA, LLWS, IX, IY )
!/ST3                  CALL W3SPR3 (A, CG, WN, EMEAN, FMEAN, FMEANS,       &
!/ST3                             WNMEAN, AMAX, UABS, UDIRR, USTAR, USTD,&
!/ST3                             TAUWX, TAUWY, CD, Z0, CHARN, LLWS, FMEANWS )
!/ST4                  IX=1
!/ST4                  IY=1
!/ST4                  CALL W3SIN4 ( A, CG, WN2, UABS, USTAR, DAIR/DWAT,&
!/ST4                               ASO(J), UDIRR, Z0, CD, TAUWX, TAUWY,&
!/ST4                               TAUWNX, TAUWNY, ICE, XIN, DIA, LLWS, IX, IY )
!/ST4                  CALL W3SPR4 (A, CG, WN, EMEAN, FMEAN, FMEAN1,       &
!/ST4                             WNMEAN, AMAX, UABS, UDIRR, USTAR, USTD,&
!/ST4                             TAUWX, TAUWY, CD, Z0, CHARN, LLWS, FMEANWS )
!/FLX2                  CALL W3FLX2 ( ZWND, depth, FP, UABS, UDIRR,      &
!/FLX2                                            USTAR, USTD, Z0, CD )
!/FLX3                  CALL W3FLX3 ( ZWND, depth, FP, UABS, UDIRR,      &
!/FLX3                                            USTAR, USTD, Z0, CD )
              END DO
!
! Add alternative flux calculations here as part of !/ST2 option ....
! Also add before actual source term calculation !!!
!
!/STAB2                UABS   = UABS * ASFAC
!
          IF ( WAO(J) .LT. 0.01 ) THEN
              UNORM  = 0.
              ESTAR  = 0.
              FPSTAR = 0.
            ELSE
              IF ( OTYPE.EQ.3 ) THEN
                  UNORM  = USTAR
                ELSE
                  UNORM  = WAO(J)
                END IF
              ESTAR  = ET * GRAV**2 / UNORM**4
              FPSTAR = FP * TPIINV * UNORM / GRAV
              XSTAR  = PTLOC(1,J) * GRAV / UNORM**2
              YSTAR  = PTLOC(2,J) * GRAV / UNORM**2
              IF ( FLAGLL ) THEN
                  XSTAR  = XSTAR * DERA * RADIUS &
                         * COS(PTLOC(2,J)*DERA)
                  YSTAR  = YSTAR * DERA * RADIUS
                END IF
            END IF
!
          END IF

!
! 4.a Perform output type 4 ( print plots / tables / file )
!
        IF ( ITYPE .EQ. 4 ) THEN
!
!  Format Time
!
          IF ( OTYPE .NE. 1 ) THEN

            iyc=TIME(1)/10000
            imc=(TIME(1)-iyc*10000)/100
            idc=TIME(1)-iyc*10000-100*imc
            ihc=TIME(2)/10000
            iminc=(TIME(2)-ihc*10000)/100
            isc=TIME(2)-ihc*10000-100*iminc
 
            timenc=DBLE(julday(idc,imc,iyc))+(DBLE(ihc)+(DBLE(iminc)+(DBLE(isc)/60.))/60.)/24.
            Jday0=julday(1,1,1990)
            timenc=timenc-Jday0

            iret=nf90_put_var(ncid,varid(1),timenc,(/IOUT/))
            END IF  


!
!  Performs subtype 1 
!
          IF ( OTYPE .EQ. 1 ) THEN
!
            IF ( SCALE1 .GE. 0. )                             &
                CALL PRT1DS (NDSO, NK, E1, SIG(1:NK), 'RAD/S',&
                     17, SCALE1, 'E(f)', 'm^2s', PTNME(J) )
            IF ( SCALE2 .GE. 0. )                             &
                CALL PRT2DS (NDSO, NK, NK, NTH, E, SIG(1:NK), &
                     'RAD/S', 1., SCALE2, 0.0001, 'E(f,th)',  &
                     'm^2s', PTNME(J) )
            WRITE (NDSO,910) DPO(J), UABS
            IF ( WAO(J) .GT. 0. ) WRITE (NDSO,911) UDIR
            WRITE (NDSO,912) ASO(J), CAO(J)
            IF ( CAO(J) .GT. 0. ) WRITE (NDSO,913) CDIR
            WRITE (NDSO,914) HSIG, WLEN, TMEAN, THMEAN, THSPRD


!
!  Performs subtype 2
!
          ELSE IF ( OTYPE .EQ. 2 ) THEN

            iret=nf90_put_var(ncid,varid(27),J,(/J1/))
            DO K=1,LEN_TRIM(PTNME(J)) 
               iret=nf90_put_var(ncid,varid(2),PTNME(J),start=(/1,J1/),count=(/LEN_TRIM(PTNME(J)) ,1/))
            END DO
            IF (FLWW3.NE.0) iret=nf90_put_var(ncid,varid(3),FLWW3,(/J1,IOUT/))
            iret=nf90_put_var(ncid,varid(4),M2KM*PTLOC(1,J),(/J1,IOUT/))
            iret=nf90_put_var(ncid,varid(5),M2KM*PTLOC(2,J),(/J1,IOUT/))
            iret=nf90_put_var(ncid,varid(7),DPO(J),(/J1,IOUT/))
            iret=nf90_put_var(ncid,varid(8),USTAR,(/J1,IOUT/))
            iret=nf90_put_var(ncid,varid(9),WAO(J),(/J1,IOUT/))
            iret=nf90_put_var(ncid,varid(10),UDIR,(/J1,IOUT/))

            IF ( FP .EQ. 0. ) FP = SIG(NK)
            DO IK=1, NK
              iret=nf90_put_var(ncid,varid(11),SIG(IK)/FP,(/ IK,J1,IOUT /))
              iret=nf90_put_var(ncid,varid(12),E1(IK),(/ IK,J1,IOUT /))
              iret=nf90_put_var(ncid,varid(13),THBND(IK),(/ IK,J1,IOUT /))
              iret=nf90_put_var(ncid,varid(14),SPBND(IK),(/ IK,J1,IOUT /))
              iret=nf90_put_var(ncid,varid(15),APM(IK),(/ IK,J1,IOUT /))
              END DO

            !IF ( FP .EQ. SIG(NK) ) FP = 0.


!
!  Performs subtype 3
!
          ELSE IF ( OTYPE .EQ. 3 ) THEN

            iret=nf90_put_var(ncid,varid(27),J,(/J1/))
            call check_err(iret)
            DO K=1,LEN_TRIM(PTNME(J))
               iret=nf90_put_var(ncid,varid(2),PTNME(J),start=(/1,J1/),count=(/LEN_TRIM(PTNME(J)) ,1/))
            END DO
            IF (FLWW3.NE.0) iret=nf90_put_var(ncid,varid(3),FLWW3,(/J1,IOUT/))
            IF ( FLFORM ) THEN
                iret=nf90_put_var(ncid,varid(4),PTLOC(1,J),(/J1,IOUT/))
                iret=nf90_put_var(ncid,varid(5),PTLOC(2,J),(/J1,IOUT/))
            ELSE
             iret=nf90_put_var(ncid,varid(4),M2KM*PTLOC(1,J),(/J1,IOUT/))
             iret=nf90_put_var(ncid,varid(5),M2KM*PTLOC(2,J),(/J1,IOUT/))
             END IF
            iret=nf90_put_var(ncid,varid(11),DPO(J),(/J1,IOUT/))
            iret=nf90_put_var(ncid,varid(12),WAO(J),(/J1,IOUT/))
            iret=nf90_put_var(ncid,varid(13),UDIR,(/J1,IOUT/))
            iret=nf90_put_var(ncid,varid(14),CAO(J),(/J1,IOUT/))
            iret=nf90_put_var(ncid,varid(15),CDIR,(/J1,IOUT/))


            DO ITH=1,NTH
                DO IK=1,NK
                    iret=nf90_put_var(ncid,varid(10),E(IK,ITH), &
																				(/ITH,IK,J1,IOUT/))
                    END DO
                END DO

!
!  Performs subtype 4
!
          ELSE IF ( OTYPE .EQ. 4 ) THEN
!
            iret=nf90_put_var(ncid,varid(27),J,(/J1/))
            DO K=1,LEN_TRIM(PTNME(J)) 
               iret=nf90_put_var(ncid,varid(2),PTNME(J),start=(/1,J1/),count=(/LEN_TRIM(PTNME(J)) ,1/))
            END DO
            IF (FLWW3.NE.0) iret=nf90_put_var(ncid,varid(3),FLWW3,(/J1,IOUT/))
            iret=nf90_put_var(ncid,varid(4),M2KM*PTLOC(1,J),(/J1,IOUT/))
            iret=nf90_put_var(ncid,varid(5),M2KM*PTLOC(2,J),(/J1,IOUT/))
            iret=nf90_put_var(ncid,varid(6),NPART,(/J1,IOUT/))
            iret=nf90_put_var(ncid,varid(7),depth,(/J1,IOUT/))
            iret=nf90_put_var(ncid,varid(8),WAO(J),(/J1,IOUT/))
            iret=nf90_put_var(ncid,varid(9),UDIR,(/J1,IOUT/))
            iret=nf90_put_var(ncid,varid(10),CAO(J),(/J1,IOUT/))
            iret=nf90_put_var(ncid,varid(11),CDIR,(/J1,IOUT/))

            DO K=0, NPART
              iret=nf90_put_var(ncid,varid(12),XPART(1,K),(/K,J1,IOUT/))
              iret=nf90_put_var(ncid,varid(13),XPART(2,K),(/K,J1,IOUT/))
              iret=nf90_put_var(ncid,varid(14),XPART(3,K),(/K,J1,IOUT/))
              iret=nf90_put_var(ncid,varid(15),XPART(4,K),(/K,J1,IOUT/))
              iret=nf90_put_var(ncid,varid(16),XPART(5,K),(/K,J1,IOUT/))
              iret=nf90_put_var(ncid,varid(17),XPART(6,K),(/K,J1,IOUT/))
              END DO
!
          END IF

!
! 4.e Perform output type 5 ( tables )
!
        ELSE IF ( ITYPE .EQ. 5 ) THEN

!  Format Time
          iyc=TIME(1)/10000
          imc=(TIME(1)-iyc*10000)/100
          idc=TIME(1)-iyc*10000-100*imc
          ihc=TIME(2)/10000
          iminc=(TIME(2)-ihc*10000)/100
          isc=TIME(2)-ihc*10000-100*iminc

          timenc=DBLE(julday(idc,imc,iyc))+(DBLE(ihc)+(DBLE(iminc)+(DBLE(isc)/60.))/60.)/24.
          Jday0=julday(1,1,1990)
          timenc=timenc-Jday0

          iret=nf90_put_var(ncid,varid(1),timenc,(/IOUT/))

!
!  Performs subtype 1 
!
          IF ( OTYPE .EQ. 1 ) THEN

            iret=nf90_put_var(ncid,varid(27),J,(/J1/))
            DO K=1,LEN_TRIM(PTNME(J)) 
               iret=nf90_put_var(ncid,varid(2),PTNME(J),start=(/1,J1/),count=(/LEN_TRIM(PTNME(J)) ,1/))
            END DO
            IF (FLWW3.NE.0) iret=nf90_put_var(ncid,varid(3),FLWW3,(/J1,IOUT/))
            iret=nf90_put_var(ncid,varid(4),M2KM*PTLOC(1,J),(/J1,IOUT/))
            iret=nf90_put_var(ncid,varid(5),M2KM*PTLOC(2,J),(/J1,IOUT/))
            iret=nf90_put_var(ncid,varid(6),DPO(J),(/ J1,IOUT /))
            iret=nf90_put_var(ncid,varid(7),CAO(J),(/ J1,IOUT /))
            iret=nf90_put_var(ncid,varid(8),CDIR,(/ J1,IOUT /))
            iret=nf90_put_var(ncid,varid(9),WAO(J),(/ J1,IOUT /))
            iret=nf90_put_var(ncid,varid(10),UDIR,(/ J1,IOUT /))

!
!  Performs subtype 2
!
          ELSE IF ( OTYPE .EQ. 2 ) THEN

            iret=nf90_put_var(ncid,varid(27),J,(/J1/))
            DO K=1,LEN_TRIM(PTNME(J))
               iret=nf90_put_var(ncid,varid(2),PTNME(J),start=(/1,J1/),count=(/LEN_TRIM(PTNME(J)) ,1/))
            END DO
            IF (FLWW3.NE.0) iret=nf90_put_var(ncid,varid(3),FLWW3,(/J1,IOUT/))
            iret=nf90_put_var(ncid,varid(4),M2KM*PTLOC(1,J),(/J1,IOUT/))
            iret=nf90_put_var(ncid,varid(5),M2KM*PTLOC(2,J),(/J1,IOUT/))
            iret=nf90_put_var(ncid,varid(6),HSIG,(/ J1,IOUT /))
            iret=nf90_put_var(ncid,varid(7),WLEN,(/ J1,IOUT /))
            iret=nf90_put_var(ncid,varid(8),TMEAN,(/ J1,IOUT /))
            iret=nf90_put_var(ncid,varid(9),THMEAN,(/ J1,IOUT /))
            iret=nf90_put_var(ncid,varid(10),THSPRD,(/ J1,IOUT /))
            iret=nf90_put_var(ncid,varid(11),FP*TPIINV,(/ J1,IOUT /))
            iret=nf90_put_var(ncid,varid(12),THP,(/ J1,IOUT /))
            iret=nf90_put_var(ncid,varid(13),SPP,(/ J1,IOUT /))

!
!  Performs subtype 3
!
          ELSE IF ( OTYPE .EQ. 3 ) THEN

            iret=nf90_put_var(ncid,varid(27),J,(/J1/))
            DO K=1,LEN_TRIM(PTNME(J)) 
               iret=nf90_put_var(ncid,varid(2),PTNME(J),start=(/1,J1/),count=(/LEN_TRIM(PTNME(J)) ,1/))
            END DO
            IF (FLWW3.NE.0) iret=nf90_put_var(ncid,varid(3),FLWW3,(/J1,IOUT/))
            iret=nf90_put_var(ncid,varid(4),1.E-4*XSTAR,(/J1,IOUT/))
            iret=nf90_put_var(ncid,varid(5),1.E-4*YSTAR,(/J1,IOUT/))
            iret=nf90_put_var(ncid,varid(6),UNORM,(/ J1,IOUT /))
            iret=nf90_put_var(ncid,varid(7),ESTAR,(/ J1,IOUT /))
            iret=nf90_put_var(ncid,varid(8),FPSTAR,(/ J1,IOUT /))
            iret=nf90_put_var(ncid,varid(9),CD*1000.,(/ J1,IOUT /))
            iret=nf90_put_var(ncid,varid(10),APM(NK)*100.,(/ J1,IOUT /))

!
!  Performs subtype 4
!
          ELSE IF ( OTYPE .EQ. 4 ) THEN

            iret=nf90_put_var(ncid,varid(27),J,(/J1/))
            DO K=1,LEN_TRIM(PTNME(J)) 
               iret=nf90_put_var(ncid,varid(2),PTNME(J),start=(/1,J1/),count=(/LEN_TRIM(PTNME(J)) ,1/))
            END DO
            IF (FLWW3.NE.0) iret=nf90_put_var(ncid,varid(3),FLWW3,(/J1,IOUT/))
            iret=nf90_put_var(ncid,varid(4),XSTAR,(/J1,IOUT/))
            iret=nf90_put_var(ncid,varid(5),YSTAR,(/J1,IOUT/))
            iret=nf90_put_var(ncid,varid(6),UNORM,(/ J1,IOUT /))
            iret=nf90_put_var(ncid,varid(7),ESTAR,(/ J1,IOUT /))
            iret=nf90_put_var(ncid,varid(8),FPSTAR,(/ J1,IOUT /))
            iret=nf90_put_var(ncid,varid(9),CD*1000.,(/ J1,IOUT /))
            iret=nf90_put_var(ncid,varid(10),APM(NK)*100.,(/ J1,IOUT /))

!
!  Performs subtype 5
!
          ELSE IF ( OTYPE .EQ. 5 ) THEN
            HMAT   = MIN ( 100. , 3.33*GRAV*HSIG/UABS**2 )
            IF ( HSIG .GE. HSMIN ) THEN
                CALL WAVNU1 ( FP, DPO(J), WNA, XYZ )
                AGE1   = MIN ( 100. , FP / WNA / UABS )
                AFR    = TPI / TMEAN
                CALL WAVNU1 ( AFR, DPO(J), WNA, XYZ )
                AGE2   = MIN ( 100. , AFR / WNA / UABS )
              ELSE
                AGE1   = NF90_FILL_FLOAT
                AGE2   = NF90_FILL_FLOAT
              END IF

            iret=nf90_put_var(ncid,varid(27),J,(/J1/))
            DO K=1,LEN_TRIM(PTNME(J)) 
               iret=nf90_put_var(ncid,varid(2),PTNME(J),start=(/1,J1/),count=(/LEN_TRIM(PTNME(J)) ,1/))
            END DO
            IF (FLWW3.NE.0) iret=nf90_put_var(ncid,varid(3),FLWW3,(/J1,IOUT/))
            iret=nf90_put_var(ncid,varid(4),M2KM*PTLOC(1,J),(/J1,IOUT/))
            iret=nf90_put_var(ncid,varid(5),M2KM*PTLOC(2,J),(/J1,IOUT/))
            iret=nf90_put_var(ncid,varid(6),WAO(J),(/ J1,IOUT /))
            iret=nf90_put_var(ncid,varid(7),UDIR,(/ J1,IOUT /))
            iret=nf90_put_var(ncid,varid(8),HSIG,(/ J1,IOUT /))
            iret=nf90_put_var(ncid,varid(9),HMAT,(/ J1,IOUT /))
            iret=nf90_put_var(ncid,varid(10),AGE1,(/ J1,IOUT /))
            iret=nf90_put_var(ncid,varid(11),AGE2,(/ J1,IOUT /))
            iret=nf90_put_var(ncid,varid(12),ASO(J),(/ J1,IOUT /))

!
!  Performs subtype 6
!
          ELSE IF ( OTYPE .EQ. 6 ) THEN

            iret=nf90_put_var(ncid,varid(27),J,(/J1/))
            DO K=1,LEN_TRIM(PTNME(J)) 
               iret=nf90_put_var(ncid,varid(2),PTNME(J),start=(/1,J1/),count=(/LEN_TRIM(PTNME(J)) ,1/))
            END DO
            IF (FLWW3.NE.0) iret=nf90_put_var(ncid,varid(3),FLWW3,(/J1,IOUT/))
            iret=nf90_put_var(ncid,varid(4),M2KM*PTLOC(1,J),(/J1,IOUT/))
            iret=nf90_put_var(ncid,varid(5),M2KM*PTLOC(2,J),(/J1,IOUT/))
            iret=nf90_put_var(ncid,varid(6),WAO(J),(/ J1,IOUT /))
            iret=nf90_put_var(ncid,varid(7),UDIR,(/ J1,IOUT /))
            iret=nf90_put_var(ncid,varid(8),HSIG,(/ J1,IOUT /))

            IF ( HSIG .GE. HSMIN ) THEN

                iret=nf90_put_var(ncid,varid(9),TPI/FP,(/ J1,IOUT /))
              ELSE
                iret=nf90_put_var(ncid,varid(9),0.0,(/ J1,IOUT /))
              END IF

            END IF
!                 
          END IF

!
! ... End of fields loop
!
          IF (TOGETHER) J1=J1+1

        END IF
!
! Selects next station index or end up if not together
!
        IF (TOGETHER) THEN
          J=J+1
          IF (J.GT.NOPTS) LASTSTATION=.TRUE.
        ELSE
          LASTSTATION=.TRUE.
        END IF

      END DO ! DO WHILE (.NOT. LASTSTATION)

    iret=nf90_close(ncid)
    call check_err(iret)

!
    RETURN
!
! Formats
!
  900 FORMAT (I8.8,I7.6)
  901 FORMAT ('''',A10,'''',2F7.2,F10.1,2(F7.2,F6.1))
  701 FORMAT ('''',A10,'''',2(F8.1,'E3'),F10.1,2(F7.2,F6.1))
  902 FORMAT (7E11.3)
  905 FORMAT (9X,A)
  910 FORMAT (/15X,' Water depth       :',F7.1,'  (m)'/               &
               15X,' Wind speed        :',F8.2,' (m/s)')
  911 FORMAT ( 15X,' Wind direction    :',F7.1,'  (degr)')
  912 FORMAT ( 15X,' Air-sea temp. dif.:',F7.1,'  (degr)'/            &
               15X,' sea water speed     :',F8.2,' (m/s)')
  913 FORMAT ( 15X,' direction from of sea water velocity :',F7.1,'  (degr)')
  914 FORMAT ( 15X,' Wave height       :',F8.2,' (m)'/                &
               15X,' Mean wave length  :',F6.0,'   (m)'/              &
               15X,' Mean wave period  :',F7.1,'  (s)'/               &
               15X,' Mean wave direct. :',F7.1,'  (degr)'/            &
               15X,' Direct. spread    :',F7.1,'  (degr)'/)
  920 FORMAT (' Time     : ',A/                                  &
              ' Location : ',A,'  (',2F8.2,' )'/                 &
              ' depth    : ',F7.1,'   m'/                        &
              ' U*       : ',F9.3,' m/s'/                        &
              ' U10      : ',F7.1,'   m/s'/                      &
              ' Dir U10  : ',F7.1,'   degr'//                    &
       '      f     f/fp      F(f)    theta    spr    alpha  '/  &
       '     (Hz)    (-)     (m2s)    (deg)   (deg)    (-)   '/  &
           '  --------------------------------------------------')
  720 FORMAT (' Time     : ',A/                                  &
              ' Location : ',A,'  (',2(F8.1,'E3'),' )'/          &
              ' depth    : ',F7.1,'   m'/                        &
              ' U*       : ',F9.3,' m/s'/                        &
              ' U10      : ',F7.1,'   m/s'/                      &
              ' Dir U10  : ',F7.1,'   degr'//                    &
       '      f     f/fp      F(f)    theta    spr    alpha  '/  &
       '     (Hz)    (-)     (m2s)    (deg)   (deg)    (-)   '/  &
       '  --------------------------------------------------')
  921 FORMAT (1x,F8.5,F7.3,E11.3,2F8.1,F8.4)
  922 FORMAT (' '/' ')
!
  940 FORMAT (1X,I8.8,1X,I6.6,2F8.3,2X,'''',A10,'''',            &
              1X,I2,F7.1,F5.1,f6.1,F5.2,F6.1)
  943 FORMAT (1X,I8.8,1X,I6.6,2(F8.1,'E3'),2X,'''',A10,'''',     &
              1X,I2,F7.1,F5.1,f6.1,F5.2,F6.1)
  941 FORMAT ('        hs     tp     lp       theta     sp      wf')
  942 FORMAT (I3,3F8.2,2F9.2,F7.2)
!
 1901 FORMAT (                                                        &
       '    Date     Time        d     Uc     Dir.  U10    Dir. '/    &
       '            h  m  s     (m)   (m/s)  (d.N) (m/s)  (d.N) '/    &
       ' ---------------------------------------------------------')
 1902 FORMAT (                                                        &
       '    Date     Time        Hs     L      Tr    Dir.  Spr. ',    &
       '    fp    p_dir  p_spr'/                                      &
       '            h  m  s     (m)    (m)    (s)   (d.N)  (deg)',    &
       '   (Hz)   (d.N)  (deg)'/                                      &
       ' -------------------------------------------------------',    &
       '-----------------------')
 1903 FORMAT (                                                        &
    '    Date     Time       U*       E*        fp*       Cd   alpha'/&
    '            h  m  s   (m/s)     (-)        (-)     *1000  *100'/ &
    ' --------------------------------------------------------------')
 1904 FORMAT (                                                        &
     '    Date     Time     U10       E*        fp*       Cd   alpha'/&
     '            h  m  s  (m/s)     (-)        (-)     *1000  *100'/ &
     ' --------------------------------------------------------------')
 1905 FORMAT (                                                        &
       '   Date     Time     U10    Dir.    Hs      H*    cp/U  ',    &
           '  cm/U     Dt'/                                           &
       '                    (m/s)  (d.N)   (m)     (-)    (-)   ',    &
           '   (-)   (deg)'/                                          &
      ' --------------------------------------------------',          &
       '---------------------')
 1906 FORMAT (                                                         &
     '     Time      U10    Dir. Hs  Tp  '/         &
     '  yr mth dy h  (m/s) (d.N) (m) (s) '/         &
     ' ----------------------------------')
 1910 FORMAT ( ' '/' ' )
 1911 FORMAT (' Time : ',A//                                     &
   '    Long.    Lat.       d     Uc     Dir.  U10    Dir. '/    &
   '                       (m)   (m/s)  (d.N) (m/s)  (d.N) '/    &
   ' --------------------------------------------------------')
 1912 FORMAT (' Time : ',A//                                     &
   '    Long.    Lat.       Hs     L      Tr    Dir.  Spr. ',    &
   '    fp    p_dir  p_spr'/                                     &
   '                       (m)    (m)    (s)   (d.N)  (deg)',    &
   '   (Hz)   (d.N)  (deg)'/                                     &
   ' ------------------------------------------------------',    &
   '-----------------------')
 1711 FORMAT (' Time : ',A//                                     &
   '       X        Y          d     Uc     Dir.  U10    Dir. '/ &
   '      (m)      (m)        (m)   (m/s)  (d.N) (m/s)  (d.N) '/ &
   ' ----------------------------------------------------------')
 1712 FORMAT (' Time : ',A//                                     &
   '       X        Y          Hs     L      Tr    Dir.  Spr. ', &
   '    fp    p_dir  p_spr'/                                     &
   '      (m)      (m))       (m)    (m)    (s)   (d.N)  (deg)', &
   '   (Hz)   (d.N)  (deg)'/                                     &
   ' ------------------------------------------------------',    &
   '-------------------------')
 1913 FORMAT (' Time : ',A//                                          &
   '       X*       Y*       U*       E*        fp*       Cd   alpha'/&
   '      (-)      (-)     (m/s)     (-)        (-)     *1000  *100'/ &
   ' --------------------------------------------------------------')
 1914 FORMAT (' Time : ',A//                                          &
   '       X*       Y*     U10       E*        fp*       Cd   alpha'/ &
   '      (-)      (-)    (m/s)     (-)        (-)     *1000  *100 '/ &
   ' --------------------------------------------------------------')
 1915 FORMAT (' Time : ',A//                                     &
   '     Long.    Lat.   U10    Dir.    Hs      H*    cp/U  ',   &
       '  cm/U     Dt'/                                          &
   '                    (m/s)  (d.N)   (m)     (-)    (-)   ',   &
       '   (-)   (deg)'/                                         &
   ' -------------------------------------------------',         &
   '---------------------')
 1715 FORMAT (' Time : ',A//                                     &
   '       X        Y      U10    Dir.    Hs      H*    cp/U  ', &
       '  cm/U     Dt'/                                          &
   '      (m)      (m)    (m/s)  (d.N)   (m)     (-)    (-)   ', &
       '   (-)   (deg)'/                                         &
   ' ---------------------------------------------------',       &
   '---------------------')
 1916 FORMAT (' Time : ',A//                                     &
   '   Long.   Lat.   U10     Dir.     Hs      Tp  '/         &
   '                 (m/s)   (d.N)    (m)     (s)  '/         &
   '-----------------------------------------------')
 1716 FORMAT (' Time : ',A//                                     &
   '    X     Y     U10     Dir.     Hs      Tp  '/         &
   '    (m)  (m)   (m/s)   (d.N)    (m)     (s)  '/         &
   '---------------------------------------------')
 1921 FORMAT ( 2X,I8.8,I3,2(1X,I2.2),F10.1,F6.2,F7.1,F6.2,F7.1)
 1922 FORMAT ( 2X,I8.8,I3,2(1X,I2.2),F9.3,F7.1,F7.2,F7.1,F7.2,        &
               F8.4,F7.1,F7.2)
 1923 FORMAT ( 2X,I8.8,I3,2(1X,I2.2),F8.4,2E11.3,2F7.3)
 1924 FORMAT ( 2X,I8.8,I3,2(1X,I2.2),F7.1,2E11.3,2F7.3)
 1925 FORMAT ( 2X,I8.8,I3,2(1X,I2.2),F7.2,F7.1,2F7.2,2F8.2,F7.1)
 1926 FORMAT ( 2X,I4,3(1X,I2),F5.1,1X,I3,2F5.1)
 1931 FORMAT ( 2X,2F8.3,F10.1,F6.2,F7.1,F6.2,F7.1)
 1932 FORMAT ( 2X,2F8.3,F9.3,F7.1,F7.2,F7.1,F7.2,                &
               F8.4,F7.1,F7.2)
 1731 FORMAT ( 2X,2(F7.1,'E3'),F10.1,F6.2,F7.1,F6.2,F7.1)
 1732 FORMAT ( 2X,2(F7.1,'E3'),F9.3,F7.1,F7.2,F7.1,F7.2,         &
               F8.4,F7.1,F7.2)
 1933 FORMAT ( 2X,2(F7.1,'E4'),F8.4,2E11.3,2F7.3)
 1934 FORMAT ( 2X,2F9.1,F7.1,2E11.3,2F7.3)
 1935 FORMAT ( 2X,2F8.3,F7.2,F7.1,2F7.2,2F8.2,F7.1)
 1735 FORMAT ( 2X,2(F7.1,'E3'),F7.2,F7.1,2F7.2,2F8.2,F7.1)
 1936 FORMAT ( 2X,2F8.3,F5.1,1X,I3,2F5.1)
 1736 FORMAT ( 2X,2(F7.1,'E3'),F5.1,1X,I3,2F5.1)
!
 2920 FORMAT (' Time     : ',A/                                  &
              ' Location : ',A,'  (',2F8.2,' )'/                 &
              ' depth    : ',F7.1,'   m'/                        &
              ' U*       : ',F9.3,' m/s'/                        &
              ' U10      : ',F7.1,'   m/s'/)
 2720 FORMAT (' Time     : ',A/                                  &
              ' Location : ',A,'  (',2(F8.1,'E3'),' )'/          &
              ' depth    : ',F7.1,'   m'/                        &
              ' U*       : ',F9.3,' m/s'/                        &
              ' U10      : ',F7.1,'   m/s'/)
 2921 FORMAT ('    f           E      ',                              &
              '    Sin        Snl        Sds        Sbt       Stot'/  &
              '   (Hz)       (m2s)    ',                              &
              '   (m2)       (m2)       (m2)       (m2)       (m2)'/  &
              ' -------------------------------------',               &
              '--------------------------------------')
 2922 FORMAT ('    f*          E*    ',                               &
              '    Sin*       Snl*       Sds*       Sbt*      Stot*'/ &
              '   (-)         (-)    ',                               &
              '    (-)        (-)        (-)        (-)        (-)'/  &
              ' -------------------------------------',               &
              '--------------------------------------')
 2923 FORMAT ('   f/fp         E      ',                              &
              '   Sin        Snl        Sds        Sbt       Stot'/   &
              '   (-)        (m2s)    ',                              &
              '  (m2)       (m2)       (m2)       (m2)       (m2)'/   &
              ' -------------------------------------',               &
              '--------------------------------------')
 2924 FORMAT ('   f/fp         E*     ',                              &
              '   Sin*       Snl*       Sds*       Sbt*      Stot*'/  &
              '     (-)       (-)     ',                              &
              '   (-)        (-)        (-)        (-)        (-)'/   &
              ' -------------------------------------',               &
              '--------------------------------------')
 2925 FORMAT ('    f         E      ',                                &
              '  Tini       Tnli       Tdsi       Tbti      Ttoti'/   &
              '   (Hz)     (m2s)    ',                                &
              ' (1/s)      (1/s)      (1/s)      (1/s)      (1/s)'/   &
              ' -----------------------------------',                 &
              '--------------------------------------')
 2926 FORMAT ('    f*        E*     ',                                &
              ' Tini*      Tnli*      Tdsi*      Tbti*     Ttoti*'/   &
              '   (-)       (-)     ',                                &
              '  (-)        (-)        (-)        (-)        (-)'/    &
              ' -----------------------------------',                 &
              '--------------------------------------')
 2927 FORMAT ('   f/fp       E      ',                                &
              '  Tini       Tnli       Tdsi       Tbti      Ttoti'/   &
              '   (-)       (m2s)    ',                               &
              ' (1/s)      (1/s)      (1/s)      (1/s)      (1/s)'/   &
              ' -----------------------------------',                 &
              '--------------------------------------')
 2928 FORMAT ('   f/fp       E*     ',                                &
              ' Tini*      Tnli*      Tdsi*      Tbti*     Ttoti*'/   &
              '   (-)       (-)     ',                                &
              '  (-)        (-)        (-)        (-)        (-)'/    &
              ' -----------------------------------',                 &
              '--------------------------------------')
 2930 FORMAT (1X,F6.4,2X,6E11.3)
 2931 FORMAT (1X,F6.4,6E11.3)
 2940 FORMAT ( ' '/' ' )
!
!/T 9000 FORMAT (' TEST W3EXNC : FLAGS :',40L2)
!/T 9001 FORMAT (' TEST W3EXNC : ITPYE  :',I4/                        &
!/T              '               OTPYE  :',I4/                        &
!/T              '               NREQ   :',I4/                        &
!/T              '               SCALE1 :',E10.3/                     &
!/T              '               SCALE2 :',E10.3/                     &
!/T              '               FLSRCE :',6L2)
!/T 9002 FORMAT (' TEST W3EXNC : OUTPUT POINT : ',A)
!/T 9010 FORMAT (' TEST W3EXNC : depth =',F7.1,'  IK, T, K, CG :')
!/T 9011 FORMAT ('               ',I3,F8.2,F8.4,F8.2)
!/
!/ End of W3EXNC ----------------------------------------------------- /
!/
      END SUBROUTINE W3EXNC





!--------------------------------------------------------------------------    
      SUBROUTINE W3CRNC (itype, otype, nctype, ncfile, ncid, dimid, dimln, varid)


		USE W3GDATMD
		USE NETCDF

      implicit none


      integer, INTENT(IN)               :: itype,otype,nctype
      character*(*), INTENT(IN)         :: ncfile
      integer, INTENT(IN)               :: dimln(5)
      integer, INTENT(OUT)              :: dimid(7), varid(28),ncid
      INTEGER                           :: iret, deflate=1
      REAL(kind=4)                      :: freq
      LOGICAL                           :: filefound

!      
! Creation in netCDF3 or netCDF4
!
      IF(NCTYPE.EQ.3)  iret = nf90_create(ncfile, NF90_CLOBBER, ncid)
!/NC4      IF(NCTYPE.EQ.4)  iret = nf90_create(ncfile, NF90_NETCDF4, ncid)
      call check_err(iret)

!
!     Define generals dimensions
!
      iret = nf90_def_dim(ncid, 'time', dimln(1), dimid(1))
      call check_err(iret)
      iret = nf90_def_dim(ncid, 'station', dimln(2), dimid(2))
      call check_err(iret)
      iret = nf90_def_dim(ncid, 'string16', dimln(3), dimid(3))
      call check_err(iret)

!
!     define generals variables
!

!  time
       iret=nf90_def_var(ncid, 'time', NF90_DOUBLE, dimid(1), varid(1))
!/NC4      IF (NCTYPE.EQ.4) iret=nf90_def_var_deflate(ncid, varid(1), 1, 1, deflate)
      iret=nf90_put_att(ncid,varid(1),'units','days since 1990-01-01T00:00:00Z')
      iret=nf90_put_att(ncid,varid(1),'long_name','julian day (UT)')
      iret=nf90_put_att(ncid,varid(1),'standard_name','time')
      iret=nf90_put_att(ncid,varid(1),'conventions','Relative julian days with decimal part (as parts of the day)')
      iret=nf90_put_att(ncid,varid(1),'axis','T') 

!  station
       iret=nf90_def_var(ncid, 'station', NF90_INT, (/dimid(2)/), varid(27))
!/NC4      IF (NCTYPE.EQ.4) iret=nf90_def_var_deflate(ncid, varid(27), 1, 1, deflate)
      iret=nf90_put_att(ncid,varid(27),'long_name','station id')
      iret=nf90_put_att(ncid,varid(27),'axis','X') 

!  string16
       iret=nf90_def_var(ncid, 'string16', NF90_INT, (/dimid(3)/), varid(28))
!/NC4      IF (NCTYPE.EQ.4) iret=nf90_def_var_deflate(ncid, varid(28), 1, 1, deflate)
      iret=nf90_put_att(ncid,varid(28),'long_name','station_name number of characters')
      iret=nf90_put_att(ncid,varid(28),'axis','W') 

!  station_name
       iret=nf90_def_var(ncid, 'station_name', NF90_CHAR, (/dimid(3),dimid(2)/), varid(2))
!/NC4      IF (NCTYPE.EQ.4) iret=nf90_def_var_deflate(ncid, varid(2), 1, 1, deflate)
      iret=nf90_put_att(ncid,varid(2),'long_name','station name')
      iret=nf90_put_att(ncid,varid(2),'content','XW')
      iret=nf90_put_att(ncid,varid(2),'associates','station string16')

      IF (FLWW3.NE.0) THEN
!  wwIII param version
         iret=nf90_def_var(ncid, 'WWIII_param_version', NF90_SHORT, (/dimid(2),dimid(1)/), varid(3))
!/NC4        IF (NCTYPE.EQ.4) iret=nf90_def_var_deflate(ncid, varid(3), 1, 1, deflate)
        iret=nf90_put_att(ncid,varid(3),'units','degree_east')
        iret=nf90_put_att(ncid,varid(3),'long_name','WaveWatch III parameters version')
        iret=nf90_put_att(ncid,varid(3),'standard_name','WaveWatchIII_version')
        iret=nf90_put_att(ncid,varid(3),'valid_min',1)
        iret=nf90_put_att(ncid,varid(3),'valid_max',999)
        iret=nf90_put_att(ncid,varid(3),'_FillValue',NF90_FILL_SHORT)
        iret=nf90_put_att(ncid,varid(3),'content','TX')
        iret=nf90_put_att(ncid,varid(3),'associates','time station')
        END IF

      IF (FLAGLL) THEN 
!  longitude
         iret=nf90_def_var(ncid, 'longitude', NF90_FLOAT, (/dimid(2),dimid(1)/), varid(4))
!/NC4        IF (NCTYPE.EQ.4) iret=nf90_def_var_deflate(ncid, varid(4), 1, 1, deflate)
        iret=nf90_put_att(ncid,varid(4),'units','degree_east')
        iret=nf90_put_att(ncid,varid(4),'long_name','longitude')
        iret=nf90_put_att(ncid,varid(4),'standard_name','longitude')
        iret=nf90_put_att(ncid,varid(4),'valid_min',-180.0)
        iret=nf90_put_att(ncid,varid(4),'valid_max',180.)
        iret=nf90_put_att(ncid,varid(4),'_FillValue',NF90_FILL_FLOAT)
        iret=nf90_put_att(ncid,varid(4),'content','TX')
        iret=nf90_put_att(ncid,varid(4),'associates','time station')


!  latitude
         iret=nf90_def_var(ncid, 'latitude', NF90_FLOAT, (/dimid(2),dimid(1)/), varid(5))
!/NC4        IF (NCTYPE.EQ.4) iret=nf90_def_var_deflate(ncid, varid(5), 1, 1, deflate)
        iret=nf90_put_att(ncid,varid(5),'units','degree_north')
        iret=nf90_put_att(ncid,varid(5),'long_name','latitude')
        iret=nf90_put_att(ncid,varid(5),'standard_name','latitude')
        iret=nf90_put_att(ncid,varid(5),'valid_min',-90.0)
        iret=nf90_put_att(ncid,varid(5),'valid_max',90.)
        iret=nf90_put_att(ncid,varid(5),'_FillValue',NF90_FILL_FLOAT)
        iret=nf90_put_att(ncid,varid(5),'content','TX')
        iret=nf90_put_att(ncid,varid(5),'associates','time station')


        ELSE
!  longitude
         iret=nf90_def_var(ncid, 'x', NF90_FLOAT, (/dimid(2),dimid(1)/), varid(4))
!/NC4        IF (NCTYPE.EQ.4) iret=nf90_def_var_deflate(ncid, varid(4), 1, 1, deflate)
        iret=nf90_put_att(ncid,varid(4),'units','m')
        iret=nf90_put_att(ncid,varid(4),'long_name','x')
        iret=nf90_put_att(ncid,varid(4),'valid_min',0.)
        iret=nf90_put_att(ncid,varid(4),'valid_max',10000.)
        iret=nf90_put_att(ncid,varid(4),'_FillValue',NF90_FILL_FLOAT)
        iret=nf90_put_att(ncid,varid(4),'content','TX')
        iret=nf90_put_att(ncid,varid(4),'associates','time station')
   

!  latitude
         iret=nf90_def_var(ncid, 'y', NF90_FLOAT, (/dimid(2),dimid(1)/), varid(5))
!/NC4        IF (NCTYPE.EQ.4) iret=nf90_def_var_deflate(ncid, varid(5), 1, 1, deflate)
        iret=nf90_put_att(ncid,varid(5),'units','m')
        iret=nf90_put_att(ncid,varid(5),'long_name','y')
        iret=nf90_put_att(ncid,varid(5),'valid_min',0.)
        iret=nf90_put_att(ncid,varid(5),'valid_max',10000.)
        iret=nf90_put_att(ncid,varid(5),'_FillValue',NF90_FILL_FLOAT)
        iret=nf90_put_att(ncid,varid(5),'content','TX')
        iret=nf90_put_att(ncid,varid(5),'associates','time station')

        END IF 


!
! ... ITYPE = 4 AND OTYPE = 2
!

      IF (ITYPE.EQ.4 .AND. OTYPE.EQ.2) THEN
!
!     Define specifics dimensions
!
        iret = nf90_def_dim(ncid, 'frequency', dimln(4), dimid(4))
        call check_err(iret)

!
!     define specifics variables
!

!  frequency
         iret=nf90_def_var(ncid, 'frequency', NF90_FLOAT, dimid(4), varid(6))
!/NC4        IF (NCTYPE.EQ.4) iret=nf90_def_var_deflate(ncid, varid(6), 1, 1, deflate)
        iret=nf90_put_att(ncid,varid(6),'units','s-1')
        iret=nf90_put_att(ncid,varid(6),'long_name','frequency of center band')
        iret=nf90_put_att(ncid,varid(6),'standard_name','sea_surface_wave_frequency')
        iret=nf90_put_att(ncid,varid(6),'valid_min',0.)
        iret=nf90_put_att(ncid,varid(6),'valid_max',10.)
        iret=nf90_put_att(ncid,varid(6),'axis','Y') 
!d
         iret=nf90_def_var(ncid, 'depth', NF90_FLOAT, (/ dimid(2),dimid(1) /), varid(7))
!/NC4        IF (NCTYPE.EQ.4) iret=nf90_def_var_deflate(ncid, varid(7), 1, 1, deflate)
        iret=nf90_put_att(ncid,varid(7),'standard_name','depth')
        iret=nf90_put_att(ncid,varid(7),'units','m')
        iret=nf90_put_att(ncid,varid(7),'_FillValue',NF90_FILL_FLOAT)
        iret=nf90_put_att(ncid,varid(7),'content','TX')
        iret=nf90_put_att(ncid,varid(7),'associates','time station')
!U*
         iret=nf90_def_var(ncid, 'Ustar', NF90_FLOAT, (/ dimid(2),dimid(1) /), varid(8))
!/NC4        IF (NCTYPE.EQ.4) iret=nf90_def_var_deflate(ncid, varid(8), 1, 1, deflate)
        iret=nf90_put_att(ncid,varid(8),'standard_name','?')
        iret=nf90_put_att(ncid,varid(8),'units','m s-1')
        iret=nf90_put_att(ncid,varid(8),'_FillValue',NF90_FILL_FLOAT)
        iret=nf90_put_att(ncid,varid(8),'content','TX')
        iret=nf90_put_att(ncid,varid(8),'associates','time station')
!U10
         iret=nf90_def_var(ncid, 'u10m', NF90_FLOAT, (/ dimid(2),dimid(1) /), varid(9))
!/NC4        IF (NCTYPE.EQ.4) iret=nf90_def_var_deflate(ncid, varid(9), 1, 1, deflate)
        iret=nf90_put_att(ncid,varid(9),'standard_name','wind_speed')
        iret=nf90_put_att(ncid,varid(9),'units','m s-1')
        iret=nf90_put_att(ncid,varid(9),'_FillValue',NF90_FILL_FLOAT)
        iret=nf90_put_att(ncid,varid(9),'content','TX')
        iret=nf90_put_att(ncid,varid(9),'associates','time station')
!Dir
         iret=nf90_def_var(ncid, 'udir', NF90_FLOAT, (/ dimid(2),dimid(1) /), varid(10))
!/NC4        IF (NCTYPE.EQ.4) iret=nf90_def_var_deflate(ncid, varid(10), 1, 1, deflate)
        iret=nf90_put_att(ncid,varid(10),'standard_name','wind_from_direction')
        iret=nf90_put_att(ncid,varid(10),'units','degree')
        iret=nf90_put_att(ncid,varid(10),'_FillValue',NF90_FILL_FLOAT)
        iret=nf90_put_att(ncid,varid(10),'content','TX')
        iret=nf90_put_att(ncid,varid(10),'associates','time station')


!f/fp
         iret=nf90_def_var(ncid, 'ffp', NF90_FLOAT, (/ dimid(4),dimid(2),dimid(1) /), varid(11))
!/NC4        IF (NCTYPE.EQ.4) iret=nf90_def_var_deflate(ncid, varid(11), 1, 1, deflate)
        iret=nf90_put_att(ncid,varid(11),'standard_name','f/fp')
        iret=nf90_put_att(ncid,varid(11),'units','n/a')
        iret=nf90_put_att(ncid,varid(11),'_FillValue',NF90_FILL_FLOAT)
        iret=nf90_put_att(ncid,varid(11),'content','TXY')
        iret=nf90_put_att(ncid,varid(11),'associates','time station frequency')
!F
         iret=nf90_def_var(ncid, 'F', NF90_FLOAT, (/ dimid(4),dimid(2),dimid(1) /), varid(12))
!/NC4        IF (NCTYPE.EQ.4) iret=nf90_def_var_deflate(ncid, varid(22), 1, 1, deflate)
        iret=nf90_put_att(ncid,varid(12),'standard_name','F')
        iret=nf90_put_att(ncid,varid(12),'units','m2 s')
        iret=nf90_put_att(ncid,varid(12),'_FillValue',NF90_FILL_FLOAT)
        iret=nf90_put_att(ncid,varid(12),'content','TXY')
        iret=nf90_put_att(ncid,varid(12),'associates','time station frequency')
!theta
         iret=nf90_def_var(ncid, 'th1m', NF90_FLOAT, (/ dimid(4),dimid(2),dimid(1) /), varid(13))
!/NC4        IF (NCTYPE.EQ.4) iret=nf90_def_var_deflate(ncid, varid(13), 1, 1, deflate)
        iret=nf90_put_att(ncid,varid(13),'standard_name','average_wave_direction')
        iret=nf90_put_att(ncid,varid(13),'units','degree')
        iret=nf90_put_att(ncid,varid(13),'_FillValue',NF90_FILL_FLOAT)
        iret=nf90_put_att(ncid,varid(13),'content','TXY')
        iret=nf90_put_att(ncid,varid(13),'associates','time station frequency')
!spr
         iret=nf90_def_var(ncid, 'sth1m', NF90_FLOAT,(/ dimid(4),dimid(2),dimid(1) /), varid(14))
!/NC4        IF (NCTYPE.EQ.4) iret=nf90_def_var_deflate(ncid, varid(14), 1, 1, deflate)
        iret=nf90_put_att(ncid,varid(14),'standard_name','average_wave_spreading')
        iret=nf90_put_att(ncid,varid(14),'units','degree')
        iret=nf90_put_att(ncid,varid(14),'_FillValue',NF90_FILL_FLOAT)
        iret=nf90_put_att(ncid,varid(14),'content','TXY')
        iret=nf90_put_att(ncid,varid(14),'associates','time station frequency')
!alpha
         iret=nf90_def_var(ncid, 'alpha', NF90_FLOAT, (/ dimid(4),dimid(2),dimid(1) /), varid(15))
!/NC4        IF (NCTYPE.EQ.4) iret=nf90_def_var_deflate(ncid, varid(15), 1, 1, deflate)
        iret=nf90_put_att(ncid,varid(15),'standard_name','?')
        iret=nf90_put_att(ncid,varid(15),'units','?')
        iret=nf90_put_att(ncid,varid(15),'_FillValue',NF90_FILL_FLOAT)
        iret=nf90_put_att(ncid,varid(15),'content','TXY')
        iret=nf90_put_att(ncid,varid(15),'associates','time station frequency')



!  Open netCDF file to write values in each array
        iret = nf90_close(ncid)
        iret = nf90_open(ncfile, NF90_WRITE, ncid)

!  Add values in netCDF file      
        DO IK=1,NK
          iret=nf90_put_var(ncid,varid(6),SIG(IK)*TPIINV,(/IK/))
          END DO


!
! ... ITYPE = 4 AND OTYPE = 3
!

      ELSE IF (ITYPE.EQ.4 .AND. OTYPE.EQ.3) THEN
!
!     Define specifics dimensions
!
        iret = nf90_def_dim(ncid, 'frequency', dimln(4), dimid(4))
        iret = nf90_def_dim(ncid, 'direction', dimln(5), dimid(5))
        call check_err(iret)

!
!     define specifics variables
!

!frequency
         iret=nf90_def_var(ncid, 'frequency', NF90_FLOAT, (/dimid(4)/), varid(6))
!/NC4        IF (NCTYPE.EQ.4) iret=nf90_def_var_deflate(ncid, varid(6), 1, 1, deflate)
        iret=nf90_put_att(ncid,varid(6),'units','s-1')
        iret=nf90_put_att(ncid,varid(6),'long_name','frequency of center band')
        iret=nf90_put_att(ncid,varid(6),'standard_name','sea_surface_wave_frequency')
        iret=nf90_put_att(ncid,varid(6),'valid_min',0.)
        iret=nf90_put_att(ncid,varid(6),'valid_max',10.)
        iret=nf90_put_att(ncid,varid(6),'axis','Y') 

!frequency1
         iret=nf90_def_var(ncid, 'frequency1', NF90_FLOAT, (/dimid(4)/), varid(7))
!/NC4        IF (NCTYPE.EQ.4) iret=nf90_def_var_deflate(ncid, varid(7), 1, 1, deflate)
        iret=nf90_put_att(ncid,varid(7),'units','s-1')
        iret=nf90_put_att(ncid,varid(7),'long_name','frequency of lower band')
        iret=nf90_put_att(ncid,varid(7),'standard_name','frequency_of_lower_band')
        iret=nf90_put_att(ncid,varid(7),'scale_factor',1.)
        iret=nf90_put_att(ncid,varid(7),'add_offset',0.)
        iret=nf90_put_att(ncid,varid(7),'valid_min',0.)
        iret=nf90_put_att(ncid,varid(7),'valid_max',10.)
        iret=nf90_put_att(ncid,varid(7),'content','Y')
        iret=nf90_put_att(ncid,varid(7),'associates','frequency')

!frequency2
         iret=nf90_def_var(ncid, 'frequency2', NF90_FLOAT, (/dimid(4)/), varid(8))
!/NC4        IF (NCTYPE.EQ.4) iret=nf90_def_var_deflate(ncid, varid(8), 1, 1, deflate)
        iret=nf90_put_att(ncid,varid(8),'units','s-1')
        iret=nf90_put_att(ncid,varid(8),'long_name','frequency of upper band')
        iret=nf90_put_att(ncid,varid(8),'standard_name','frequency_of_upper_band')
        iret=nf90_put_att(ncid,varid(8),'scale_factor',1.)
        iret=nf90_put_att(ncid,varid(8),'add_offset',0.)
        iret=nf90_put_att(ncid,varid(8),'valid_min',0.)
        iret=nf90_put_att(ncid,varid(8),'valid_max',10.)
        iret=nf90_put_att(ncid,varid(8),'content','Y')
        iret=nf90_put_att(ncid,varid(8),'associates','frequency')


!direction
         iret=nf90_def_var(ncid, 'direction', NF90_FLOAT, (/dimid(5)/), varid(9))
!/NC4        IF (NCTYPE.EQ.4) iret=nf90_def_var_deflate(ncid, varid(9), 1, 1, deflate)
        iret=nf90_put_att(ncid,varid(9),'units','degree')
        iret=nf90_put_att(ncid,varid(9),'long_name','sea surface wave to direction')
        iret=nf90_put_att(ncid,varid(9),'standard_name','sea_surface_wave_to_direction')
        iret=nf90_put_att(ncid,varid(9),'valid_min',0.)
        iret=nf90_put_att(ncid,varid(9),'valid_max',360.)
        iret=nf90_put_att(ncid,varid(9),'axis','Z') 

!Efth
         iret=nf90_def_var(ncid,'Efth',NF90_FLOAT,(/dimid(5),dimid(4),dimid(2),dimid(1)/),varid(10))
!/NC4        IF (NCTYPE.EQ.4) iret=nf90_def_var_deflate(ncid, varid(10), 1, 1, deflate)
        iret=nf90_put_att(ncid,varid(10),'long_name',&
                          'sea surface wave directional variance spectral density')
        iret=nf90_put_att(ncid,varid(10),'standard_name',&
                          'sea_surface_wave_directional_variance_spectral_density')
        iret=nf90_put_att(ncid,varid(10),'units','m2 s rad-1')
        iret=nf90_put_att(ncid,varid(10),'scale_factor',1.)
        iret=nf90_put_att(ncid,varid(10),'add_offset',0.)
        iret=nf90_put_att(ncid,varid(10),'valid_min',0.)
        iret=nf90_put_att(ncid,varid(10),'valid_max',10.)
        iret=nf90_put_att(ncid,varid(10),'_FillValue',NF90_FILL_FLOAT)
        iret=nf90_put_att(ncid,varid(10),'content','TXYZ')
        iret=nf90_put_att(ncid,varid(10),'associates','time station frequency direction')
!d
         iret=nf90_def_var(ncid, 'depth', NF90_FLOAT, (/ dimid(2),dimid(1) /), varid(11))
!/NC4        IF (NCTYPE.EQ.4) iret=nf90_def_var_deflate(ncid, varid(11), 1, 1, deflate)
        iret=nf90_put_att(ncid,varid(11),'long_name','depth')
        iret=nf90_put_att(ncid,varid(11),'standard_name','depth')
        iret=nf90_put_att(ncid,varid(11),'units','m')
        iret=nf90_put_att(ncid,varid(11),'scale_factor',1.)
        iret=nf90_put_att(ncid,varid(11),'add_offset',0.)
        iret=nf90_put_att(ncid,varid(11),'valid_min',0.)
        iret=nf90_put_att(ncid,varid(11),'valid_max',10000.)
        iret=nf90_put_att(ncid,varid(11),'_FillValue',NF90_FILL_FLOAT)
        iret=nf90_put_att(ncid,varid(11),'content','TX')
        iret=nf90_put_att(ncid,varid(11),'associates','time station')

!U10
         iret=nf90_def_var(ncid, 'u10m', NF90_FLOAT, (/ dimid(2),dimid(1) /), varid(12))
!/NC4        IF (NCTYPE.EQ.4) iret=nf90_def_var_deflate(ncid, varid(12), 1, 1, deflate)
        iret=nf90_put_att(ncid,varid(12),'long_name','wind speed at 10m')
        iret=nf90_put_att(ncid,varid(12),'standard_name','wind_speed')
        iret=nf90_put_att(ncid,varid(12),'units','m s-1')
        iret=nf90_put_att(ncid,varid(12),'scale_factor',1.)
        iret=nf90_put_att(ncid,varid(12),'add_offset',0.)
        iret=nf90_put_att(ncid,varid(12),'valid_min',0.)
        iret=nf90_put_att(ncid,varid(12),'valid_max',100.)
        iret=nf90_put_att(ncid,varid(12),'_FillValue',NF90_FILL_FLOAT)
        iret=nf90_put_att(ncid,varid(12),'content','TX')
        iret=nf90_put_att(ncid,varid(12),'associates','time station')
!Dir
         iret=nf90_def_var(ncid, 'udir', NF90_FLOAT, (/ dimid(2),dimid(1) /), varid(13))
!/NC4        IF (NCTYPE.EQ.4) iret=nf90_def_var_deflate(ncid, varid(13), 1, 1, deflate)
        iret=nf90_put_att(ncid,varid(13),'long_name','wind direction')
        iret=nf90_put_att(ncid,varid(13),'standard_name','wind_from_direction')
        iret=nf90_put_att(ncid,varid(13),'units','degree')
        iret=nf90_put_att(ncid,varid(13),'scale_factor',1.)
        iret=nf90_put_att(ncid,varid(13),'add_offset',0.)
        iret=nf90_put_att(ncid,varid(13),'valid_min',0.)
        iret=nf90_put_att(ncid,varid(13),'valid_max',360.)
        iret=nf90_put_att(ncid,varid(13),'_FillValue',NF90_FILL_FLOAT)
        iret=nf90_put_att(ncid,varid(13),'content','TX')
        iret=nf90_put_att(ncid,varid(13),'associates','time station')

!Uc
         iret=nf90_def_var(ncid, 'curr', NF90_FLOAT, (/ dimid(2),dimid(1) /), varid(14))
!/NC4        IF (NCTYPE.EQ.4) iret=nf90_def_var_deflate(ncid, varid(14), 1, 1, deflate)
        iret=nf90_put_att(ncid,varid(14),'long_name','sea water speed')        
        iret=nf90_put_att(ncid,varid(14),'standard_name','sea_water_speed')
        iret=nf90_put_att(ncid,varid(14),'units','m s-1')
        iret=nf90_put_att(ncid,varid(14),'scale_factor',1.)
        iret=nf90_put_att(ncid,varid(14),'add_offset',0.)
        iret=nf90_put_att(ncid,varid(14),'valid_min',0.)
        iret=nf90_put_att(ncid,varid(14),'valid_max',100.)
        iret=nf90_put_att(ncid,varid(14),'_FillValue',NF90_FILL_FLOAT)
        iret=nf90_put_att(ncid,varid(14),'content','TX')
        iret=nf90_put_att(ncid,varid(14),'associates','time station')

!Dir
         iret=nf90_def_var(ncid, 'currdir', NF90_FLOAT, (/ dimid(2),dimid(1) /), varid(15))
!/NC4        IF (NCTYPE.EQ.4) iret=nf90_def_var_deflate(ncid, varid(15), 1, 1, deflate)
        iret=nf90_put_att(ncid,varid(15),'long_name','direction from of sea water velocity')
        iret=nf90_put_att(ncid,varid(15),'standard_name','direction_of_sea_water_velocity')
        iret=nf90_put_att(ncid,varid(15),'units','degree')
        iret=nf90_put_att(ncid,varid(15),'scale_factor',1.)
        iret=nf90_put_att(ncid,varid(15),'add_offset',0.)
        iret=nf90_put_att(ncid,varid(15),'valid_min',0.)
        iret=nf90_put_att(ncid,varid(15),'valid_max',360.)
        iret=nf90_put_att(ncid,varid(15),'_FillValue',NF90_FILL_FLOAT)
        iret=nf90_put_att(ncid,varid(15),'content','TX')
        iret=nf90_put_att(ncid,varid(15),'associates','time station')

        CLOSE(994)



!  Open netCDF file to write values in each array
        iret = nf90_close(ncid)
        iret = nf90_open(ncfile, NF90_WRITE, ncid)


!  Add values in netCDF file      
        DO IK=1,NK
          freq=SIG(IK)*TPIINV
          iret=nf90_put_var(ncid,varid(6),freq,(/IK/))
          iret=nf90_put_var(ncid,varid(7),freq-0.5*(freq-(freq/XFR)),(/IK/))
          iret=nf90_put_var(ncid,varid(8),freq+0.5*(-freq+(freq*XFR)),(/IK/))
        END DO
        iret=nf90_put_var(ncid,varid(7),SIG(1)*TPIINV,(/1/))
        iret=nf90_put_var(ncid,varid(8),SIG(NK)*TPIINV,(/NK/))


        DO ITH=1,NTH
          iret=nf90_put_var(ncid,varid(9),MOD(450-THD(ITH),360.),(/ITH/))
        END DO



!
! ... ITYPE = 4 AND OTYPE = 4
!

      ELSE IF (ITYPE.EQ.4 .AND. OTYPE.EQ.4) THEN
!
!     Define specifics dimensions
!
        iret = nf90_def_dim(ncid, 'npart', dimln(4), dimid(4))
        call check_err(iret)

!
!     define specifics variables
!

!npart
         iret=nf90_def_var(ncid, 'npart', NF90_INT, (/ dimid(2),dimid(1) /), varid(6))
!/NC4        IF (NCTYPE.EQ.4) iret=nf90_def_var_deflate(ncid, varid(6), 1, 1, deflate)
        iret=nf90_put_att(ncid,varid(6),'standard_name','npart')
        iret=nf90_put_att(ncid,varid(6),'units','n/a')
        iret=nf90_put_att(ncid,varid(6),'_FillValue',NF90_FILL_INT)
        iret=nf90_put_att(ncid,varid(6),'axis','Y') 
!d
         iret=nf90_def_var(ncid, 'depth', NF90_FLOAT, (/ dimid(2),dimid(1) /), varid(7))
!/NC4        IF (NCTYPE.EQ.4) iret=nf90_def_var_deflate(ncid, varid(7), 1, 1, deflate)
        iret=nf90_put_att(ncid,varid(7),'standard_name','depth')
        iret=nf90_put_att(ncid,varid(7),'units','m')
        iret=nf90_put_att(ncid,varid(7),'_FillValue',NF90_FILL_FLOAT)
        iret=nf90_put_att(ncid,varid(7),'content','TX')
        iret=nf90_put_att(ncid,varid(7),'associates','time station')
!U10
         iret=nf90_def_var(ncid, 'u10m', NF90_FLOAT, (/ dimid(2),dimid(1) /), varid(8))
!/NC4        IF (NCTYPE.EQ.4) iret=nf90_def_var_deflate(ncid, varid(8), 1, 1, deflate)
        iret=nf90_put_att(ncid,varid(8),'standard_name','wind_speed')
        iret=nf90_put_att(ncid,varid(8),'units','m s-1')
        iret=nf90_put_att(ncid,varid(8),'_FillValue',NF90_FILL_FLOAT)
        iret=nf90_put_att(ncid,varid(8),'content','TX')
        iret=nf90_put_att(ncid,varid(8),'associates','time station')
!Dir
         iret=nf90_def_var(ncid, 'udir', NF90_FLOAT, (/ dimid(2),dimid(1) /), varid(9))
!/NC4        IF (NCTYPE.EQ.4) iret=nf90_def_var_deflate(ncid, varid(9), 1, 1, deflate)
        iret=nf90_put_att(ncid,varid(9),'standard_name','wind_from_direction')
        iret=nf90_put_att(ncid,varid(9),'units','degree')
        iret=nf90_put_att(ncid,varid(9),'_FillValue',NF90_FILL_FLOAT)
        iret=nf90_put_att(ncid,varid(9),'content','TX')
        iret=nf90_put_att(ncid,varid(9),'associates','time station')
!Uc
         iret=nf90_def_var(ncid, 'curr', NF90_FLOAT, (/ dimid(2),dimid(1) /), varid(10))
!/NC4        IF (NCTYPE.EQ.4) iret=nf90_def_var_deflate(ncid, varid(10), 1, 1, deflate)
        iret=nf90_put_att(ncid,varid(10),'standard_name','sea_water_speed')
        iret=nf90_put_att(ncid,varid(10),'units','m s-1')
        iret=nf90_put_att(ncid,varid(10),'_FillValue',NF90_FILL_FLOAT)
        iret=nf90_put_att(ncid,varid(10),'content','TX')
        iret=nf90_put_att(ncid,varid(10),'associates','time station')
!Dir
         iret=nf90_def_var(ncid, 'currdir', NF90_FLOAT, (/ dimid(2),dimid(1) /), varid(11))
!/NC4        IF (NCTYPE.EQ.4) iret=nf90_def_var_deflate(ncid, varid(11), 1, 1, deflate)
        iret=nf90_put_att(ncid,varid(11),'standard_name','direction_of_sea_water_velocity')
        iret=nf90_put_att(ncid,varid(11),'units','degree')
        iret=nf90_put_att(ncid,varid(11),'_FillValue',NF90_FILL_FLOAT)
        iret=nf90_put_att(ncid,varid(11),'content','TX')
        iret=nf90_put_att(ncid,varid(11),'associates','time station')


!Hs
         iret=nf90_def_var(ncid, 'Hs', NF90_FLOAT, (/dimid(4),dimid(2),dimid(1)/),varid(12))
!/NC4        IF (NCTYPE.EQ.4) iret=nf90_def_var_deflate(ncid, varid(12), 1, 1, deflate)
        iret=nf90_put_att(ncid,varid(12),'standard_name','significant_wave_height')
        iret=nf90_put_att(ncid,varid(12),'units','m')
        iret=nf90_put_att(ncid,varid(12),'_FillValue',NF90_FILL_FLOAT)
        iret=nf90_put_att(ncid,varid(12),'content','TXY')
        iret=nf90_put_att(ncid,varid(12),'associates','time station npart')
!Tp
         iret=nf90_def_var(ncid, 'Tp', NF90_FLOAT,(/dimid(4),dimid(2),dimid(1)/),varid(13))
!/NC4        IF (NCTYPE.EQ.4) iret=nf90_def_var_deflate(ncid, varid(13), 1, 1, deflate)
        iret=nf90_put_att(ncid,varid(13),'standard_name','dominant_wave_period')
        iret=nf90_put_att(ncid,varid(13),'units','m')
        iret=nf90_put_att(ncid,varid(13),'_FillValue',NF90_FILL_FLOAT)
        iret=nf90_put_att(ncid,varid(13),'content','TXY')
        iret=nf90_put_att(ncid,varid(13),'associates','time station npart')
!L
         iret=nf90_def_var(ncid, 'wl', NF90_FLOAT, (/dimid(4),dimid(2),dimid(1)/),varid(14))
!/NC4        IF (NCTYPE.EQ.4) iret=nf90_def_var_deflate(ncid, varid(14), 1, 1, deflate)
        iret=nf90_put_att(ncid,varid(14),'standard_name','dominant_wavelength')
        iret=nf90_put_att(ncid,varid(14),'units','m')
        iret=nf90_put_att(ncid,varid(14),'_FillValue',NF90_FILL_FLOAT)
        iret=nf90_put_att(ncid,varid(14),'content','TXY')
        iret=nf90_put_att(ncid,varid(14),'associates','time station npart')
!Tr
         iret=nf90_def_var(ncid, 'Tr', NF90_FLOAT,(/dimid(4),dimid(2),dimid(1)/),varid(15))
!/NC4        IF (NCTYPE.EQ.4) iret=nf90_def_var_deflate(ncid, varid(15), 1, 1, deflate)
        iret=nf90_put_att(ncid,varid(15),'standard_name','?')
        iret=nf90_put_att(ncid,varid(15),'units','-')
        iret=nf90_put_att(ncid,varid(15),'_FillValue',NF90_FILL_FLOAT)
        iret=nf90_put_att(ncid,varid(15),'content','TXY')
        iret=nf90_put_att(ncid,varid(15),'associates','time station npart')
!th1m
         iret=nf90_def_var(ncid, 'th1m', NF90_FLOAT, (/dimid(4),dimid(2),dimid(1)/),varid(16))
!/NC4        IF (NCTYPE.EQ.4) iret=nf90_def_var_deflate(ncid, varid(16), 1, 1, deflate)
        iret=nf90_put_att(ncid,varid(16),'standard_name','average_wave_from_direction')
        iret=nf90_put_att(ncid,varid(16),'units','degree')
        iret=nf90_put_att(ncid,varid(16),'_FillValue',NF90_FILL_FLOAT)
        iret=nf90_put_att(ncid,varid(16),'content','TXY')
        iret=nf90_put_att(ncid,varid(16),'associates','time station npart')
!sth1m
         iret=nf90_def_var(ncid, 'sth1m', NF90_FLOAT,(/dimid(4),dimid(2),dimid(1)/),varid(17))
!/NC4        IF (NCTYPE.EQ.4) iret=nf90_def_var_deflate(ncid, varid(17), 1, 1, deflate)
        iret=nf90_put_att(ncid,varid(17),'standard_name','average_wave_spreading')
        iret=nf90_put_att(ncid,varid(17),'units','degree')
        iret=nf90_put_att(ncid,varid(17),'_FillValue',NF90_FILL_FLOAT)
        iret=nf90_put_att(ncid,varid(17),'content','TXY')
        iret=nf90_put_att(ncid,varid(17),'associates','time station npart')



!
! ... ITYPE = 5 AND OTYPE = 1
!


      ELSE IF (ITYPE.EQ.5 .AND. OTYPE.EQ.1) THEN
!d
         iret=nf90_def_var(ncid, 'depth', NF90_FLOAT, (/ dimid(2),dimid(1) /), varid(6))
!/NC4        IF (NCTYPE.EQ.4) iret=nf90_def_var_deflate(ncid, varid(6), 1, 1, deflate)
        iret=nf90_put_att(ncid,varid(6),'standard_name','depth')
        iret=nf90_put_att(ncid,varid(6),'units','m')
        iret=nf90_put_att(ncid,varid(6),'_FillValue',NF90_FILL_FLOAT)
        iret=nf90_put_att(ncid,varid(6),'content','TX')
        iret=nf90_put_att(ncid,varid(6),'associates','time station')

!Uc
         iret=nf90_def_var(ncid, 'curr', NF90_FLOAT, (/ dimid(2),dimid(1) /), varid(7))
!/NC4        IF (NCTYPE.EQ.4) iret=nf90_def_var_deflate(ncid, varid(7), 1, 1, deflate)
        iret=nf90_put_att(ncid,varid(7),'standard_name','sea_water_speed')
        iret=nf90_put_att(ncid,varid(7),'units','m s-1')
        iret=nf90_put_att(ncid,varid(7),'_FillValue',NF90_FILL_FLOAT)
        iret=nf90_put_att(ncid,varid(7),'content','TX')
        iret=nf90_put_att(ncid,varid(7),'associates','time station')
!Dir
         iret=nf90_def_var(ncid, 'currdir', NF90_FLOAT, (/ dimid(2),dimid(1) /), varid(8))
!/NC4        IF (NCTYPE.EQ.4) iret=nf90_def_var_deflate(ncid, varid(8), 1, 1, deflate)
        iret=nf90_put_att(ncid,varid(8),'standard_name','direction_of_sea_water_velocity')
        iret=nf90_put_att(ncid,varid(8),'units','degree')
        iret=nf90_put_att(ncid,varid(8),'_FillValue',NF90_FILL_FLOAT)
        iret=nf90_put_att(ncid,varid(8),'content','TX')
        iret=nf90_put_att(ncid,varid(8),'associates','time station')
!U10
         iret=nf90_def_var(ncid, 'u10m', NF90_FLOAT, (/ dimid(2),dimid(1) /), varid(9))
!/NC4        IF (NCTYPE.EQ.4) iret=nf90_def_var_deflate(ncid, varid(9), 1, 1, deflate)
        iret=nf90_put_att(ncid,varid(9),'standard_name','wind_speed')
        iret=nf90_put_att(ncid,varid(9),'units','m s-1')
        iret=nf90_put_att(ncid,varid(9),'_FillValue',NF90_FILL_FLOAT)
        iret=nf90_put_att(ncid,varid(9),'content','TX')
        iret=nf90_put_att(ncid,varid(9),'associates','time station')
!Dir
         iret=nf90_def_var(ncid, 'udir', NF90_FLOAT, (/ dimid(2),dimid(1) /), varid(10))
!/NC4        IF (NCTYPE.EQ.4) iret=nf90_def_var_deflate(ncid, varid(10), 1, 1, deflate)
        iret=nf90_put_att(ncid,varid(10),'standard_name','wind_from_direction')
        iret=nf90_put_att(ncid,varid(10),'units','degree')
        iret=nf90_put_att(ncid,varid(10),'_FillValue',NF90_FILL_FLOAT)
        iret=nf90_put_att(ncid,varid(10),'content','TX')
        iret=nf90_put_att(ncid,varid(10),'associates','time station')



!
! ... ITYPE = 5 AND OTYPE = 2
!

      ELSE IF (ITYPE.EQ.5 .AND. OTYPE.EQ.2) THEN
!Hs
         iret=nf90_def_var(ncid, 'Hs', NF90_FLOAT, (/ dimid(2),dimid(1) /), varid(6))  
!/NC4        IF (NCTYPE.EQ.4) iret=nf90_def_var_deflate(ncid, varid(6), 1, 1, deflate)
        iret=nf90_put_att(ncid,varid(6),'standard_name','significant_wave_height') 
        iret=nf90_put_att(ncid,varid(6),'units','m')
        iret=nf90_put_att(ncid,varid(6),'_FillValue',NF90_FILL_FLOAT)
        iret=nf90_put_att(ncid,varid(6),'content','TX')
        iret=nf90_put_att(ncid,varid(6),'associates','time station')
!L
         iret=nf90_def_var(ncid, 'wl', NF90_FLOAT, (/ dimid(2),dimid(1) /), varid(7))
!/NC4        IF (NCTYPE.EQ.4) iret=nf90_def_var_deflate(ncid, varid(7), 1, 1, deflate)
        iret=nf90_put_att(ncid,varid(7),'standard_name','dominant_wavelength')
        iret=nf90_put_att(ncid,varid(7),'units','m')
        iret=nf90_put_att(ncid,varid(7),'_FillValue',NF90_FILL_FLOAT)
        iret=nf90_put_att(ncid,varid(7),'content','TX')
        iret=nf90_put_att(ncid,varid(7),'associates','time station')
!Tr
         iret=nf90_def_var(ncid, 'Tr', NF90_FLOAT, (/ dimid(2),dimid(1) /), varid(8))
!/NC4        IF (NCTYPE.EQ.4) iret=nf90_def_var_deflate(ncid, varid(8), 1, 1, deflate)
        iret=nf90_put_att(ncid,varid(8),'standard_name','?')
        iret=nf90_put_att(ncid,varid(8),'units','s')
        iret=nf90_put_att(ncid,varid(8),'_FillValue',NF90_FILL_FLOAT)
        iret=nf90_put_att(ncid,varid(8),'content','TX')
        iret=nf90_put_att(ncid,varid(8),'associates','time station')
!Dir
         iret=nf90_def_var(ncid, 'th1p', NF90_FLOAT, (/ dimid(2),dimid(1) /), varid(9))
!/NC4        IF (NCTYPE.EQ.4) iret=nf90_def_var_deflate(ncid, varid(9), 1, 1, deflate)
        iret=nf90_put_att(ncid,varid(9),'standard_name','dominant_wave_from_direction')
        iret=nf90_put_att(ncid,varid(9),'units','degree')
        iret=nf90_put_att(ncid,varid(9),'_FillValue',NF90_FILL_FLOAT)
        iret=nf90_put_att(ncid,varid(9),'content','TX')
        iret=nf90_put_att(ncid,varid(9),'associates','time station')
!Spr
         iret=nf90_def_var(ncid, 'sth1p', NF90_FLOAT, (/ dimid(2),dimid(1) /), varid(10))
!/NC4        IF (NCTYPE.EQ.4) iret=nf90_def_var_deflate(ncid, varid(10), 1, 1, deflate)
        iret=nf90_put_att(ncid,varid(10),'standard_name','dominant_wave_spreading')
        iret=nf90_put_att(ncid,varid(10),'units','degree')
        iret=nf90_put_att(ncid,varid(10),'_FillValue',NF90_FILL_FLOAT)
        iret=nf90_put_att(ncid,varid(10),'content','TX')
        iret=nf90_put_att(ncid,varid(10),'associates','time station')
!fp
         iret=nf90_def_var(ncid, 'fp', NF90_FLOAT, (/ dimid(2),dimid(1) /), varid(11))
!/NC4        IF (NCTYPE.EQ.4) iret=nf90_def_var_deflate(ncid, varid(11), 1, 1, deflate)
        iret=nf90_put_att(ncid,varid(11),'standard_name','dominant_wave_frequency')
        iret=nf90_put_att(ncid,varid(11),'units','s-1')
        iret=nf90_put_att(ncid,varid(11),'_FillValue',NF90_FILL_FLOAT)
        iret=nf90_put_att(ncid,varid(11),'content','TX')
        iret=nf90_put_att(ncid,varid(11),'associates','time station')
!p_dir
         iret=nf90_def_var(ncid, 'th1m', NF90_FLOAT, (/ dimid(2),dimid(1) /), varid(12))
!/NC4        IF (NCTYPE.EQ.4) iret=nf90_def_var_deflate(ncid, varid(12), 1, 1, deflate)
        iret=nf90_put_att(ncid,varid(12),'standard_name','average_wave_from_direction')
        iret=nf90_put_att(ncid,varid(12),'units','degree')
        iret=nf90_put_att(ncid,varid(12),'_FillValue',NF90_FILL_FLOAT)
        iret=nf90_put_att(ncid,varid(12),'content','TX')
        iret=nf90_put_att(ncid,varid(12),'associates','time station')
!p_spr
         iret=nf90_def_var(ncid, 'sth1m', NF90_FLOAT, (/ dimid(2),dimid(1) /), varid(13))
!/NC4        IF (NCTYPE.EQ.4) iret=nf90_def_var_deflate(ncid, varid(13), 1, 1, deflate)
        iret=nf90_put_att(ncid,varid(13),'standard_name','average_wave_from_spreading')
        iret=nf90_put_att(ncid,varid(13),'units','degree')
        iret=nf90_put_att(ncid,varid(13),'_FillValue',NF90_FILL_FLOAT)
        iret=nf90_put_att(ncid,varid(13),'content','TX')
        iret=nf90_put_att(ncid,varid(13),'associates','time station')



!
! ... ITYPE = 5 AND OTYPE = 3
!

      ELSE IF (ITYPE.EQ.5 .AND. OTYPE.EQ.3) THEN
!U*
         iret=nf90_def_var(ncid, 'Ustar', NF90_FLOAT, (/ dimid(2),dimid(1) /), varid(6))
!/NC4        IF (NCTYPE.EQ.4) iret=nf90_def_var_deflate(ncid, varid(6), 1, 1, deflate)
        iret=nf90_put_att(ncid,varid(6),'standard_name','?')
        iret=nf90_put_att(ncid,varid(6),'units','m s-1')
        iret=nf90_put_att(ncid,varid(6),'_FillValue',NF90_FILL_FLOAT)
        iret=nf90_put_att(ncid,varid(6),'content','TX')
        iret=nf90_put_att(ncid,varid(6),'associates','time station')
!E*
         iret=nf90_def_var(ncid, 'Estar', NF90_FLOAT, (/ dimid(2),dimid(1) /), varid(7))
!/NC4        IF (NCTYPE.EQ.4) iret=nf90_def_var_deflate(ncid, varid(7), 1, 1, deflate)
        iret=nf90_put_att(ncid,varid(7),'standard_name','?')
        iret=nf90_put_att(ncid,varid(7),'units','-')
        iret=nf90_put_att(ncid,varid(7),'_FillValue',NF90_FILL_FLOAT)
        iret=nf90_put_att(ncid,varid(7),'content','TX')
        iret=nf90_put_att(ncid,varid(7),'associates','time station')
!fp*
         iret=nf90_def_var(ncid, 'fpstar', NF90_FLOAT, (/ dimid(2),dimid(1) /), varid(8))
!/NC4        IF (NCTYPE.EQ.4) iret=nf90_def_var_deflate(ncid, varid(8), 1, 1, deflate)
        iret=nf90_put_att(ncid,varid(8),'standard_name','?')
        iret=nf90_put_att(ncid,varid(8),'units','-')
        iret=nf90_put_att(ncid,varid(8),'_FillValue',NF90_FILL_FLOAT)
        iret=nf90_put_att(ncid,varid(8),'content','TX')
        iret=nf90_put_att(ncid,varid(8),'associates','time station')
!Cd
         iret=nf90_def_var(ncid, 'Cd', NF90_FLOAT, (/ dimid(2),dimid(1) /), varid(9))
!/NC4        IF (NCTYPE.EQ.4) iret=nf90_def_var_deflate(ncid, varid(9), 1, 1, deflate)
        iret=nf90_put_att(ncid,varid(9),'standard_name','?')
        iret=nf90_put_att(ncid,varid(9),'units','*1000')
        iret=nf90_put_att(ncid,varid(9),'_FillValue',NF90_FILL_FLOAT)
        iret=nf90_put_att(ncid,varid(9),'content','TX')
        iret=nf90_put_att(ncid,varid(9),'associates','time station')
!alpha
         iret=nf90_def_var(ncid, 'alpha', NF90_FLOAT, (/ dimid(2),dimid(1) /), varid(10))
!/NC4        IF (NCTYPE.EQ.4) iret=nf90_def_var_deflate(ncid, varid(10), 1, 1, deflate)
        iret=nf90_put_att(ncid,varid(10),'standard_name','?')
        iret=nf90_put_att(ncid,varid(10),'units','*100')
        iret=nf90_put_att(ncid,varid(10),'_FillValue',NF90_FILL_FLOAT)
        iret=nf90_put_att(ncid,varid(10),'content','TX')
        iret=nf90_put_att(ncid,varid(10),'associates','time station')




!
! ... ITYPE = 5 AND OTYPE = 4
!

      ELSE IF (ITYPE.EQ.5 .AND. OTYPE.EQ.4) THEN
!U10
         iret=nf90_def_var(ncid, 'u10m', NF90_FLOAT, (/ dimid(2),dimid(1) /), varid(6))
!/NC4        IF (NCTYPE.EQ.4) iret=nf90_def_var_deflate(ncid, varid(6), 1, 1, deflate)
        iret=nf90_put_att(ncid,varid(6),'standard_name','wind_speed')
        iret=nf90_put_att(ncid,varid(6),'units','m s-1')
        iret=nf90_put_att(ncid,varid(6),'_FillValue',NF90_FILL_FLOAT)
        iret=nf90_put_att(ncid,varid(6),'content','TX')
        iret=nf90_put_att(ncid,varid(6),'associates','time station')
!E*
         iret=nf90_def_var(ncid, 'Estar', NF90_FLOAT, (/ dimid(2),dimid(1) /), varid(7))
!/NC4        IF (NCTYPE.EQ.4) iret=nf90_def_var_deflate(ncid, varid(7), 1, 1, deflate)
        iret=nf90_put_att(ncid,varid(7),'standard_name','?')
        iret=nf90_put_att(ncid,varid(7),'units','-')
        iret=nf90_put_att(ncid,varid(7),'_FillValue',NF90_FILL_FLOAT)
        iret=nf90_put_att(ncid,varid(7),'content','TX')
        iret=nf90_put_att(ncid,varid(7),'associates','time station')
!fp*
         iret=nf90_def_var(ncid, 'fpstar', NF90_FLOAT, (/ dimid(2),dimid(1) /), varid(8))
!/NC4        IF (NCTYPE.EQ.4) iret=nf90_def_var_deflate(ncid, varid(8), 1, 1, deflate)
        iret=nf90_put_att(ncid,varid(8),'standard_name','?')
        iret=nf90_put_att(ncid,varid(8),'units','-')
        iret=nf90_put_att(ncid,varid(8),'_FillValue',NF90_FILL_FLOAT)
        iret=nf90_put_att(ncid,varid(8),'content','TX')
        iret=nf90_put_att(ncid,varid(8),'associates','time station')
!Cd
         iret=nf90_def_var(ncid, 'Cd', NF90_FLOAT, (/ dimid(2),dimid(1) /), varid(9))
!/NC4        IF (NCTYPE.EQ.4) iret=nf90_def_var_deflate(ncid, varid(9), 1, 1, deflate)
        iret=nf90_put_att(ncid,varid(9),'standard_name','?')
        iret=nf90_put_att(ncid,varid(9),'units','*1000')
        iret=nf90_put_att(ncid,varid(9),'_FillValue',NF90_FILL_FLOAT)
        iret=nf90_put_att(ncid,varid(9),'content','TX')
        iret=nf90_put_att(ncid,varid(9),'associates','time station')
!alpha
         iret=nf90_def_var(ncid, 'alpha', NF90_FLOAT, (/ dimid(2),dimid(1) /), varid(10))
!/NC4        IF (NCTYPE.EQ.4) iret=nf90_def_var_deflate(ncid, varid(10), 1, 1, deflate)
        iret=nf90_put_att(ncid,varid(10),'standard_name','?')
        iret=nf90_put_att(ncid,varid(10),'units','*100')
        iret=nf90_put_att(ncid,varid(10),'_FillValue',NF90_FILL_FLOAT)
        iret=nf90_put_att(ncid,varid(10),'content','TX')
        iret=nf90_put_att(ncid,varid(10),'associates','time station')



!
! ... ITYPE = 5 AND OTYPE = 5
!

      ELSE IF (ITYPE.EQ.5 .AND. OTYPE.EQ.5) THEN
!U10
         iret=nf90_def_var(ncid, 'u10m', NF90_FLOAT, (/ dimid(2),dimid(1) /), varid(6))
!/NC4        IF (NCTYPE.EQ.4) iret=nf90_def_var_deflate(ncid, varid(6), 1, 1, deflate)
        iret=nf90_put_att(ncid,varid(6),'standard_name','wind_speed')
        iret=nf90_put_att(ncid,varid(6),'units','m s-1')
        iret=nf90_put_att(ncid,varid(6),'_FillValue',NF90_FILL_FLOAT)
        iret=nf90_put_att(ncid,varid(6),'content','TX')
        iret=nf90_put_att(ncid,varid(6),'associates','time station')
!Dir
         iret=nf90_def_var(ncid, 'udir', NF90_FLOAT, (/ dimid(2),dimid(1) /), varid(7))
!/NC4        IF (NCTYPE.EQ.4) iret=nf90_def_var_deflate(ncid, varid(7), 1, 1, deflate)
        iret=nf90_put_att(ncid,varid(7),'standard_name','wind_from_direction')
        iret=nf90_put_att(ncid,varid(7),'units','degree')
        iret=nf90_put_att(ncid,varid(7),'_FillValue',NF90_FILL_FLOAT)
        iret=nf90_put_att(ncid,varid(7),'content','TX')
        iret=nf90_put_att(ncid,varid(7),'associates','time station')
!Hs
         iret=nf90_def_var(ncid, 'Hs', NF90_FLOAT, (/ dimid(2),dimid(1) /), varid(8))
!/NC4        IF (NCTYPE.EQ.4) iret=nf90_def_var_deflate(ncid, varid(8), 1, 1, deflate)
        iret=nf90_put_att(ncid,varid(8),'standard_name','significant_wave_height') 
        iret=nf90_put_att(ncid,varid(8),'units','m')
        iret=nf90_put_att(ncid,varid(8),'_FillValue',NF90_FILL_FLOAT)
        iret=nf90_put_att(ncid,varid(8),'content','TX')
        iret=nf90_put_att(ncid,varid(8),'associates','time station')
!H*
         iret=nf90_def_var(ncid, 'Hstar', NF90_FLOAT, (/ dimid(2),dimid(1) /), varid(9))
!/NC4        IF (NCTYPE.EQ.4) iret=nf90_def_var_deflate(ncid, varid(9), 1, 1, deflate)
        iret=nf90_put_att(ncid,varid(9),'standard_name','?')
        iret=nf90_put_att(ncid,varid(9),'units','-')
        iret=nf90_put_att(ncid,varid(9),'_FillValue',NF90_FILL_FLOAT)
        iret=nf90_put_att(ncid,varid(9),'content','TX')
        iret=nf90_put_att(ncid,varid(9),'associates','time station')
!cp/U
         iret=nf90_def_var(ncid, 'cpU', NF90_FLOAT, (/ dimid(2),dimid(1) /), varid(10))
!/NC4        IF (NCTYPE.EQ.4) iret=nf90_def_var_deflate(ncid, varid(10), 1, 1, deflate)
        iret=nf90_put_att(ncid,varid(10),'standard_name','?')
        iret=nf90_put_att(ncid,varid(10),'units','-')
        iret=nf90_put_att(ncid,varid(10),'_FillValue',NF90_FILL_FLOAT)
        iret=nf90_put_att(ncid,varid(10),'content','TX')
        iret=nf90_put_att(ncid,varid(10),'associates','time station')
!cm/U
         iret=nf90_def_var(ncid, 'cmU', NF90_FLOAT, (/ dimid(2),dimid(1) /), varid(11))
!/NC4        IF (NCTYPE.EQ.4) iret=nf90_def_var_deflate(ncid, varid(11), 1, 1, deflate)
        iret=nf90_put_att(ncid,varid(11),'standard_name','?')
        iret=nf90_put_att(ncid,varid(11),'units','-')
        iret=nf90_put_att(ncid,varid(11),'_FillValue',NF90_FILL_FLOAT)
        iret=nf90_put_att(ncid,varid(11),'content','TX')
        iret=nf90_put_att(ncid,varid(11),'associates','time station')
!Dt
         iret=nf90_def_var(ncid, 'Dt', NF90_FLOAT, (/ dimid(2),dimid(1) /), varid(12))
!/NC4        IF (NCTYPE.EQ.4) iret=nf90_def_var_deflate(ncid, varid(12), 1, 1, deflate)
        iret=nf90_put_att(ncid,varid(12),'standard_name','?')
        iret=nf90_put_att(ncid,varid(12),'units','degree')
        iret=nf90_put_att(ncid,varid(12),'_FillValue',NF90_FILL_FLOAT)
        iret=nf90_put_att(ncid,varid(12),'content','TX')
        iret=nf90_put_att(ncid,varid(12),'associates','time station')




!
! ... ITYPE = 5 AND OTYPE = 6
!

      ELSE IF (ITYPE.EQ.5 .AND. OTYPE.EQ.6) THEN
!U10
         iret=nf90_def_var(ncid, 'u10m', NF90_FLOAT, (/ dimid(2),dimid(1) /), varid(6))
!/NC4        IF (NCTYPE.EQ.4) iret=nf90_def_var_deflate(ncid, varid(6), 1, 1, deflate)
        iret=nf90_put_att(ncid,varid(6),'standard_name','wind_speed')
        iret=nf90_put_att(ncid,varid(6),'units','m s-1')
        iret=nf90_put_att(ncid,varid(6),'_FillValue',NF90_FILL_FLOAT)
        iret=nf90_put_att(ncid,varid(6),'content','TX')
        iret=nf90_put_att(ncid,varid(6),'associates','time station')
!Dir
         iret=nf90_def_var(ncid, 'udir', NF90_FLOAT, (/ dimid(2),dimid(1) /), varid(7))
!/NC4        IF (NCTYPE.EQ.4) iret=nf90_def_var_deflate(ncid, varid(7), 1, 1, deflate)
        iret=nf90_put_att(ncid,varid(7),'standard_name','wind_from_direction')
        iret=nf90_put_att(ncid,varid(7),'units','degree')
        iret=nf90_put_att(ncid,varid(7),'_FillValue',NF90_FILL_FLOAT)
        iret=nf90_put_att(ncid,varid(7),'content','TX')
        iret=nf90_put_att(ncid,varid(7),'associates','time station')
!Hs
         iret=nf90_def_var(ncid, 'Hs', NF90_FLOAT, (/ dimid(2),dimid(1) /), varid(8))
!/NC4        IF (NCTYPE.EQ.4) iret=nf90_def_var_deflate(ncid, varid(8), 1, 1, deflate)
        iret=nf90_put_att(ncid,varid(8),'standard_name','significant_wave_height') 
        iret=nf90_put_att(ncid,varid(8),'units','m')
        iret=nf90_put_att(ncid,varid(8),'_FillValue',NF90_FILL_FLOAT)
        iret=nf90_put_att(ncid,varid(8),'content','TX')
        iret=nf90_put_att(ncid,varid(8),'associates','time station')
!Tp
         iret=nf90_def_var(ncid, 'Tp', NF90_FLOAT, (/ dimid(2),dimid(1) /), varid(9))
!/NC4        IF (NCTYPE.EQ.4) iret=nf90_def_var_deflate(ncid, varid(9), 1, 1, deflate)
        iret=nf90_put_att(ncid,varid(9),'standard_name','dominant_wave_period')
        iret=nf90_put_att(ncid,varid(9),'units','s')
        iret=nf90_put_att(ncid,varid(9),'_FillValue',NF90_FILL_FLOAT)
        iret=nf90_put_att(ncid,varid(9),'content','TX')
        iret=nf90_put_att(ncid,varid(9),'associates','time station')


      END IF


!  Close netCDF file
      iret=nf90_close(ncid)
      call check_err(iret)

      return


      END SUBROUTINE W3CRNC 


!--------------------------------------------------------------------------
!--------------------------------------------------------------------------

      subroutine check_err(iret)

      USE NETCDF
      implicit none
      
      integer iret

      if (iret .ne. NF90_NOERR) then
         print *, nf90_strerror(iret)
         stop
      endif
      return
      END subroutine check_err

!--------------------------------------------------------------------------
!--------------------------------------------------------------------------


!/
!/ End of W3OUNP ----------------------------------------------------- /
!/
      END PROGRAM W3OUNP
