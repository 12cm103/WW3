---------------------------------
---------------------------------
Mail:

 For ww3_multi we identified the following
   i) A domain definition name list --- Number of model grids , forcing grids, output server type, flag for unified point output, point output file name flags for masking information in nested domains (essentially line 1 of ww3_multi.inp plus sundry information that pertains to the domain definition).
  ii) The forcing and model grid information and their relation with each other. This is essentially what Tim had laid out. His option 2 is what was universally preferred
 iii) Name lists for output type information. The time steps (starting interval ending) is of one namelist type that can be created for all the output types.
      -- We shall use this opportunity to clean the namelists for field output and move away from the option of reading arrays of flags for the field data
      -- For now we shall just stick to reading point information from a point file and will add the capability of reading the point data as a namelist field later (if the flexibility is deemed worth it).

 iv) ww3_multi.inp has the capability of changing the output characteristics by output type and grid name. For now we shall just implement namelists such that the output information for a particular type will apply to all the grids. But keep the option open to make grid specific changes to specific output types. For that it was suggested that an additional generic field be added to the data structure. 

Arun

--------------------------------

To help kick start the namelist module discussion & implementation I refactored the example program into a module with a driver.  A tarfile is attached.  The example is now namelist input only.  There is now a "domain definition namelist" (called model_def_nml) for the "top-level" inputs.  This is still incomplete.

Tim

---------------------------------

I would myself focus on ww3_grid.inp because I'd also would like to implement the traceability of default / non-default parameters (those of the existing namelists) so that non-default values can be automatically written in all the NetCdF output files... and I know about the few odd forcing arrays that are required for special options like maps of grain sizes or shoreline slopes ...

For his grid-generation Polymesh tool, Aron has also a nice way of writing out a namelist file with all the output parameters, this can be included in the screen output as it is for the ww3_grid namelists today.

Apart from that I think that we need to keep (or discuss?) the WW3 "no-default" philosophy (or rather as few default parameters as possible). Which means that we either make an error when some "required" namelists & parameters are not present or a warning... as it is done today with the switches.

For example we have to make it clear that in the spectra grid e.g. :

&SGRID FMIN=0.04, XFR = 1.1, NK = 24, NTH = 36, THETA1 = 0.

each variable is compulsory (and can technically be given in any order).

My view of how you do this may be to initialize all these as NaN and check after reading the namelists that they have proper values ... but there may be different ways. (Any idea?).

As a result there would be compulsory variables which are initialized to NaNs and others that are actually given a default value.

All these data for ww3_grid end up in the GRIDS(IMOD) structure. I would probably create a new structure DEFAULTGRID with the same components as GRIDS(1) except for all the big arrays (depth, positions ...).

This would be defined only in ww3_grid and ww3_ou?? ... 

Fabrice

---------------------------------
---------------------------------
Code:

in ww3_multi.ftn and ww3_sbs1.ftn :

=> should be done in a macro <=

IF ww3_multi.nml EXIST
THEN fileconf=ww3_multi.nml
ELSE IF ww3_multi.inp EXIT
THEN fileconf=ww3_multi.inp
ELSE echo no conf file
FI

CALL WMINIT(...,fileconf, ...)

***

in wminitmd.ftn :

in the subroutine WMINIT, the fileconf is opened as IFNAME with unit MDSI

***

in w3iogomd.ftn :

the input file is read by the subroutine W3READFLGRD

Is it cleaner to creater a specific subroutine WMINIT for the namelist or adding a test in the current one to use either the inp or the nml ?
Creating a new is probably cleaner but maybe more difficult to maintain..no ?
any idea or suggestions ? 

***

in w3namlmd.ftn :

the list of namelists created are :

domaine name - inputs grids - models - fields - unified points - timing - output date (start end time step) - output request

the subroutine will set default values, read the values from the nml file, check if the user defined values are acceptable

the list of output points will be written in an external file

at the end, it should create an output file with the default+user defined values for all the parameters in the out_pnt and out_grd


for grid/ounf it could be interesting to have a unique subroutine to write or read the parameters in/from mod_def.ww3. To not use the netcdf library in this subroutine, we need to give the values in argument to the ounf. So we need to create a type with the different format float/real/int to read all the parameters depending on their type. It's an idea...

---------------------------------
---------------------------------
Questions:

what is the sibling id ? many grids can have the same group id - how to use this flag ?

is it really mandatory to have at least one moving grid input ?

---------------------------------
---------------------------------
Problems:

compiled with gfortran, the read namelist function crashes for the type assim and resource. error message is : Cannot match namelist object name
gfortran version is 4.3.4 [gcc-4_3-branch revision 152973]
It's working with ifort.


for mww3_test07 :
out_pnt are diffÃrent between two runs with inp file because of diffÃ©rent values of IW, II and IL generated in w3iopo (maybe it is not well initialized) but the postpro results are the same - it's the same with nml file, so the "problem" is general".

---------------------------------
---------------------------------

